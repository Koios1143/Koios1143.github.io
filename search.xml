<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Atcoder DP Contest pB</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pB/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pB"><a href="#Atcoder-DP-Contest-pB" class="headerlink" title="Atcoder DP Contest pB"></a>Atcoder DP Contest pB</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_b" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_b</a></p>
<p>對於每個點 $i$ 可以從點 $i-1, i-2, … , i-k$ 轉移<br>而轉移的花費為 $\mid arr[i]-arr[i-k] \mid$<br>求到點 $n$ 的最小花費</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每種轉移方式求最大值<br>定義 $DP[i]$ 表示點 $i$ 的最小花費<br>則有轉移式 $DP[i] = min(DP[i], DP[i-k] + \mid arr[i]-arr[i-k] \mid)$<br>且 $DP[0] = 0, DP[1]=abs(arr[0]-arr[1])$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,arr[MaxN],dp[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">			dp[i]=INT_MAX;</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; i-j&gt;=<span class="number">0</span> &amp;&amp; j&lt;=k ; j++)&#123;</span><br><span class="line">				dp[i]=min(dp[i], dp[i-j] + <span class="built_in">abs</span>(arr[i]-arr[i-j]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[n<span class="number">-1</span>]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態轉移複雜度為 $O(k)$<br>總複雜度 $O(nk)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pC</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pC/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pC"><a href="#Atcoder-DP-Contest-pC" class="headerlink" title="Atcoder DP Contest pC"></a>Atcoder DP Contest pC</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_c" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_c</a><br>每天都有三種活動可以選擇，且有各自價值<br>本次選擇的活動與上次選擇的不能相同，求第 $n$ 天的最大價值總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於點 $1$ 到點 $n-1$ ，每個點都只能選兩種狀態，取其最大值即可<br>定義 $DP[i][j]$ 表示第 $i$ 天選擇第 $j$ 種活動時的最大價值總和<br>則有轉移式 $DP[i][j] = max(DP[i][s], DP[i-1][t])+arr[i][j],\ s \neq j,\ t\neq j,\ s\neq t$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,now,dp[MaxN][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">3</span> ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;now;</span><br><span class="line">				dp[i][j]=max(dp[i<span class="number">-1</span>][(j+<span class="number">1</span>)%<span class="number">3</span>], dp[i<span class="number">-1</span>][((j+<span class="number">2</span>)%<span class="number">3</span>)]) + now;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			ans=max(ans, dp[n][i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $3n$ 種狀態，每種狀態轉移複雜度為 $O(2)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pA</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pA/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pA"><a href="#Atcoder-DP-Contest-pA" class="headerlink" title="Atcoder DP Contest pA"></a>Atcoder DP Contest pA</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_a" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_a</a><br>跳到第 $i$ 格的方法有兩種</p>
<ul>
<li>從 $i-1$ 格跳，花費 $\mid arr[i]-arr[i-1] \mid$</li>
<li>從 $i-2$ 格跳，花費 $\mid arr[i]-arr[i-2] \mid$</li>
</ul>
<p>求跳到第 $n$ 格的最小花費</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個格子 $i$ 只能從 $i-1$ 和 $i-2$ 轉移過來，因此只需要判斷從誰走過來最小就能保證會是最佳解<br>定義 $DP[i]$ 表示第 $i$ 格的最小花費<br>則有轉移式 $DP[i] = min(DP[i-1] + \mid arr[i]-arr[i-1] \mid,\  DP[i-2] + \mid arr[i]-arr[i-2] \mid)$<br>且 $DP[0] = 0, DP[1] = abs(arr[1]-arr[0])$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[MaxN],dp[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		dp[<span class="number">1</span>]=<span class="built_in">abs</span>(arr[<span class="number">0</span>]-arr[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i]=min(dp[i<span class="number">-1</span>]+<span class="built_in">abs</span>(arr[i]-arr[i<span class="number">-1</span>]), dp[i<span class="number">-2</span>]+<span class="built_in">abs</span>(arr[i]-arr[i<span class="number">-2</span>]));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[n<span class="number">-1</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態的轉移複雜度為 $O(1)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pF</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pF/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pF"><a href="#Atcoder-DP-Contest-pF" class="headerlink" title="Atcoder DP Contest pF"></a>Atcoder DP Contest pF</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_f" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_f</a><br>給兩個字串，問兩字串的LCS，並輸出最大的LCS</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>把兩個字串拆成:</p>
<blockquote>
<p>s = sub1 + e1<br>t = sub2 + e2</p>
</blockquote>
<p>另$LCS(i,j)$ 表示 $s[0<del>i]$ 和 $t[0</del>j]$ 的LCS長度<br>分成四種情況討論</p>
<ol>
<li>LCS包含 $e1$ ，不含 $e2$<br> $LCS(s,t) = LCS(s,sub2)$</li>
<li>LCS包含 $e1$ ，包含 $e2$<br> $LCS(s,t) = LCS(sub1,sub2)+1$</li>
<li>LCS不含 $e1$ ，不含 $e2$<br> $LCS(s,t) = LCS(sub1,sub2)$</li>
<li>LCS不含 $e1$ ，包含 $e2$<br> $LCS(s,t) = LCS(sub1,t)$</li>
</ol>
<p>總的來說，定義 $DP[i][j]$ 表示$LCS(i,j)$的長度<br>則有轉移式<br>$DP[i][j] = DP[i-1][j-1]+1\ ,s[i]=t[j]$<br>$DP[i][j] = max(DP[i-1][j], DP[i],[j-1])\ ,s[i] \neq t[j]$<br>且已知<br>$DP[i][0] = 0, DP[0][j] = 0$</p>
<p>這邊能獲得的僅僅是LCS長度，但題目所求的是字串<br>可以另外開一個陣列紀錄他是從哪裡轉移過來，最後遞迴輸出結果即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,t;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">3005</span>][<span class="number">3005</span>],from[<span class="number">3005</span>][<span class="number">3005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_LCS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(from[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">		print_LCS(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;s[i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(from[i][j] == <span class="number">1</span>)</span><br><span class="line">		print_LCS(i<span class="number">-1</span>,j);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		print_LCS(i,j<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3005</span> ; i++)&#123;</span><br><span class="line">			dp[i][<span class="number">0</span>] = dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=t.size() ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>])&#123;</span><br><span class="line">					dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">					from[i][j]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] &gt; dp[i][j<span class="number">-1</span>])</span><br><span class="line">						from[i][j]=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						from[i][j]=<span class="number">2</span>;</span><br><span class="line">					dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		print_LCS(s.size(),t.size());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $len(s)*len(t)$ 種狀態，每種狀態轉移時間複雜度為 $O(1)$<br>DP複雜度為 $O(len(s)*len(t))$<br>輸出複雜度大約為 $O(len(s)+len(t))$<br>總複雜度 $O(len(s)*len(t))$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>LCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pD</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pD/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pD"><a href="#Atcoder-DP-Contest-pD" class="headerlink" title="Atcoder DP Contest pD"></a>Atcoder DP Contest pD</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_d" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_d</a><br>有一個負重上限為 $w$ 的背包<br>有 $n$ 個物品，每個物品都有其重量及價值<br>求能放入背包內的最大價值為何</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個物品查看用該物品能組出的重量分別能形成的價值為多少並不斷更新<br>定義 $DP[i][j]$ 表示在前 $i$ 物中最大負重為 $j$ 時的最大價值<br>則可得轉移式 $DP[i][j] = max(DP[i-1][j], DP[i-1][j-cost[i]]+value[i])$<br>且為了避免取同物品多次的狀況，最大負重從 $w$ 開始往下算<br>不過在實作上可以發現到每次取的都是 $i-1$ 的狀態，所以實際上可以壓縮成一維</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">105</span>,MaxW = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,w,cost[MaxN],value[MaxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MaxW];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;cost[i]&gt;&gt;value[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=w ; j-cost[i]&gt;=<span class="number">0</span> ; j--)&#123;</span><br><span class="line">				dp[j] = max(dp[j], dp[j-cost[i]]+value[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[w]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $w$ 種狀態，每種狀態轉移複雜度為 $O(n)$<br>總複雜度 $O(wn)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Backpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pE</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pE/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pE"><a href="#Atcoder-DP-Contest-pE" class="headerlink" title="Atcoder DP Contest pE"></a>Atcoder DP Contest pE</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_e" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_e</a><br>與pD相同，但是重量可以來到 $10^9$<br>問最大價值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為重量太大了，導致無法使用pD的作法<br>但是價值不大，可以從這裡下手<br>將問題倒過來思考，如果知道在某價值下最小的重量總和，那麼只要重量總和小於等於題目要求，那麼該價值的最大值即為解</p>
<p>定義 $DP[i]$ 表示在價值為 $i$ 時的最小重量總和<br>則有轉移式 $DP[i] = min(dp[i], dp[i-value[j]]+cost[j])$<br>且已知 $dp[0] = 0$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">105</span>,MaxV = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,w,cost[MaxN],value[MaxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MaxV];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">int</span> tot_value=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;cost[i]&gt;&gt;value[i];</span><br><span class="line">			tot_value+=value[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=tot_value ; i++)&#123;</span><br><span class="line">			dp[i] = INT_MAX;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=tot_value ; j&gt;=value[i] ; j--)&#123;</span><br><span class="line">				dp[j]=min(dp[j], dp[j-value[i]]+cost[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=tot_value ; i&gt;<span class="number">0</span> ; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(dp[i]&lt;=w)&#123;</span><br><span class="line">				ans=i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $NV$ 種狀態，每種狀態轉移複雜度為 $O(1)$<br>輸出複雜度也為 $O(NV)$<br>總複雜度 $O(NV)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Backpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pG</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pG/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pG"><a href="#Atcoder-DP-Contest-pG" class="headerlink" title="Atcoder DP Contest pG"></a>Atcoder DP Contest pG</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_g" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_g</a><br>給一張有向無環圖$G$，求最長路徑大小</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接DFS每個點是從哪些點轉移過來<br>將答案直接儲存在點上，當已經有答案時直接回傳，就跟DP的概念一樣<br>定義 $DP[i]$ 表示點 $i$ 為終點時的最長路徑<br>則有轉移式 $DP[i] = max(DP[k]+1)$，其中 $k$ 表示所有走向點 $i$ 的點</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> val=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; from;</span><br><span class="line">&#125;dots[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dots[px].from.empty())</span><br><span class="line">		<span class="keyword">return</span> dots[px].val=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(dots[px].val)</span><br><span class="line">		<span class="keyword">return</span> dots[px].val;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: dots[px].from)&#123;</span><br><span class="line">		res=max(res,dfs(i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dots[px].val=res+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,a,b ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			dots[b].from.push_back(a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			ans=max(ans,dfs(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS過程會遍歷每個點和邊，且都只會遍歷一次，總複雜度 $O(N+M)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Longest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pH</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pH/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pH"><a href="#Atcoder-DP-Contest-pH" class="headerlink" title="Atcoder DP Contest pH"></a>Atcoder DP Contest pH</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_h" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_h</a><br>給一張二維圖，圖上有障礙物，問從點 $(1,1)$ 走到點 $(h,w)$ 的方法數模 $10^9+7$ 為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟走樓梯的DP概念相同<br>同一個格子只能從左邊或上面轉移過來，則方法數會是兩者相加<br>定義 $DP[i][j]$ 表示在第 $(i,j)$ 格的方法數<br>則有轉移式 $DP[i][j] = DP[i-1][j] = DP[i][j-1]$<br>且已知 $DP[1][1] = 1$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> h,w;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;h&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;h ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;w ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=h ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=w ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>][j<span class="number">-1</span>]==<span class="string">'#'</span>)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				dp[i][j] += (dp[i][j<span class="number">-1</span>] + dp[i<span class="number">-1</span>][j])%Mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[h][w]%Mod&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $hw$ 種狀態，每種狀態轉移複雜度為 $O(1)$<br>總複雜度 $O(hw)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10102</title>
    <url>/2020/06/17/UVa10102/</url>
    <content><![CDATA[<h1 id="UVa10102"><a href="#UVa10102" class="headerlink" title="UVa10102"></a>UVa10102</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>針對每個起點(1)做BFS，找到最近的3得到距離，再從其中找最大值</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans,dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> fx,<span class="keyword">int</span> fy)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">abs</span>(x-fx)+<span class="built_in">abs</span>(y-fy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x&gt;=<span class="number">0</span>) &amp;&amp; (x&lt;n) &amp;&amp; (y&gt;=<span class="number">0</span>) &amp;&amp; (y&lt;n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">		<span class="built_in">vector</span>&lt;pii&gt; px;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">				<span class="keyword">if</span>(arr[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">					px.emplace_back(i,j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//BFS every vector</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: px)&#123;</span><br><span class="line">			<span class="keyword">int</span> fx,fy;tie(fx,fy)=i;</span><br><span class="line">			q.emplace(fx,fy);</span><br><span class="line">			inq[fx][fy]=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">				<span class="keyword">int</span> x,y;tie(x,y)=q.front();</span><br><span class="line">				q.pop();</span><br><span class="line">				<span class="comment">//end</span></span><br><span class="line">				<span class="keyword">if</span>(arr[x][y]==<span class="string">'3'</span>)&#123;</span><br><span class="line">					ans=max(ans, dis(x,y,fx,fy));</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">					<span class="keyword">int</span> nx=x+dir[i][<span class="number">0</span>];</span><br><span class="line">					<span class="keyword">int</span> ny=y+dir[i][<span class="number">1</span>];</span><br><span class="line">					<span class="keyword">if</span>(ok(nx,ny) &amp;&amp; !inq[nx][ny])&#123;</span><br><span class="line">						inq[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">						q.emplace(nx,ny);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">				q.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">105</span> ; j++)&#123;</span><br><span class="line">					inq[i][j]=<span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><ul>
<li>輸入<br>  $O(N^2)$</li>
<li>BFS<br>最糟會將地圖都跑過一遍，為$O(N^2)$<br>而起點最多N個<br>  $O(N^3)$</li>
</ul>
<p>整體複雜度: $O(N^3)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pI</title>
    <url>/2020/06/27/Atcoder%20DP%20Contest%20pI/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pI"><a href="#Atcoder-DP-Contest-pI" class="headerlink" title="Atcoder DP Contest pI"></a>Atcoder DP Contest pI</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_i" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_i</a><br>有 $n$ 個硬幣，每個硬幣有翻到正面的機率 $p_i$<br>問正面多於反面的機率有多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>嘗試遮住最後一個硬幣，觀察每次擲硬幣會影響到哪些<br>定義 $DP[i]$ 表示有 $i$ 個硬幣為正面的機率<br>則有轉移式 $DP[i] = DP[i-1]*arr[i] + DP[i]*(1-arr[i])$<br>且已知 $DP[0] = 1$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> now,dp[<span class="number">3005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;now;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span> ; j&gt;=<span class="number">0</span> ; j--)&#123;</span><br><span class="line">				dp[j] = (j==<span class="number">0</span> ? <span class="number">0</span> : dp[j<span class="number">-1</span>]*now) + dp[j]*(<span class="number">1</span>-now);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>+<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			ans+=dp[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態轉移複雜度約為 $O(n)$<br>總複雜度 $O(n^2)$</p>
<h6 id="tags-Atcoder-DP-Contest"><a href="#tags-Atcoder-DP-Contest" class="headerlink" title="tags: Atcoder DP Contest"></a>tags: <code>Atcoder DP Contest</code></h6>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10684</title>
    <url>/2020/06/23/UVa10684/</url>
    <content><![CDATA[<h1 id="UVa10684"><a href="#UVa10684" class="headerlink" title="UVa10684"></a>UVa10684</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><h2 id="想法1"><a href="#想法1" class="headerlink" title="想法1"></a>想法1</h2><p>直觀的看，暴力去找起點跟終點 $i,j$<br>複雜度$O(N^2)$</p>
<h3 id="Code1"><a href="#Code1" class="headerlink" title="Code1"></a>Code1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,tmp ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			arr[i]=arr[i<span class="number">-1</span>]+tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">-2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;=n ; j++)&#123;</span><br><span class="line">				ans=max(ans, (arr[j]-arr[i<span class="number">-1</span>]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&gt;<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>雖然說UVa上能過，但是超過1s實在太慢</p>
<h2 id="想法二"><a href="#想法二" class="headerlink" title="想法二"></a>想法二</h2><p>對於每個點來說都只有 取 跟 不取 兩種狀態，針對兩種狀態可以寫出DP式<br>定義$DP[i][j]$表示當第$i$個為取或不取時的最大值，$j=0$表不取，$j=1$表取<br>則可得</p>
<ul>
<li>$DP[i][0] = 0$</li>
<li>$DP[i][1] = max(DP[i-1][1]+arr[i], DP[i-1][0]+arr[i])$</li>
</ul>
<p>因為必須保證取的段是連續的，所以當不取時就會是0</p>
<h3 id="Code2"><a href="#Code2" class="headerlink" title="Code2"></a>Code2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10005</span>],dp[<span class="number">10005</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">-2147483647</span>;</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">1</span>]=arr[<span class="number">0</span>];</span><br><span class="line">		ans=max(ans,dp[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">			dp[i][<span class="number">1</span>]=max(dp[i<span class="number">-1</span>][<span class="number">1</span>]+arr[i], dp[i<span class="number">-1</span>][<span class="number">0</span>]+arr[i]);</span><br><span class="line">			ans=max(ans,dp[i][<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="想法3"><a href="#想法3" class="headerlink" title="想法3"></a>想法3</h2><p>針對想法2可以再做改良<br>可以發現到其實無論如何$DP[i][0] = 0$恆成立，所以其實沒必要存在<br>因此DP式化簡為 $DP[i]=max(DP[i-1]+arr[i],arr[i])$</p>
<h3 id="Code3"><a href="#Code3" class="headerlink" title="Code3"></a>Code3</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10005</span>],dp[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=max(<span class="number">-2147483647</span>,arr[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i]=max(dp[i<span class="number">-1</span>]+arr[i],arr[i]);</span><br><span class="line">			ans=max(ans,dp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次狀態轉移複雜度為 $O(1)$<br>而須轉移$n$次，總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10702</title>
    <url>/2020/06/24/UVa10702/</url>
    <content><![CDATA[<h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10702" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10702</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>從 $i$ 走到 $j$ 可以先經過 $k$<br>定義 $DP[n][i][j]$ 表示從 $i$ 走$n$步到 $j$ 的最大價值<br>轉移式: $DP[n][i][j] = max(DP[n][i][j], DP[n-1][i][k] + DP[1][k][j])$<br>且 $DP[1][i][j] = arr[i][j] (i \neq j)$<br>要記得當$i=j$時要走一步是不可能的</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> c,s,e,t,arr[<span class="number">105</span>][<span class="number">105</span>],dp[<span class="number">1005</span>][<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> (i==j) ? dp[n][i][j]=<span class="number">-2147483647</span> : dp[n][i][j]=arr[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dp[n][i][j])&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[n][i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span> ; k&lt;=c ; k++)&#123;</span><br><span class="line">		dp[n][i][j]=max(dp[n][i][j], DP(n<span class="number">-1</span>,i,k)+DP(<span class="number">1</span>,k,j));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dp[n][i][j])</span><br><span class="line">		<span class="keyword">return</span> dp[n][i][j];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;s&gt;&gt;e&gt;&gt;t &amp;&amp; c)&#123;</span><br><span class="line">		<span class="keyword">while</span>(!last.empty())last.pop_back();</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=c ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=c ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;e ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			last.push_back(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: last)&#123;</span><br><span class="line">			ans=max(ans,DP(t,s,i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>共有 $tn^2$ 種狀態，每種狀態轉移複雜度為 $O(2)$<br>每筆測資複雜度為 $O(tn^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10926</title>
    <url>/2020/06/17/UVa10926/</url>
    <content><![CDATA[<h1 id="UVa10926"><a href="#UVa10926" class="headerlink" title="UVa10926"></a>UVa10926</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10926" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10926</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接對於每個依賴遞迴下去，遇到相同的避掉</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,l;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">pii ans;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dep=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(v[px][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//avoid same point occur</span></span><br><span class="line">		<span class="keyword">if</span>(used[v[px][i]])&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			used[v[px][i]]=<span class="literal">true</span>;</span><br><span class="line">			dep += (rec(v[px][i])+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="comment">//init</span></span><br><span class="line">		ans = make_pair(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">105</span> ; j++)&#123;</span><br><span class="line">				v[i][j]=<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//input</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;k ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;l;</span><br><span class="line">				v[i][j]=l;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//rec every point</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,tmp ; i&lt;=n ; i++)&#123;</span><br><span class="line">			tmp = rec(i);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">				used[i]=<span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(tmp &gt; ans.first)&#123;</span><br><span class="line">				ans = make_pair(tmp,i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans.second&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次遞迴最多T個依賴都遞迴到</p>
<ul>
<li>初始化<br>  $O(N^2)$</li>
<li>rec<br>  $O(NT)$ 大約等於 $O(N^2)$<br>整體複雜度: $O(N^2)$</li>
</ul>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
        <tag>recursive</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11258</title>
    <url>/2020/06/23/UVa11258/</url>
    <content><![CDATA[<h1 id="UVa11258"><a href="#UVa11258" class="headerlink" title="UVa11258"></a>UVa11258</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11258" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11258</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>定義$DP[i][j]$為 $i$ ~ $j$ 的最佳解<br>設定轉移式 $DP[i][j] = max(DP[i][j], DP[i][k]+DP[k+1][j])$<br>其中， $k$ 符合 $i\leq k \leq j$<br>起初，我們可以假設$DP[i][j]$為 $i$ ~ $j$ 的數值<br>如果超過INT範圍則設定為0，也就是不會有這樣的可能<br>接下來針對每個$DP[i][j]$找最大值，答案即為$DP[0][s.size()-1]$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,dp[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_to_int</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> now=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">		now*=<span class="number">10</span>;</span><br><span class="line">		now+=(s[l]-<span class="string">'0'</span>);</span><br><span class="line">		l++;</span><br><span class="line">		<span class="keyword">if</span>(now&gt;INT_MAX)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">				dp[i][j]=str_to_int(i,j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=i ; k&lt;=j ; k++)&#123;</span><br><span class="line">					dp[i][j]=max(dp[i][j], dp[i][k]+dp[k+<span class="number">1</span>][j]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][s.size()<span class="number">-1</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>假設s.size()為N<br>共有 $N^2$ 種狀態，每種狀態轉移複雜度為 $O(N)$，總複雜度$O(N^3)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11084</title>
    <url>/2020/06/17/UVa11084/</url>
    <content><![CDATA[<h1 id="UVa11084"><a href="#UVa11084" class="headerlink" title="UVa11084"></a>UVa11084</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11084" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11084</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先暴力枚舉出數字的排列組合<br>再個別轉換成數字比較是否可以整除</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,d,ans,cnt[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">long</span> <span class="keyword">long</span> res)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == s.size())&#123;</span><br><span class="line">		<span class="keyword">if</span>(res%d == <span class="number">0</span>)&#123;</span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			cnt[i]--;</span><br><span class="line">			dfs(depth+<span class="number">1</span>, res*<span class="number">10</span> + i);</span><br><span class="line">			cnt[i]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="comment">//initialize</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)</span><br><span class="line">			cnt[i]=<span class="number">0</span>;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;d;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			cnt[s[i]-<span class="string">'0'</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><ul>
<li>初始化<br>  $O(MaxN)$</li>
<li>DFS<br>  $O(len(s)!)$ (len(s)最大為10)</li>
</ul>
<p>整體複雜度: $O(tN!)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa598</title>
    <url>/2020/06/16/UVa11513/</url>
    <content><![CDATA[<h1 id="UVa11513"><a href="#UVa11513" class="headerlink" title="UVa11513"></a>UVa11513</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11513" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11513</a><br>給一個 $3\times3$ 的拼圖，其中合法的移動方式有</p>
<ul>
<li>選擇其中一行向上移動</li>
<li>選擇其中一列向右移動</li>
</ul>
<p>問是否能透過以上操作回到原樣，若可以則輸出最小移動步數以及移動過程</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果正面BFS的話，單筆測資可能移動數量最高有 $9!$ 種，會TLE<br>因為最終都是回到同一個盤面上，因此反過來BFS即可<br>不過因為是反著走，走的方向也要相反<br>紀錄每個盤面是由甚麼移動轉換到下一個盤面即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="built_in">string</span> <span class="keyword">final</span>=<span class="string">"123456789"</span>,res;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line"><span class="built_in">string</span> input;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fix</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> line, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(type==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//horizontal</span></span><br><span class="line">		<span class="keyword">int</span> px=line*<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">char</span> a=s[px],b=s[px+<span class="number">1</span>],c=s[px+<span class="number">2</span>];</span><br><span class="line">		s[px]=b;</span><br><span class="line">		s[px+<span class="number">1</span>]=c;</span><br><span class="line">		s[px+<span class="number">2</span>]=a;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//straight</span></span><br><span class="line">		<span class="keyword">int</span> px=line;</span><br><span class="line">		<span class="keyword">char</span> a=s[px],b=s[px+<span class="number">3</span>],c=s[px+<span class="number">6</span>];</span><br><span class="line">		s[px]=c;</span><br><span class="line">		s[px+<span class="number">3</span>]=a;</span><br><span class="line">		s[px+<span class="number">6</span>]=b;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fix_to_str</span><span class="params">(<span class="keyword">int</span> line, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> ret;</span><br><span class="line">	<span class="keyword">if</span>(type==<span class="number">0</span>) ret=<span class="string">"H"</span>;</span><br><span class="line">	<span class="keyword">else</span> ret=<span class="string">"V"</span>;</span><br><span class="line">	ret+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+line);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt;q;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; inq;</span><br><span class="line">	q.emplace(<span class="keyword">final</span>);</span><br><span class="line">	inq[<span class="keyword">final</span>]=<span class="literal">true</span>;</span><br><span class="line">	ans[<span class="keyword">final</span>]=make_pair(<span class="string">"end"</span>,<span class="string">"end"</span>);</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">		<span class="built_in">string</span> now=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			res=fix(now,i,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(!inq.count(res))&#123;</span><br><span class="line">				ans[res]=make_pair(fix_to_str(i+<span class="number">1</span>,<span class="number">0</span>),now);</span><br><span class="line">				q.emplace(res);</span><br><span class="line">				inq[res]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			res=fix(now,i,<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(!inq.count(res))&#123;</span><br><span class="line">				ans[res]=make_pair(fix_to_str(i+<span class="number">1</span>,<span class="number">1</span>),now);</span><br><span class="line">				q.emplace(res);</span><br><span class="line">				inq[res]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;input &amp;&amp; input!=<span class="string">"0"</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">3</span> ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">				input+=tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans.count(input))&#123;</span><br><span class="line">			<span class="keyword">if</span>(input==<span class="keyword">final</span>)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"0\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">string</span> nxt=input;</span><br><span class="line">				<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">				<span class="built_in">string</span> out;</span><br><span class="line">				<span class="keyword">while</span>(ans[nxt].second!=<span class="string">"end"</span>)&#123;</span><br><span class="line">					out+=ans[nxt].first;</span><br><span class="line">					nxt=ans[nxt].second;</span><br><span class="line">					cnt++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">" "</span>&lt;&lt;out&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Not solvable\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>初始化可能盤面時間複雜度 $O(9!)$<br>搜尋使用map時間複雜度為 $O(log{9!})$<br>令$N$表示可能盤面數且 $N=9!$<br>總時間複雜度 $O(N+logN)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa116</title>
    <url>/2020/06/23/UVa116/</url>
    <content><![CDATA[<h1 id="UVa116"><a href="#UVa116" class="headerlink" title="UVa116"></a>UVa116</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?116" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?116</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>實作dfs很簡單，但是需要能回朔解<br>這邊想到用陣列去記錄每個點要前往的x座標，而y座標固定是+1，故不紀錄<br>在更新Min_dis要特別注意維護x較小的要在前<br>並且當Min_dis已經為最小值時DFS可以直接return減少遞迴時間</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,arr[<span class="number">15</span>][<span class="number">105</span>],Min_dis[<span class="number">15</span>][<span class="number">105</span>],to[<span class="number">15</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">3</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> m<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=m)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y+<span class="number">1</span>==n)&#123;</span><br><span class="line">		<span class="keyword">return</span> Min_dis[x][y]=arr[x][y];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Min_dis[x][y]!=<span class="number">2147483647</span>)</span><br><span class="line">		<span class="keyword">return</span> Min_dis[x][y];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> nx=next(x+dir[i]);</span><br><span class="line">		<span class="keyword">int</span> ny=y+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> dis=dfs(nx,ny);</span><br><span class="line">		<span class="keyword">if</span>(dis+arr[x][y]&lt;Min_dis[x][y])&#123;</span><br><span class="line">			Min_dis[x][y]=dis+arr[x][y];</span><br><span class="line">			to[x][y]=nx;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(dis+arr[x][y]==Min_dis[x][y] &amp;&amp; to[x][y]&gt;nx)&#123;</span><br><span class="line">			to[x][y]=nx;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Min_dis[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line">		<span class="comment">//input</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">				Min_dis[i][j]=<span class="number">2147483647</span>;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>,tot=<span class="number">2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> res=dfs(i,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(res&lt;tot)&#123;</span><br><span class="line">				tot=res;</span><br><span class="line">				ans=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> start=ans,j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(out)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				out=<span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;start+<span class="number">1</span>;</span><br><span class="line">			start=to[start][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;tot&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>每次狀態轉移複雜度為 $O(1)$，總共有$n\times m$ 種狀態<br>總複雜度 $O(nm)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa12455</title>
    <url>/2020/06/25/UVa12455/</url>
    <content><![CDATA[<h1 id="UVa12455"><a href="#UVa12455" class="headerlink" title="UVa12455"></a>UVa12455</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?12455" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?12455</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個長度的棍子都可以用其他棍子組合而成<br>定義 $DP[i]$ 表示可以組成長度i的棍子<br>則有 $DP[i] = DP[i-k] ,k \leq i$<br>對於每個棍子都看看能不能透過這個棍子與其他棍子的組合組成新的長度</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,p,arr[<span class="number">1005</span>],dp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">1005</span> ; i++)dp[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;p ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//dp[i]=dp[i-k], k&lt;=i</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;p ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=n ; j&gt;=arr[i] ; j--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(dp[j-arr[i]])</span><br><span class="line">					dp[j]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(dp[n])</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>共有n種狀態，每種狀態轉移複雜度為 $O(1)$<br>總複雜度為 $O(n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa598</title>
    <url>/2020/06/16/UVa598/</url>
    <content><![CDATA[<h1 id="UVa598"><a href="#UVa598" class="headerlink" title="UVa598"></a>UVa598</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?598" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?598</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>輸入比較麻煩，這邊用stringstream處理輸入<br>接下來做dfs暴力枚舉每個特定深度即可<br>要特別注意到的是，因為可以保證前面枚舉過的元素不會再出現<br>所以會枚舉到的只有當前點與其後的所有點<br>記錄前一次是取哪個點即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">string</span> s,tmp;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; input;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; news;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">int</span> size, <span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: ans)&#123;</span><br><span class="line">			<span class="keyword">if</span>(out)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">", "</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				out = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=last ; i&lt;news.size() ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">			used[i]=<span class="literal">true</span>;</span><br><span class="line">			ans.push_back(news[i]);</span><br><span class="line">			dfs(depth<span class="number">-1</span>,size,i);</span><br><span class="line">			ans.pop_back();</span><br><span class="line">			used[i]=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	getline(<span class="built_in">cin</span>,s);getline(<span class="built_in">cin</span>,s);</span><br><span class="line">	<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(out)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		input.clear();</span><br><span class="line">		news.clear();</span><br><span class="line">		ans.clear();</span><br><span class="line">		<span class="built_in">memset</span>(used,<span class="keyword">sizeof</span>(used),<span class="literal">false</span>);</span><br><span class="line">		getline(<span class="built_in">cin</span>,s);</span><br><span class="line">		<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">		<span class="keyword">while</span>(ss&gt;&gt;tmp)&#123;</span><br><span class="line">			input.push_back(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s) &amp;&amp; (<span class="keyword">int</span>)(s[<span class="number">0</span>])!=<span class="number">0</span>)&#123;</span><br><span class="line">			news.push_back(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(input.size() == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(input[<span class="number">0</span>]==<span class="string">"*"</span>)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=news.size() ; i++)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">"Size "</span>&lt;&lt;i&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">					dfs(i,i,<span class="number">0</span>);</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">int</span> in0 = stoi(input[<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Size "</span>&lt;&lt;in0&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">				dfs(in0,in0,<span class="number">0</span>);</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> in0=stoi(input[<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">int</span> in1=stoi(input[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=in0 ; i&lt;=in1 ; i++)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Size "</span>&lt;&lt;i&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">				dfs(i,i,<span class="number">0</span>);</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><ul>
<li>輸入、預處理<br>  $O(N)$</li>
<li>DFS<br>  $O(N*(b-a))$<br>整體複雜度: $O(tN(b-a))$</li>
</ul>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa639</title>
    <url>/2020/06/16/UVa639/</url>
    <content><![CDATA[<h1 id="UVa639"><a href="#UVa639" class="headerlink" title="UVa639"></a>UVa639</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?639" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?639</a><br>給一個 $n \times n$ 的棋盤，其中<code>.</code>表示空格子，<code>X</code>表示障礙物<br>如同西洋棋中城堡的走法，求在互不影響下，能在棋盤中放入最多多少城堡且互不影響</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>DFS走訪每個點，枚舉有放及沒放的結果，取最大值</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>,rock=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> put[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=y<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[x][i] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(put[x][i])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i][y] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(put[i][y])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">Next</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y+<span class="number">1</span>&gt;=n)&#123;</span><br><span class="line">		<span class="keyword">return</span> make_pair(x+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> make_pair(x,y+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(pii px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=px.first,y=px.second;</span><br><span class="line">	<span class="keyword">if</span>(x==n<span class="number">-1</span> &amp;&amp; y==n<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="comment">//end</span></span><br><span class="line">		<span class="keyword">if</span>(arr[x][y] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(ok(x,y))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(arr[x][y] == <span class="string">'.'</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ok(x,y))&#123;</span><br><span class="line">			put[x][y]=<span class="literal">true</span>;</span><br><span class="line">			rock++;</span><br><span class="line">			ret=max(ret,dfs(Next(x,y)))+<span class="number">1</span>;</span><br><span class="line">			put[x][y]=<span class="literal">false</span>;</span><br><span class="line">			rock--;</span><br><span class="line">		&#125;		</span><br><span class="line">		ret=max(ret,dfs(Next(x,y)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		ret=max(ret,dfs(Next(x,y)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(put,<span class="literal">false</span>,<span class="keyword">sizeof</span>(put));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dfs(make_pair(<span class="number">0</span>,<span class="number">0</span>))&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>走訪點數量為 $n \times n$，每個點枚舉2種狀態<br>總複雜度 $O(2^{n^2})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b964</title>
    <url>/2020/06/27/Zerojudge%20b694/</url>
    <content><![CDATA[<h1 id="Zerojudge-b694"><a href="#Zerojudge-b694" class="headerlink" title="Zerojudge b694"></a>Zerojudge b694</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b964" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b964</a><br>給定 $n$ 個成績，求成績排序後結果、不及格中最高分、及格中最低分</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>排序可以直接用STL sort解決<br>其他可以拿兩個變數紀錄即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">1000</span>],lucky=<span class="number">999</span>,unlucky=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		<span class="keyword">if</span>(arr[i]&gt;=<span class="number">60</span>)</span><br><span class="line">			lucky = min(lucky,arr[i]);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			unlucky = max(unlucky,arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr,arr+n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(unlucky == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"best case\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;unlucky&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(lucky==<span class="number">999</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"worst case\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;lucky&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>找尋lucky number及unlucky number複雜度為 $O(n)$<br>sort複雜度為 $O(nlogn)$<br>總複雜度 $O(n+nlogn)$</p>
<h6 id="tags-Zerojudge"><a href="#tags-Zerojudge" class="headerlink" title="tags: Zerojudge"></a>tags: <code>Zerojudge</code></h6>]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b965</title>
    <url>/2020/06/27/Zerojudge%20b965/</url>
    <content><![CDATA[<h1 id="Zerojudge-b965"><a href="#Zerojudge-b965" class="headerlink" title="Zerojudge b965"></a>Zerojudge b965</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b965" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b965</a><br>給定一個矩陣經過多次 旋轉/翻轉 後的樣子，求原矩陣</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將操作反著做回來即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r,c,m,arr[<span class="number">10</span>][<span class="number">10</span>],tmp[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cycle</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">	swap(r,c);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">			tmp[i][j] = arr[j][r-i<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	swap(arr,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=r<span class="number">-1</span>,j=<span class="number">0</span> ; i&gt;j ; i--,j++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;c ; k++)&#123;</span><br><span class="line">			swap(arr[i][k],arr[j][k]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c&gt;&gt;m)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			s.push(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> now=s.top();</span><br><span class="line">			<span class="keyword">if</span>(now==<span class="number">0</span>)</span><br><span class="line">				cycle();</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				flip();</span><br><span class="line">			s.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="string">" "</span>&lt;&lt;c&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		print_arr();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>翻轉複雜度為 $O(rc)$<br>旋轉複雜度為 $O(rc)$<br>單筆測資複雜度為 $O(mrc)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b966</title>
    <url>/2020/06/27/Zerojudge%20b966/</url>
    <content><![CDATA[<h1 id="Zerojudge-b966"><a href="#Zerojudge-b966" class="headerlink" title="Zerojudge b966"></a>Zerojudge b966</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b966" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b966</a><br>給定多個線段，求所有線段除去覆蓋部分的長度總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將所有線段排序後將完全覆蓋的線段除去<br>接下來的線段只需討論是否有重疊部分，若有，則將線段界線更新</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v,res;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,l,r ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		v.emplace_back(l,r);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(v.begin(),v.end());</span><br><span class="line">	<span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: v)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i.second&gt;Max)&#123;</span><br><span class="line">			res.push_back(i);</span><br><span class="line">			Max=i.second;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;res.size()<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(res[i].second&gt;=res[i+<span class="number">1</span>].first)&#123;</span><br><span class="line">			res[i+<span class="number">1</span>].first=res[i].first;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			ans+=res[i].second-res[i].first;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=res[res.size()<span class="number">-1</span>].second-res[res.size()<span class="number">-1</span>].first;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>排序複雜度 $O(nlogn)$<br>搜尋答案複雜度 $O(n)$<br>總複雜度 $O(n+nlogn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c290</title>
    <url>/2020/06/29/Zerojudge%20c290/</url>
    <content><![CDATA[<h1 id="Zerojudge-c290"><a href="#Zerojudge-c290" class="headerlink" title="Zerojudge c290"></a>Zerojudge c290</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c290" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c290</a><br>給一個10位數，不超過1000位數，求奇數和與偶數位數合之差的絕對值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>數字用字串儲存，接下來將奇數位數與偶數位數算出來即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">bool</span> A=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(A)</span><br><span class="line">			a+=(s[i]-<span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			b+=(s[i]-<span class="string">'0'</span>);</span><br><span class="line">		A=!A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">abs</span>(a-b)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s))$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b967</title>
    <url>/2020/06/27/Zerojudge%20b967/</url>
    <content><![CDATA[<h1 id="Zerojudge-b967"><a href="#Zerojudge-b967" class="headerlink" title="Zerojudge b967"></a>Zerojudge b967</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b967" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b967</a><br>相當於求樹直徑</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>可以證明透過兩次DFS即可求解<br>證明過程可參閱 <a href="https://www.itread01.com/content/1549861926.html" target="_blank" rel="noopener">https://www.itread01.com/content/1549861926.html</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pii far;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last,<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	far = max(far,&#123;depth,now&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: v[now])&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==last)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		dfs(i,now,depth+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			v[i].clear();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,a,b ; i&lt;n<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			v[a].push_back(b);</span><br><span class="line">			v[b].push_back(a);</span><br><span class="line">		&#125;</span><br><span class="line">		far = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		dfs(<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">		dfs(far.second,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;far.first&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS複雜度為 $O(n)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>Tree</tag>
        <tag>樹直徑</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c291</title>
    <url>/2020/06/29/Zerojudge%20c291/</url>
    <content><![CDATA[<h1 id="Zerojudge-c291"><a href="#Zerojudge-c291" class="headerlink" title="Zerojudge c291"></a>Zerojudge c291</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c291" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c291</a><br>給每個人跟誰屬於同一個群體，求總群體個數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將所有人的關係建成圖，DFS每個點即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Next[<span class="number">50005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	vis[px]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">bool</span> end=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: Next[px])&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			dfs(i);</span><br><span class="line">			end=<span class="literal">false</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(end)</span><br><span class="line">		ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">		Next[i].push_back(tmp);</span><br><span class="line">		Next[tmp].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			dfs(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS複雜度為 $O(n)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c292</title>
    <url>/2020/06/29/Zerojudge%20c292/</url>
    <content><![CDATA[<h1 id="Zerojudge-c292"><a href="#Zerojudge-c292" class="headerlink" title="Zerojudge c292"></a>Zerojudge c292</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c292" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c292</a><br>給一個二維正方形陣列，邊長為奇數，求從中心點開始向指定方向開始走(上/下/左/右)，繞圈走過的元素依照走訪順序輸出</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>模擬一遍即可<br>我的作法是記錄現在走訪到哪裡，接下來要往哪個方向走多少距離<br>將走過點的值儲存到一個陣列中<br>需要留意在最後一次走訪時前進距離會少1</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,st,arr[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> row=<span class="number">1</span>,col=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> face)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(col+row == <span class="number">2</span>*n+<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(st%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; col+row==<span class="number">2</span>*n)</span><br><span class="line">		last=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(st%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; col+row==<span class="number">2</span>*n)</span><br><span class="line">		last=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(face==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//left</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=col-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x][y-i]);</span><br><span class="line">		&#125;</span><br><span class="line">		col++;</span><br><span class="line">		solve(x,y-(col<span class="number">-1</span>),<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//up</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=row-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x-i][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		row++;</span><br><span class="line">		solve(x-(row<span class="number">-1</span>),y,<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="comment">//right</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=col-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x][y+i]);</span><br><span class="line">		&#125;</span><br><span class="line">		col++;</span><br><span class="line">		solve(x,y+(col<span class="number">-1</span>),<span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="comment">//down</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=row-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x+i][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		row++;</span><br><span class="line">		solve(x+(row<span class="number">-1</span>),y,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;st;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">	ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[n/<span class="number">2</span>][n/<span class="number">2</span>]);</span><br><span class="line">	solve(n/<span class="number">2</span>,n/<span class="number">2</span>,st);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每個點走訪一遍，每個點走訪時間複雜度為 $O(1)$<br>總複雜度 $O(n^2)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c294</title>
    <url>/2020/06/29/Zerojudge%20c294/</url>
    <content><![CDATA[<h1 id="Zerojudge-c294"><a href="#Zerojudge-c294" class="headerlink" title="Zerojudge c294"></a>Zerojudge c294</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c294" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c294</a><br>給三邊長，求是否能形成三角形，若可以，為哪種三角形</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>題敘中有給符合各種三角形的敘述了，跟著判斷即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tri[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++) <span class="built_in">cin</span>&gt;&gt;tri[i];</span><br><span class="line">	sort(tri,tri+<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;tri[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;tri[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;tri[<span class="number">2</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(tri[<span class="number">0</span>]+tri[<span class="number">1</span>] &lt;= tri[<span class="number">2</span>])</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"No\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">pow</span>(tri[<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">pow</span>(tri[<span class="number">1</span>],<span class="number">2</span>) == <span class="built_in">pow</span>(tri[<span class="number">2</span>],<span class="number">2</span>))</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Right\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">pow</span>(tri[<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">pow</span>(tri[<span class="number">1</span>],<span class="number">2</span>) &lt; <span class="built_in">pow</span>(tri[<span class="number">2</span>],<span class="number">2</span>))</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Obtuse\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Acute\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>準確來說是 $O(log3)$，大約為 $O(1)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c295</title>
    <url>/2020/06/29/Zerojudge%20c295/</url>
    <content><![CDATA[<h1 id="Zerojudge-c295"><a href="#Zerojudge-c295" class="headerlink" title="Zerojudge c295"></a>Zerojudge c295</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c295" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c295</a><br>給 $N$ 群數字，每群數字包含 $M$ 個正整數，從每群數字中選最大的出來加總<br>輸出其總和 $S$ 以及各群數字中最大值能整除 $S$ 的數字</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>每群數字只需存最大值，接下來 $O(n)$ 判斷每個最大值是否能整除 $S$ 即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s=<span class="number">0</span>,arr[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,tmp ; j&lt;m ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			Max=max(Max,tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		arr[i]=Max;</span><br><span class="line">		s+=Max;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s%arr[i] == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(found) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			<span class="keyword">else</span> found=<span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!found) <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c296</title>
    <url>/2020/06/29/Zerojudge%20c296/</url>
    <content><![CDATA[<h1 id="Zerojudge-c296"><a href="#Zerojudge-c296" class="headerlink" title="Zerojudge c296"></a>Zerojudge c296</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c296" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c296</a><br>有 $N$ 個人圍成一圈，編號 $1$ ~ $N$，從編號 $1$ 開始每 $m$ 回合後從開頭數過來第 $m$ 個人會被淘汰，下一回合從被淘汰的下一個人開始<br>問經過 $k$ 回合後最後被淘汰的下一個人標號為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><h3 id="暴力-45"><a href="#暴力-45" class="headerlink" title="暴力(45%)"></a>暴力(45%)</h3><p>一開始最好想到的就是跟著模擬一遍，大概會是長這樣子<br>利用編號必定會是遞增的特性，搭配sort可以使每次只需花費 $O(nlogn)$ 的時間</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++) v.emplace_back(i,i);</span><br><span class="line">	<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(k--)&#123;</span><br><span class="line">		last=(last+m<span class="number">-1</span>)%n;</span><br><span class="line">		n--;</span><br><span class="line">		v[last].first=INT_MAX;</span><br><span class="line">		sort(v.begin(),v.end());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;v[(last)%n].second&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="觀察規律"><a href="#觀察規律" class="headerlink" title="觀察規律"></a>觀察規律</h3><p>觀察原序號與新序號的關係(假設都從0開始)<br>例如: 當現在 $n=5, m=2, k=4$</p>
<ul>
<li>第一輪<br>  $1$ 號被淘汰</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">3</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
</tbody></table>
<ul>
<li>第二輪<br>  $2$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">3</th>
<th align="center">-</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">2</td>
<td align="center">-</td>
<td align="center">0</td>
</tr>
</tbody></table>
<ul>
<li>第三輪<br>  $0$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">1</th>
<th align="center">-</th>
<th align="center">2</th>
<th align="center">-</th>
<th align="center">0</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">-</td>
<td align="center">1</td>
</tr>
</tbody></table>
<ul>
<li>第四輪<br>  $1$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">-</th>
<th align="center">-</th>
<th align="center">0</th>
<th align="center">-</th>
<th align="center">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
</tbody></table>
<p>觀察編號之間的關係，可以發現到因為循環的關係，<code>舊編號 = (新編號+m)%舊人數</code><br>因此，只要解決第 $k$ 輪的問題，第 $k-1$ 輪的答案也就出來了，再來遞迴求解即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> people, <span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(last==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> res=m%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(last==n)&#123;</span><br><span class="line">		<span class="keyword">int</span> res=(solve(people<span class="number">-1</span>, last<span class="number">-1</span>)+m+<span class="number">1</span>)%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=(solve(people<span class="number">-1</span>, last<span class="number">-1</span>)+m)%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;solve(n,k)+<span class="number">1</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>遞迴總共有 $k$ 層，每層的時間複雜度為 $O(1)$<br>總時間複雜度為 $O(k)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>recursive</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c297</title>
    <url>/2020/06/29/Zerojudge%20c297/</url>
    <content><![CDATA[<h1 id="Zerojudge-c297"><a href="#Zerojudge-c297" class="headerlink" title="Zerojudge c297"></a>Zerojudge c297</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c297" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c297</a><br>給一場棒球各球員打擊的狀況，求在總出局為 $b$ 時，分數為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟著模擬一遍壘包上的狀況即可<br>記得在出局數為3時要重新開始</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> stat[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>,out_tot=<span class="number">0</span>,point=<span class="number">0</span>,bat_time=<span class="number">0</span>,b;</span><br><span class="line"><span class="keyword">bool</span> base[<span class="number">4</span>];<span class="comment">//home, 1, 2, 3 base</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> bases)</span></span>&#123;</span><br><span class="line">	base[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(bases--)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(base[i])&#123;</span><br><span class="line">				base[i]=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">3</span>)</span><br><span class="line">					point++;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					base[i+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	base[<span class="number">0</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,n ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		bat_time=max(bat_time,n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ;  j++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;stat[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;bat_time ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">9</span> ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(stat[j][i][<span class="number">1</span>] == <span class="string">'O'</span>)&#123;</span><br><span class="line">				out++;</span><br><span class="line">				out_tot++;</span><br><span class="line">				<span class="keyword">if</span>(out_tot == b)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;point&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(out == <span class="number">3</span>)&#123;</span><br><span class="line">					<span class="built_in">memset</span>(base,<span class="literal">false</span>,<span class="keyword">sizeof</span>(base));</span><br><span class="line">					out=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'1'</span>) run(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'2'</span>) run(<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'3'</span>) run(<span class="number">3</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'H'</span>) run(<span class="number">4</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $na$ 筆資料，每筆資料轉移時間複雜度為 $O(1)$<br>總複雜度 $O(na)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c461</title>
    <url>/2020/06/28/Zerojudge%20c461/</url>
    <content><![CDATA[<h1 id="Zerojudge-c461"><a href="#Zerojudge-c461" class="headerlink" title="Zerojudge c461"></a>Zerojudge c461</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c461" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c461</a><br>給三個數值，問經過 <code>AND</code> <code>OR</code> <code>XOR</code> 之後的值是否與要求相同</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接照著題目做下去即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> c;</span><br><span class="line"><span class="keyword">int</span> A,B;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;c)&#123;</span><br><span class="line">		<span class="keyword">bool</span> a=(A&gt;<span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">bool</span> b=(B&gt;<span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>((a &amp;&amp; b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"AND\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>((a || b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"OR\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>((a ^ b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"XOR\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!out)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"IMPOSSIBLE\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(1)$</p>
<h6 id="tags-Zerojudge"><a href="#tags-Zerojudge" class="headerlink" title="tags: Zerojudge"></a>tags: <code>Zerojudge</code></h6>]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c462</title>
    <url>/2020/06/28/Zerojudge%20c462/</url>
    <content><![CDATA[<h1 id="Zerojudge-c462"><a href="#Zerojudge-c462" class="headerlink" title="Zerojudge c462"></a>Zerojudge c462</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c462" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c462</a><br>定義長度為 $k$ 的大寫字串與長度為 $k$ 的小寫字串串接而成的字串稱為 <code>k-交錯字串</code><br>給一個字串與 $k$ ，求最長的 <code>k-交錯字串</code> 長度</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用一個陣列去記錄長度，分成幾種狀況討論</p>
<ol>
<li>$s[i]$ 和 $s[i-1]$ 同為大寫或小寫<ol>
<li>本輪循環長度已經超過 $k$<br> 表示循環已經被破壞，並從長度 $k$ 開始重新運算</li>
<li>本輪循環長度小於 $k$<br> 循環長度為上一層+1</li>
</ol>
</li>
<li>$s[i]$ 和 $s[i-1]$ 不同為大寫或小寫<ol>
<li>上一個循環長度為 $k$ 的倍數<br> 表示上一個有完成 $k$ 個循環，可以繼續增長循環</li>
<li>上一個循環長度不為 $k$ 的倍數<br> 表示上一個沒有完成 $k$ 個循環，不能繼續增長循環，從1開始計算</li>
</ol>
</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">1000000</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_lower</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (c&gt;=<span class="string">'a'</span> &amp;&amp; c&lt;=<span class="string">'z'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_higher</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (is_lower(a) &amp;&amp; is_lower(b)) || (is_higher(a) &amp;&amp; is_higher(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">int</span> lower=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> higher=<span class="number">0</span>;</span><br><span class="line">		arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> times=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!same(s[i],s[i<span class="number">-1</span>]))&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>]%n!=<span class="number">0</span>)&#123;</span><br><span class="line">					arr[i]=<span class="number">1</span>;</span><br><span class="line">					times=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					arr[i]=arr[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">					times++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>] &gt;= n*times)&#123;</span><br><span class="line">					arr[i]=n;</span><br><span class="line">					times=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					arr[i]=arr[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]%n==<span class="number">0</span>)</span><br><span class="line">				ans=max(ans,arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s))$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c463</title>
    <url>/2020/06/28/Zerojudge%20c463/</url>
    <content><![CDATA[<h1 id="Zerojudge-c463"><a href="#Zerojudge-c463" class="headerlink" title="Zerojudge c463"></a>Zerojudge c463</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c463" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c463</a><br>給一棵樹，求其根與高度和<br>高度定義為節點到距離最近的葉節點距離</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>找根可以利用根沒有父節點的特性，可以透過記錄每個點是否有父節點找到<br>找到根後就可以從根開始DFS，尋找各節點的高度並回傳，且葉節點高度為0</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Next[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">bool</span> par[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> end=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> h=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: Next[now])&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==last)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> tmp = dfs(i,now);</span><br><span class="line">		h=max(h,tmp);</span><br><span class="line">		ans+=tmp;</span><br><span class="line">		end=<span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(end)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> h+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,tmp ; j&lt;t ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			Next[i].push_back(tmp);</span><br><span class="line">			Next[tmp].push_back(i);</span><br><span class="line">			par[tmp] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!par[i])&#123;</span><br><span class="line">			root=i;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;root&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans += dfs(root,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>找根的時間複雜度為 $O(n)$<br>DFS會遍歷每個點，且每個點便利的時間複雜度為 $O(1)$，DFS時間複雜度為 $O(n)$<br>總時間複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>recursive</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c471</title>
    <url>/2020/06/28/Zerojudge%20c471/</url>
    <content><![CDATA[<h1 id="Zerojudge-c471"><a href="#Zerojudge-c471" class="headerlink" title="Zerojudge c471"></a>Zerojudge c471</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c471" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c471</a><br>給定 $n$ 個物品的重量 $w_i$ 與拿取次數 $f_i$<br>定義拿取物品 $i$ 的花費是其 $f_i$ 乘上在其上方物品的重量總和<br>求最小的花費總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於兩個物品 $i$ $j$，只要 $w_i<em>f_j &lt; w_j</em>f_i$ ，就將 $i$ 放在 $j$ 前面<br>所以我們只要將所有物品以這種方式排序就會得到最佳的擺放方式<br>最後再計算總花費即可求解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,px[<span class="number">100005</span>],w[<span class="number">100005</span>],f[<span class="number">100005</span>],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> w[i]*f[j] &lt; w[j]*f[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">		px[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;f[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(px,px+n,cmp);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		ans+=f[px[i]]*tot;</span><br><span class="line">		tot+=w[px[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>排序時間複雜度為 $O(nlogn)$<br>計算花費時間複雜度為 $O(n)$<br>總時間複雜度為 $O(n+nlogn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c575</title>
    <url>/2020/06/29/Zerojudge%20c575/</url>
    <content><![CDATA[<h1 id="Zerojudge-c575"><a href="#Zerojudge-c575" class="headerlink" title="Zerojudge c575"></a>Zerojudge c575</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c575" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c575</a><br>一個一維座標上有 $n$ 個點 $p$，在座標上最多放置 $k$ 個基地台<br>每個基地台可以隨意放在座標點上任一點(不限於整數座標)，若點包含於某基地台的半徑 $r$ 內則可接收到訊號<br>求基地台的最小直徑，使得所有標記的點都能接收到訊號</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>點可以說幾乎無限多個，顯然暴力去找基地台可以放在哪裡是不合理的<br>但是我們知道基地台可以隨便放，也知道需要包含在那些座標點上<br>我們可以先將所有座標點由小到大排序<br>很快可以知道基地台最大直徑為$p_n-p_1$，最小為1(一個點座標長度)<br>二分搜基地台的直徑 $R$ ，每次檢查 $R$ 是否符合</p>
<p>至於要如何檢查呢?<br>我們可以從 $p_1$ 開始，每次加上本次枚舉的直徑，將包含在直徑內的點都移除，並每次紀錄使用基地台數量<br>當基地台數量超過 $k$ 就不符合</p>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實可以發現，基地台直徑最大為 $(p_n-p_1)/k$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,k,base[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> numbers=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,now=base[<span class="number">0</span>]+len ; i&lt;n &amp;&amp; numbers&lt;=k+<span class="number">1</span> ; )&#123;</span><br><span class="line">		now=base[i]+len;</span><br><span class="line">		numbers++;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;n &amp;&amp; base[i]&lt;=now)</span><br><span class="line">			i++;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(numbers&lt;=k)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;base[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(base,base+n);</span><br><span class="line">	<span class="keyword">int</span> low=<span class="number">1</span>,high=(base[n<span class="number">-1</span>]-base[<span class="number">0</span>])/k+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">		<span class="keyword">int</span> mid=(low+high)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(ok(mid))</span><br><span class="line">			high=mid;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			low=mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;low&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>二分搜時間複雜度為 $O(log(high-low))$<br>本題 $high-low$ 最大不超過 $10^6$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e286</title>
    <url>/2020/06/28/Zerojudge%20e286/</url>
    <content><![CDATA[<h1 id="Zerojudge-e286"><a href="#Zerojudge-e286" class="headerlink" title="Zerojudge e286"></a>Zerojudge e286</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e286" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e286</a><br>給兩場比賽中四局的兩隊比數，求輸贏與比分</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟著題目照做即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tmp,A_win=<span class="number">0</span>,B_win=<span class="number">0</span>,tot_a=<span class="number">0</span>,tot_b=<span class="number">0</span>;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;<span class="number">2</span> ; k++)&#123;</span><br><span class="line">		tot_a = tot_b = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			tot_a+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">4</span> ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			tot_b+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;tot_a&lt;&lt;<span class="string">":"</span>&lt;&lt;tot_b&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">if</span>(tot_a&gt;tot_b)</span><br><span class="line">			A_win++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(tot_a&lt;tot_b)</span><br><span class="line">			B_win++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(A_win&gt;B_win)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Win\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(B_win&gt;A_win)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Lose\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Tie\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(1)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e287</title>
    <url>/2020/06/28/Zerojudge%20e287/</url>
    <content><![CDATA[<h1 id="Zerojudge-e287"><a href="#Zerojudge-e287" class="headerlink" title="Zerojudge e287"></a>Zerojudge e287</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e287" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e287</a><br>給一張地圖，起點從權重最小的點開始，每次往四周沒走過且權重最小的點移動，求移動權重的總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用DFS照做即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>,arr[<span class="number">105</span>][<span class="number">105</span>],dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">pii start=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;=n || y&gt;=m)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(pii s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=s.first;</span><br><span class="line">	<span class="keyword">int</span> y=s.second;</span><br><span class="line">	vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">	ans+=arr[x][y];</span><br><span class="line">	<span class="keyword">int</span> Min=INT_MAX;</span><br><span class="line">	pii next=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> nx=x+dir[i][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> ny=y+dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!vis[nx][ny] &amp;&amp; cango(nx,ny))&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[nx][ny]&lt;Min)&#123;</span><br><span class="line">				next=make_pair(nx,ny);</span><br><span class="line">				Min=arr[nx][ny];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(next.first==<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		dfs(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">int</span> Min=INT_MAX;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;m ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			<span class="keyword">if</span>(arr[i][j]&lt;Min)&#123;</span><br><span class="line">				start=make_pair(i,j);</span><br><span class="line">				Min=arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(start);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(nm)$<br>DFS最多每個點都遍歷過，且每個點遍歷時間複雜度為 $O(1)$ ，DFS總時間複雜度為 $O(nm)$<br>總時間複雜度 $O(nm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e288</title>
    <url>/2020/06/28/Zerojudge%20e288/</url>
    <content><![CDATA[<h1 id="Zerojudge-e288"><a href="#Zerojudge-e288" class="headerlink" title="Zerojudge e288"></a>Zerojudge e288</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e288" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e288</a><br>定義兩字串互為CP必須符合</p>
<ol>
<li>無任何字母相同</li>
<li>須包含所有範圍內的字母</li>
</ol>
<p>給 $n$ 個字串，求CP對數總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>暴力搜尋，複雜度 $O(m^2)$，只有25分</p>
<p>我們可以嘗試把一個字串所包含的字元以bit表示<br>而全部有 <code>A~Z</code> <code>a~i</code> 共38個字母，可以分別以1bit表示各個字母<br>而搜尋每次只需要利用xor的特性，很快就可以獲得差集<br>但是在搜尋的部分如果用 $O(m^2)$ 還是一樣差<br>嘗試將搜尋的內容塞入map中，使得查詢時間複雜度降至 $O(logm)$<br>為了方便塞入map，可以用long long，具有64個bit可以充分運用</p>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實也不一定需要用到map<br>我們需要實現的只有能快速搜尋<br>可以先排序($O(logn)$)再二分搜($O(logn)$)<br>也可以達到map相同的效果</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mask,tmp;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char_to_num</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">'A'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">26</span>+c-<span class="string">'a'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		mask |= (<span class="number">1L</span>L &lt;&lt; i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		tmp=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">			tmp |= (<span class="number">1L</span>L&lt;&lt;(char_to_num(s[j])));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(mp.count(tmp ^ mask)) ans+= mp[tmp ^ mask];</span><br><span class="line">		<span class="keyword">if</span>(mp.count(tmp)) mp[tmp]++;</span><br><span class="line">		<span class="keyword">else</span> mp[tmp]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(m)$<br>查詢時間複雜度約為 $O(logm)$<br>總時間複雜度 $O(m+logm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>sort</tag>
        <tag>Binary Search</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e289</title>
    <url>/2020/06/29/Zerojudge%20e289/</url>
    <content><![CDATA[<h1 id="Zerojudge-e289"><a href="#Zerojudge-e289" class="headerlink" title="Zerojudge e289"></a>Zerojudge e289</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e289" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e289</a><br>定義一個字串是美麗的為長度 $m$ 且有 $m$ 種不同顏色存在<br>給一個字串及長度 $m$ ，求美麗的字串個數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>題目中的輸入可到 $10^{150}$，所以選擇用字串儲存<br>可以先將字串 $0$ ~ $m-1$先塞入map，則後面每次只需</p>
<ol>
<li>將 $s[i]$ 塞入map</li>
<li>檢查size是否為 $m$，若是就將答案加1</li>
<li>將頭去掉</li>
</ol>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實也不一定需要用到map<br>我們需要實現的只有能快速搜尋<br>可以先排序($O(logn)$)再二分搜($O(logn)$)<br>也可以達到map相同的效果</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> tmp[<span class="number">200005</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	mp.clear();</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,head=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp[i];</span><br><span class="line">		<span class="keyword">if</span>(i&lt;m<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(mp.count(tmp[i])) mp[tmp[i]]++;</span><br><span class="line">			<span class="keyword">else</span> mp[tmp[i]]=<span class="number">1</span>,cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(mp[tmp[i]]) mp[tmp[i]]++;</span><br><span class="line">			<span class="keyword">else</span> mp[tmp[i]]=<span class="number">1</span>,cnt++;</span><br><span class="line">			<span class="keyword">if</span>(cnt == m) ans++;</span><br><span class="line">			<span class="keyword">if</span>(mp[tmp[head]]<span class="number">-1</span>) mp[tmp[head]]--;</span><br><span class="line">			<span class="keyword">else</span> mp.erase(tmp[head]),cnt--;</span><br><span class="line">			head++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(n)$<br>查詢時間複雜度約為 $O(logm)$<br>總時間複雜度 $O(n+logm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>sort</tag>
        <tag>Binary Search</tag>
        <tag>Map</tag>
      </tags>
  </entry>
</search>
